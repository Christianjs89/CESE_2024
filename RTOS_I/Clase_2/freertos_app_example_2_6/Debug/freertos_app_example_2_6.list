
freertos_app_example_2_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006818  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  080069c8  080069c8  000079c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bc4  08006bc4  000080d0  2**0
                  CONTENTS
  4 .ARM          00000008  08006bc4  08006bc4  00007bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bcc  08006bcc  000080d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bcc  08006bcc  00007bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bd0  08006bd0  00007bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08006bd4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000080d0  2**0
                  CONTENTS
 10 .bss          000047bc  200000d0  200000d0  000080d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000488c  2000488c  000080d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001939f  00000000  00000000  00008100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003855  00000000  00000000  0002149f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001648  00000000  00000000  00024cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000114f  00000000  00000000  00026340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004cb3  00000000  00000000  0002748f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019db7  00000000  00000000  0002c142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebef5  00000000  00000000  00045ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00131dee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ad0  00000000  00000000  00131e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  00138904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080069b0 	.word	0x080069b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d4 	.word	0x200000d4
 80001ec:	080069b0 	.word	0x080069b0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000594:	f006 f98e 	bl	80068b4 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fd4e 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f816 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f972 	bl	8000888 <MX_GPIO_Init>
  MX_ETH_Init();
 80005a4:	f000 f87c 	bl	80006a0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005a8:	f000 f916 	bl	80007d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ac:	f000 f93e 	bl	800082c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80005b0:	f000 f8c4 	bl	800073c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 80005b4:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <main+0x38>)
 80005b6:	f002 f9b5 	bl	8002924 <HAL_TIM_Base_Start_IT>
	
    /* add application, ... */
	app_init();
 80005ba:	f004 fc7b 	bl	8004eb4 <app_init>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005be:	f003 fb9a 	bl	8003cf6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c2:	bf00      	nop
 80005c4:	e7fd      	b.n	80005c2 <main+0x32>
 80005c6:	bf00      	nop
 80005c8:	20000314 	.word	0x20000314

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	@ 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 f82f 	bl	800563e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	@ (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	@ (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	@ (800069c <SystemClock_Config+0xd0>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800062c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000640:	23a8      	movs	r3, #168	@ 0xa8
 8000642:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000648:	2307      	movs	r3, #7
 800064a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fc4d 	bl	8001ef0 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 fa16 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2105      	movs	r1, #5
 800067e:	4618      	mov	r0, r3
 8000680:	f001 feae 	bl	80023e0 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068a:	f000 f9ff 	bl	8000a8c <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	@ 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <MX_ETH_Init+0x84>)
 80006a6:	4a20      	ldr	r2, [pc, #128]	@ (8000728 <MX_ETH_Init+0x88>)
 80006a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006aa:	4b20      	ldr	r3, [pc, #128]	@ (800072c <MX_ETH_Init+0x8c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006b0:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <MX_ETH_Init+0x8c>)
 80006b2:	2280      	movs	r2, #128	@ 0x80
 80006b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <MX_ETH_Init+0x8c>)
 80006b8:	22e1      	movs	r2, #225	@ 0xe1
 80006ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <MX_ETH_Init+0x8c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <MX_ETH_Init+0x8c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006c8:	4b18      	ldr	r3, [pc, #96]	@ (800072c <MX_ETH_Init+0x8c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ce:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_ETH_Init+0x84>)
 80006d0:	4a16      	ldr	r2, [pc, #88]	@ (800072c <MX_ETH_Init+0x8c>)
 80006d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006d4:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <MX_ETH_Init+0x84>)
 80006d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006da:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006dc:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_ETH_Init+0x84>)
 80006de:	4a14      	ldr	r2, [pc, #80]	@ (8000730 <MX_ETH_Init+0x90>)
 80006e0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006e2:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <MX_ETH_Init+0x84>)
 80006e4:	4a13      	ldr	r2, [pc, #76]	@ (8000734 <MX_ETH_Init+0x94>)
 80006e6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <MX_ETH_Init+0x84>)
 80006ea:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006ee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006f0:	480c      	ldr	r0, [pc, #48]	@ (8000724 <MX_ETH_Init+0x84>)
 80006f2:	f000 fde9 	bl	80012c8 <HAL_ETH_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006fc:	f000 f9c6 	bl	8000a8c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000700:	2238      	movs	r2, #56	@ 0x38
 8000702:	2100      	movs	r1, #0
 8000704:	480c      	ldr	r0, [pc, #48]	@ (8000738 <MX_ETH_Init+0x98>)
 8000706:	f004 ff9a 	bl	800563e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800070a:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <MX_ETH_Init+0x98>)
 800070c:	2221      	movs	r2, #33	@ 0x21
 800070e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000710:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_ETH_Init+0x98>)
 8000712:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000716:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000718:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <MX_ETH_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000264 	.word	0x20000264
 8000728:	40028000 	.word	0x40028000
 800072c:	2000088c 	.word	0x2000088c
 8000730:	200001c4 	.word	0x200001c4
 8000734:	20000124 	.word	0x20000124
 8000738:	200000ec 	.word	0x200000ec

0800073c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	463b      	mov	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000758:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <MX_TIM2_Init+0x94>)
 800075a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800075e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000760:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <MX_TIM2_Init+0x94>)
 8000762:	2201      	movs	r2, #1
 8000764:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <MX_TIM2_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 84000-1;
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <MX_TIM2_Init+0x94>)
 800076e:	4a19      	ldr	r2, [pc, #100]	@ (80007d4 <MX_TIM2_Init+0x98>)
 8000770:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000772:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <MX_TIM2_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <MX_TIM2_Init+0x94>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800077e:	4814      	ldr	r0, [pc, #80]	@ (80007d0 <MX_TIM2_Init+0x94>)
 8000780:	f002 f880 	bl	8002884 <HAL_TIM_Base_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f97f 	bl	8000a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000792:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	4619      	mov	r1, r3
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <MX_TIM2_Init+0x94>)
 800079c:	f002 fa22 	bl	8002be4 <HAL_TIM_ConfigClockSource>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f971 	bl	8000a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b2:	463b      	mov	r3, r7
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	@ (80007d0 <MX_TIM2_Init+0x94>)
 80007b8:	f002 fc4a 	bl	8003050 <HAL_TIMEx_MasterConfigSynchronization>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80007c2:	f000 f963 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000314 	.word	0x20000314
 80007d4:	0001481f 	.word	0x0001481f

080007d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <MX_USART3_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_USART3_UART_Init+0x4c>)
 8000810:	f002 fcae 	bl	8003170 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 f937 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000035c 	.word	0x2000035c
 8000828:	40004800 	.word	0x40004800

0800082c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000832:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000836:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2204      	movs	r2, #4
 800083c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2202      	movs	r2, #2
 8000842:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2202      	movs	r2, #2
 800084e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2201      	movs	r2, #1
 8000854:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	2201      	movs	r2, #1
 8000866:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	f001 fa2f 	bl	8001cd2 <HAL_PCD_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800087a:	f000 f907 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200003a4 	.word	0x200003a4

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	@ 0x30
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
 80008a2:	4b4c      	ldr	r3, [pc, #304]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a4b      	ldr	r2, [pc, #300]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b49      	ldr	r3, [pc, #292]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	4b45      	ldr	r3, [pc, #276]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a44      	ldr	r2, [pc, #272]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b42      	ldr	r3, [pc, #264]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b3e      	ldr	r3, [pc, #248]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a3d      	ldr	r2, [pc, #244]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b3b      	ldr	r3, [pc, #236]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b37      	ldr	r3, [pc, #220]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a36      	ldr	r2, [pc, #216]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b34      	ldr	r3, [pc, #208]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b30      	ldr	r3, [pc, #192]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a2f      	ldr	r2, [pc, #188]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b2d      	ldr	r3, [pc, #180]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b29      	ldr	r3, [pc, #164]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a28      	ldr	r2, [pc, #160]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 8000934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <MX_GPIO_Init+0x14c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f244 0181 	movw	r1, #16513	@ 0x4081
 800094c:	4822      	ldr	r0, [pc, #136]	@ (80009d8 <MX_GPIO_Init+0x150>)
 800094e:	f001 f9a7 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2140      	movs	r1, #64	@ 0x40
 8000956:	4821      	ldr	r0, [pc, #132]	@ (80009dc <MX_GPIO_Init+0x154>)
 8000958:	f001 f9a2 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800095c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000962:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	481b      	ldr	r0, [pc, #108]	@ (80009e0 <MX_GPIO_Init+0x158>)
 8000974:	f000 ffd0 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000978:	f244 0381 	movw	r3, #16513	@ 0x4081
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4811      	ldr	r0, [pc, #68]	@ (80009d8 <MX_GPIO_Init+0x150>)
 8000992:	f000 ffc1 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000996:	2340      	movs	r3, #64	@ 0x40
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	480b      	ldr	r0, [pc, #44]	@ (80009dc <MX_GPIO_Init+0x154>)
 80009ae:	f000 ffb3 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b2:	2380      	movs	r3, #128	@ 0x80
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_GPIO_Init+0x154>)
 80009c6:	f000 ffa7 	bl	8001918 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ca:	bf00      	nop
 80009cc:	3730      	adds	r7, #48	@ 0x30
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40021800 	.word	0x40021800
 80009e0:	40020800 	.word	0x40020800

080009e4 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <configureTimerForRunTimeStats+0x14>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	20000888 	.word	0x20000888

080009fc <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000a00:	4b03      	ldr	r3, [pc, #12]	@ (8000a10 <getRunTimeCounterValue+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000888 	.word	0x20000888

08000a14 <vApplicationIdleHook>:

/* Hook Functions */
void vApplicationIdleHook(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	   The idle hook will only get called if configUSE_IDLE_HOOK is set to 1
	   https://www.freertos.org/a00016.html
	   The idle hook is called repeatedly as long as the idle task is running. It
	   is paramount that the idle hook function does not call any API functions
	   that could cause it to block.*/
	LOGGER_LOG("  +\r\n");
 8000a18:	f003 ff7e 	bl	8004918 <vPortEnterCritical>
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <vApplicationIdleHook+0x30>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a09      	ldr	r2, [pc, #36]	@ (8000a48 <vApplicationIdleHook+0x34>)
 8000a22:	213f      	movs	r1, #63	@ 0x3f
 8000a24:	4618      	mov	r0, r3
 8000a26:	f004 fd93 	bl	8005550 <sniprintf>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4a07      	ldr	r2, [pc, #28]	@ (8000a4c <vApplicationIdleHook+0x38>)
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <vApplicationIdleHook+0x30>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f004 fb1d 	bl	8005074 <logger_log_print_>
 8000a3a:	f003 ff9f 	bl	800497c <vPortExitCritical>
	
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	08006b70 	.word	0x08006b70
 8000a48:	080069c8 	.word	0x080069c8
 8000a4c:	2000468c 	.word	0x2000468c

08000a50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a09      	ldr	r2, [pc, #36]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d101      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a62:	f000 fb0b 	bl	800107c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a6e:	d104      	bne.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 8000a70:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4a04      	ldr	r2, [pc, #16]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a78:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40010000 	.word	0x40010000
 8000a88:	20000888 	.word	0x20000888

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <Error_Handler+0x8>

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <HAL_MspInit+0x54>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	4a11      	ldr	r2, [pc, #68]	@ (8000aec <HAL_MspInit+0x54>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aae:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <HAL_MspInit+0x54>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <HAL_MspInit+0x54>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <HAL_MspInit+0x54>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <HAL_MspInit+0x54>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	210f      	movs	r1, #15
 8000ada:	f06f 0001 	mvn.w	r0, #1
 8000ade:	f000 fbc9 	bl	8001274 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08e      	sub	sp, #56	@ 0x38
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a55      	ldr	r2, [pc, #340]	@ (8000c64 <HAL_ETH_MspInit+0x174>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	f040 80a4 	bne.w	8000c5c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
 8000b18:	4b53      	ldr	r3, [pc, #332]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1c:	4a52      	ldr	r2, [pc, #328]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b24:	4b50      	ldr	r3, [pc, #320]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b2c:	623b      	str	r3, [r7, #32]
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
 8000b34:	4b4c      	ldr	r3, [pc, #304]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b38:	4a4b      	ldr	r2, [pc, #300]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b40:	4b49      	ldr	r3, [pc, #292]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
 8000b50:	4b45      	ldr	r3, [pc, #276]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b54:	4a44      	ldr	r2, [pc, #272]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5c:	4b42      	ldr	r3, [pc, #264]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b70:	4a3d      	ldr	r2, [pc, #244]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b78:	4b3b      	ldr	r3, [pc, #236]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	4b37      	ldr	r3, [pc, #220]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8c:	4a36      	ldr	r2, [pc, #216]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b94:	4b34      	ldr	r3, [pc, #208]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b30      	ldr	r3, [pc, #192]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba8:	4a2f      	ldr	r2, [pc, #188]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	4b29      	ldr	r3, [pc, #164]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc4:	4a28      	ldr	r2, [pc, #160]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bcc:	4b26      	ldr	r3, [pc, #152]	@ (8000c68 <HAL_ETH_MspInit+0x178>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bd8:	2332      	movs	r3, #50	@ 0x32
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be8:	230b      	movs	r3, #11
 8000bea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	481e      	ldr	r0, [pc, #120]	@ (8000c6c <HAL_ETH_MspInit+0x17c>)
 8000bf4:	f000 fe90 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bf8:	2386      	movs	r3, #134	@ 0x86
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c08:	230b      	movs	r3, #11
 8000c0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	4817      	ldr	r0, [pc, #92]	@ (8000c70 <HAL_ETH_MspInit+0x180>)
 8000c14:	f000 fe80 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2a:	230b      	movs	r3, #11
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	480f      	ldr	r0, [pc, #60]	@ (8000c74 <HAL_ETH_MspInit+0x184>)
 8000c36:	f000 fe6f 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c3a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4808      	ldr	r0, [pc, #32]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000c58:	f000 fe5e 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c5c:	bf00      	nop
 8000c5e:	3738      	adds	r7, #56	@ 0x38
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40028000 	.word	0x40028000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020800 	.word	0x40020800
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40020400 	.word	0x40020400
 8000c78:	40021800 	.word	0x40021800

08000c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c8c:	d115      	bne.n	8000cba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <HAL_TIM_Base_MspInit+0x48>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc4 <HAL_TIM_Base_MspInit+0x48>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <HAL_TIM_Base_MspInit+0x48>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2105      	movs	r1, #5
 8000cae:	201c      	movs	r0, #28
 8000cb0:	f000 fae0 	bl	8001274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cb4:	201c      	movs	r0, #28
 8000cb6:	f000 faf9 	bl	80012ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	@ (8000d4c <HAL_UART_MspInit+0x84>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d12c      	bne.n	8000d44 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <HAL_UART_MspInit+0x88>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	4a17      	ldr	r2, [pc, #92]	@ (8000d50 <HAL_UART_MspInit+0x88>)
 8000cf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <HAL_UART_MspInit+0x88>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <HAL_UART_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a10      	ldr	r2, [pc, #64]	@ (8000d50 <HAL_UART_MspInit+0x88>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_UART_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d34:	2307      	movs	r3, #7
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <HAL_UART_MspInit+0x8c>)
 8000d40:	f000 fdea 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	@ 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40004800 	.word	0x40004800
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020c00 	.word	0x40020c00

08000d58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	@ 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d78:	d13f      	bne.n	8000dfa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <HAL_PCD_MspInit+0xac>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a20      	ldr	r2, [pc, #128]	@ (8000e04 <HAL_PCD_MspInit+0xac>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e04 <HAL_PCD_MspInit+0xac>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d96:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000da8:	230a      	movs	r3, #10
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4815      	ldr	r0, [pc, #84]	@ (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000db4:	f000 fdb0 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000db8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480e      	ldr	r0, [pc, #56]	@ (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000dce:	f000 fda3 	bl	8001918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <HAL_PCD_MspInit+0xac>)
 8000dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	@ (8000e04 <HAL_PCD_MspInit+0xac>)
 8000dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ddc:	6353      	str	r3, [r2, #52]	@ 0x34
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <HAL_PCD_MspInit+0xac>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <HAL_PCD_MspInit+0xac>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dee:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <HAL_PCD_MspInit+0xac>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	@ 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020000 	.word	0x40020000

08000e0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08c      	sub	sp, #48	@ 0x30
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee0 <HAL_InitTick+0xd4>)
 8000e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e24:	4a2e      	ldr	r2, [pc, #184]	@ (8000ee0 <HAL_InitTick+0xd4>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee0 <HAL_InitTick+0xd4>)
 8000e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e38:	f107 020c 	add.w	r2, r7, #12
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 fcec 	bl	8002820 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e48:	f001 fcd6 	bl	80027f8 <HAL_RCC_GetPCLK2Freq>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e54:	4a23      	ldr	r2, [pc, #140]	@ (8000ee4 <HAL_InitTick+0xd8>)
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	0c9b      	lsrs	r3, r3, #18
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e60:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <HAL_InitTick+0xdc>)
 8000e62:	4a22      	ldr	r2, [pc, #136]	@ (8000eec <HAL_InitTick+0xe0>)
 8000e64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e66:	4b20      	ldr	r3, [pc, #128]	@ (8000ee8 <HAL_InitTick+0xdc>)
 8000e68:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e6c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee8 <HAL_InitTick+0xdc>)
 8000e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e72:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <HAL_InitTick+0xdc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee8 <HAL_InitTick+0xdc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e80:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <HAL_InitTick+0xdc>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e86:	4818      	ldr	r0, [pc, #96]	@ (8000ee8 <HAL_InitTick+0xdc>)
 8000e88:	f001 fcfc 	bl	8002884 <HAL_TIM_Base_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d11b      	bne.n	8000ed2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e9a:	4813      	ldr	r0, [pc, #76]	@ (8000ee8 <HAL_InitTick+0xdc>)
 8000e9c:	f001 fd42 	bl	8002924 <HAL_TIM_Base_Start_IT>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ea6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d111      	bne.n	8000ed2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000eae:	2019      	movs	r0, #25
 8000eb0:	f000 f9fc 	bl	80012ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	d808      	bhi.n	8000ecc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	2019      	movs	r0, #25
 8000ec0:	f000 f9d8 	bl	8001274 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <HAL_InitTick+0xe4>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e002      	b.n	8000ed2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3730      	adds	r7, #48	@ 0x30
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	431bde83 	.word	0x431bde83
 8000ee8:	20000894 	.word	0x20000894
 8000eec:	40010000 	.word	0x40010000
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <NMI_Handler+0x4>

08000efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f30:	4802      	ldr	r0, [pc, #8]	@ (8000f3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f32:	f001 fd67 	bl	8002a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000894 	.word	0x20000894

08000f40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <TIM2_IRQHandler+0x10>)
 8000f46:	f001 fd5d 	bl	8002a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000314 	.word	0x20000314

08000f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f5c:	4a14      	ldr	r2, [pc, #80]	@ (8000fb0 <_sbrk+0x5c>)
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <_sbrk+0x60>)
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f68:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <_sbrk+0x64>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	@ (8000fbc <_sbrk+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d207      	bcs.n	8000f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f84:	f004 fbaa 	bl	80056dc <__errno>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	e009      	b.n	8000fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <_sbrk+0x64>)
 8000fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20030000 	.word	0x20030000
 8000fb4:	00000400 	.word	0x00000400
 8000fb8:	200008dc 	.word	0x200008dc
 8000fbc:	20004890 	.word	0x20004890

08000fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800101c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe8:	f7ff ffea 	bl	8000fc0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	@ (8001024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	@ (8001030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001012:	f004 fb69 	bl	80056e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fabb 	bl	8000590 <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800101c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001028:	08006bd4 	.word	0x08006bd4
  ldr r2, =_sbss
 800102c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001030:	2000488c 	.word	0x2000488c

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>
	...

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800103c:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	@ (8001078 <HAL_Init+0x40>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001048:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <HAL_Init+0x40>)
 800104e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a07      	ldr	r2, [pc, #28]	@ (8001078 <HAL_Init+0x40>)
 800105a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 f8fc 	bl	800125e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001066:	200f      	movs	r0, #15
 8001068:	f7ff fed0 	bl	8000e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106c:	f7ff fd14 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023c00 	.word	0x40023c00

0800107c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008
 80010a0:	200008e0 	.word	0x200008e0

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	200008e0 	.word	0x200008e0

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff ffee 	bl	80010a4 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <HAL_Delay+0x44>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010e2:	bf00      	nop
 80010e4:	f7ff ffde 	bl	80010a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008

08001104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800112c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001136:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	2b00      	cmp	r3, #0
 8001178:	db0b      	blt.n	8001192 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	4907      	ldr	r1, [pc, #28]	@ (80011a0 <__NVIC_EnableIRQ+0x38>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	2001      	movs	r0, #1
 800118a:	fa00 f202 	lsl.w	r2, r0, r2
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000e100 	.word	0xe000e100

080011a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	db0a      	blt.n	80011ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	490c      	ldr	r1, [pc, #48]	@ (80011f0 <__NVIC_SetPriority+0x4c>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011cc:	e00a      	b.n	80011e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4908      	ldr	r1, [pc, #32]	@ (80011f4 <__NVIC_SetPriority+0x50>)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	3b04      	subs	r3, #4
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	440b      	add	r3, r1
 80011e2:	761a      	strb	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	@ 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f1c3 0307 	rsb	r3, r3, #7
 8001212:	2b04      	cmp	r3, #4
 8001214:	bf28      	it	cs
 8001216:	2304      	movcs	r3, #4
 8001218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3304      	adds	r3, #4
 800121e:	2b06      	cmp	r3, #6
 8001220:	d902      	bls.n	8001228 <NVIC_EncodePriority+0x30>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3b03      	subs	r3, #3
 8001226:	e000      	b.n	800122a <NVIC_EncodePriority+0x32>
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	f04f 32ff 	mov.w	r2, #4294967295
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43d9      	mvns	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	4313      	orrs	r3, r2
         );
}
 8001252:	4618      	mov	r0, r3
 8001254:	3724      	adds	r7, #36	@ 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ff4c 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001286:	f7ff ff61 	bl	800114c <__NVIC_GetPriorityGrouping>
 800128a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	6978      	ldr	r0, [r7, #20]
 8001292:	f7ff ffb1 	bl	80011f8 <NVIC_EncodePriority>
 8001296:	4602      	mov	r2, r0
 8001298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff80 	bl	80011a4 <__NVIC_SetPriority>
}
 80012a4:	bf00      	nop
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff54 	bl	8001168 <__NVIC_EnableIRQ>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e06c      	b.n	80013b4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d106      	bne.n	80012f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2223      	movs	r2, #35	@ 0x23
 80012e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fbff 	bl	8000af0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	4b31      	ldr	r3, [pc, #196]	@ (80013bc <HAL_ETH_Init+0xf4>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	4a30      	ldr	r2, [pc, #192]	@ (80013bc <HAL_ETH_Init+0xf4>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001300:	6453      	str	r3, [r2, #68]	@ 0x44
 8001302:	4b2e      	ldr	r3, [pc, #184]	@ (80013bc <HAL_ETH_Init+0xf4>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800130e:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <HAL_ETH_Init+0xf8>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	4a2b      	ldr	r2, [pc, #172]	@ (80013c0 <HAL_ETH_Init+0xf8>)
 8001314:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001318:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800131a:	4b29      	ldr	r3, [pc, #164]	@ (80013c0 <HAL_ETH_Init+0xf8>)
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	4927      	ldr	r1, [pc, #156]	@ (80013c0 <HAL_ETH_Init+0xf8>)
 8001324:	4313      	orrs	r3, r2
 8001326:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001328:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <HAL_ETH_Init+0xf8>)
 800132a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001342:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001344:	f7ff feae 	bl	80010a4 <HAL_GetTick>
 8001348:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800134a:	e011      	b.n	8001370 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800134c:	f7ff feaa 	bl	80010a4 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800135a:	d909      	bls.n	8001370 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2204      	movs	r2, #4
 8001360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	22e0      	movs	r2, #224	@ 0xe0
 8001368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e021      	b.n	80013b4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1e4      	bne.n	800134c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f958 	bl	8001638 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f9ff 	bl	800178c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 fa55 	bl	800183e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	461a      	mov	r2, r3
 800139a:	2100      	movs	r1, #0
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f9bd 	bl	800171c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2210      	movs	r2, #16
 80013ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40013800 	.word	0x40013800

080013c4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4b51      	ldr	r3, [pc, #324]	@ (8001520 <ETH_SetMACConfig+0x15c>)
 80013da:	4013      	ands	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	7c1b      	ldrb	r3, [r3, #16]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d102      	bne.n	80013ec <ETH_SetMACConfig+0x28>
 80013e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013ea:	e000      	b.n	80013ee <ETH_SetMACConfig+0x2a>
 80013ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	7c5b      	ldrb	r3, [r3, #17]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <ETH_SetMACConfig+0x38>
 80013f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013fa:	e000      	b.n	80013fe <ETH_SetMACConfig+0x3a>
 80013fc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013fe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001404:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	7fdb      	ldrb	r3, [r3, #31]
 800140a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800140c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001412:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	7f92      	ldrb	r2, [r2, #30]
 8001418:	2a00      	cmp	r2, #0
 800141a:	d102      	bne.n	8001422 <ETH_SetMACConfig+0x5e>
 800141c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001420:	e000      	b.n	8001424 <ETH_SetMACConfig+0x60>
 8001422:	2200      	movs	r2, #0
                        macconf->Speed |
 8001424:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	7f1b      	ldrb	r3, [r3, #28]
 800142a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800142c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001432:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	791b      	ldrb	r3, [r3, #4]
 8001438:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800143a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001442:	2a00      	cmp	r2, #0
 8001444:	d102      	bne.n	800144c <ETH_SetMACConfig+0x88>
 8001446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800144a:	e000      	b.n	800144e <ETH_SetMACConfig+0x8a>
 800144c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800144e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	7bdb      	ldrb	r3, [r3, #15]
 8001454:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001456:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800145c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001464:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001466:	4313      	orrs	r3, r2
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800147e:	2001      	movs	r0, #1
 8001480:	f7ff fe1c 	bl	80010bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800149a:	4013      	ands	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80014aa:	2a00      	cmp	r2, #0
 80014ac:	d101      	bne.n	80014b2 <ETH_SetMACConfig+0xee>
 80014ae:	2280      	movs	r2, #128	@ 0x80
 80014b0:	e000      	b.n	80014b4 <ETH_SetMACConfig+0xf0>
 80014b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014b4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80014c2:	2a01      	cmp	r2, #1
 80014c4:	d101      	bne.n	80014ca <ETH_SetMACConfig+0x106>
 80014c6:	2208      	movs	r2, #8
 80014c8:	e000      	b.n	80014cc <ETH_SetMACConfig+0x108>
 80014ca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80014d4:	2a01      	cmp	r2, #1
 80014d6:	d101      	bne.n	80014dc <ETH_SetMACConfig+0x118>
 80014d8:	2204      	movs	r2, #4
 80014da:	e000      	b.n	80014de <ETH_SetMACConfig+0x11a>
 80014dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80014e6:	2a01      	cmp	r2, #1
 80014e8:	d101      	bne.n	80014ee <ETH_SetMACConfig+0x12a>
 80014ea:	2202      	movs	r2, #2
 80014ec:	e000      	b.n	80014f0 <ETH_SetMACConfig+0x12c>
 80014ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014f0:	4313      	orrs	r3, r2
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff fdd7 	bl	80010bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	ff20810f 	.word	0xff20810f

08001524 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	4b3d      	ldr	r3, [pc, #244]	@ (8001634 <ETH_SetDMAConfig+0x110>)
 800153e:	4013      	ands	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	7b1b      	ldrb	r3, [r3, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d102      	bne.n	8001550 <ETH_SetDMAConfig+0x2c>
 800154a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800154e:	e000      	b.n	8001552 <ETH_SetDMAConfig+0x2e>
 8001550:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	7b5b      	ldrb	r3, [r3, #13]
 8001556:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001558:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	7f52      	ldrb	r2, [r2, #29]
 800155e:	2a00      	cmp	r2, #0
 8001560:	d102      	bne.n	8001568 <ETH_SetDMAConfig+0x44>
 8001562:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001566:	e000      	b.n	800156a <ETH_SetDMAConfig+0x46>
 8001568:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800156a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	7b9b      	ldrb	r3, [r3, #14]
 8001570:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001572:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001578:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	7f1b      	ldrb	r3, [r3, #28]
 800157e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001580:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	7f9b      	ldrb	r3, [r3, #30]
 8001586:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001588:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800158e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001596:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001598:	4313      	orrs	r3, r2
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4313      	orrs	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015a8:	461a      	mov	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff fd7e 	bl	80010bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015c8:	461a      	mov	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	791b      	ldrb	r3, [r3, #4]
 80015d2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015d8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015de:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015e4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015ec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015ee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015f6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015fc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001606:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800160a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001618:	2001      	movs	r0, #1
 800161a:	f7ff fd4f 	bl	80010bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001626:	461a      	mov	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	f8de3f23 	.word	0xf8de3f23

08001638 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b0a6      	sub	sp, #152	@ 0x98
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001640:	2301      	movs	r3, #1
 8001642:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001646:	2301      	movs	r3, #1
 8001648:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800164c:	2300      	movs	r3, #0
 800164e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001656:	2301      	movs	r3, #1
 8001658:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001662:	2301      	movs	r3, #1
 8001664:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001674:	2300      	movs	r3, #0
 8001676:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800167e:	2300      	movs	r3, #0
 8001680:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800169a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800169e:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016b0:	4619      	mov	r1, r3
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff fe86 	bl	80013c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016b8:	2301      	movs	r3, #1
 80016ba:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016bc:	2301      	movs	r3, #1
 80016be:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016c6:	2301      	movs	r3, #1
 80016c8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016de:	2301      	movs	r3, #1
 80016e0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016e4:	2301      	movs	r3, #1
 80016e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ec:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ff08 	bl	8001524 <ETH_SetDMAConfig>
}
 8001714:	bf00      	nop
 8001716:	3798      	adds	r7, #152	@ 0x98
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3305      	adds	r3, #5
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	3204      	adds	r2, #4
 8001734:	7812      	ldrb	r2, [r2, #0]
 8001736:	4313      	orrs	r3, r2
 8001738:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <ETH_MACAddressConfig+0x68>)
 800173e:	4413      	add	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3303      	adds	r3, #3
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	061a      	lsls	r2, r3, #24
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3302      	adds	r3, #2
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	041b      	lsls	r3, r3, #16
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3301      	adds	r3, #1
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	4313      	orrs	r3, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	7812      	ldrb	r2, [r2, #0]
 8001766:	4313      	orrs	r3, r2
 8001768:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <ETH_MACAddressConfig+0x6c>)
 800176e:	4413      	add	r3, r2
 8001770:	461a      	mov	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	6013      	str	r3, [r2, #0]
}
 8001776:	bf00      	nop
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40028040 	.word	0x40028040
 8001788:	40028044 	.word	0x40028044

0800178c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	e03e      	b.n	8001818 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68d9      	ldr	r1, [r3, #12]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2200      	movs	r2, #0
 80017b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	3206      	adds	r2, #6
 80017cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d80c      	bhi.n	80017fc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68d9      	ldr	r1, [r3, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	440b      	add	r3, r1
 80017f4:	461a      	mov	r2, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	e004      	b.n	8001806 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	461a      	mov	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	3301      	adds	r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b03      	cmp	r3, #3
 800181c:	d9bd      	bls.n	800179a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001830:	611a      	str	r2, [r3, #16]
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e046      	b.n	80018da <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6919      	ldr	r1, [r3, #16]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001888:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001890:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	3212      	adds	r2, #18
 80018a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d80c      	bhi.n	80018ca <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6919      	ldr	r1, [r3, #16]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	440b      	add	r3, r1
 80018c2:	461a      	mov	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	e004      	b.n	80018d4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3301      	adds	r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d9b5      	bls.n	800184c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800190a:	60da      	str	r2, [r3, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	@ 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	e177      	b.n	8001c24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	429a      	cmp	r2, r3
 800194e:	f040 8166 	bne.w	8001c1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d005      	beq.n	800196a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001966:	2b02      	cmp	r3, #2
 8001968:	d130      	bne.n	80019cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 0201 	and.w	r2, r3, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d017      	beq.n	8001a08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d123      	bne.n	8001a5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	08da      	lsrs	r2, r3, #3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3208      	adds	r2, #8
 8001a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	08da      	lsrs	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3208      	adds	r2, #8
 8001a56:	69b9      	ldr	r1, [r7, #24]
 8001a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0203 	and.w	r2, r3, #3
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80c0 	beq.w	8001c1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b66      	ldr	r3, [pc, #408]	@ (8001c3c <HAL_GPIO_Init+0x324>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	4a65      	ldr	r2, [pc, #404]	@ (8001c3c <HAL_GPIO_Init+0x324>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aae:	4b63      	ldr	r3, [pc, #396]	@ (8001c3c <HAL_GPIO_Init+0x324>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aba:	4a61      	ldr	r2, [pc, #388]	@ (8001c40 <HAL_GPIO_Init+0x328>)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a58      	ldr	r2, [pc, #352]	@ (8001c44 <HAL_GPIO_Init+0x32c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d037      	beq.n	8001b56 <HAL_GPIO_Init+0x23e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a57      	ldr	r2, [pc, #348]	@ (8001c48 <HAL_GPIO_Init+0x330>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d031      	beq.n	8001b52 <HAL_GPIO_Init+0x23a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a56      	ldr	r2, [pc, #344]	@ (8001c4c <HAL_GPIO_Init+0x334>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d02b      	beq.n	8001b4e <HAL_GPIO_Init+0x236>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a55      	ldr	r2, [pc, #340]	@ (8001c50 <HAL_GPIO_Init+0x338>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d025      	beq.n	8001b4a <HAL_GPIO_Init+0x232>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a54      	ldr	r2, [pc, #336]	@ (8001c54 <HAL_GPIO_Init+0x33c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01f      	beq.n	8001b46 <HAL_GPIO_Init+0x22e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a53      	ldr	r2, [pc, #332]	@ (8001c58 <HAL_GPIO_Init+0x340>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d019      	beq.n	8001b42 <HAL_GPIO_Init+0x22a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a52      	ldr	r2, [pc, #328]	@ (8001c5c <HAL_GPIO_Init+0x344>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <HAL_GPIO_Init+0x226>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a51      	ldr	r2, [pc, #324]	@ (8001c60 <HAL_GPIO_Init+0x348>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00d      	beq.n	8001b3a <HAL_GPIO_Init+0x222>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a50      	ldr	r2, [pc, #320]	@ (8001c64 <HAL_GPIO_Init+0x34c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d007      	beq.n	8001b36 <HAL_GPIO_Init+0x21e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4f      	ldr	r2, [pc, #316]	@ (8001c68 <HAL_GPIO_Init+0x350>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d101      	bne.n	8001b32 <HAL_GPIO_Init+0x21a>
 8001b2e:	2309      	movs	r3, #9
 8001b30:	e012      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b32:	230a      	movs	r3, #10
 8001b34:	e010      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b36:	2308      	movs	r3, #8
 8001b38:	e00e      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	e00c      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b3e:	2306      	movs	r3, #6
 8001b40:	e00a      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b42:	2305      	movs	r3, #5
 8001b44:	e008      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b46:	2304      	movs	r3, #4
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e004      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b56:	2300      	movs	r3, #0
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	f002 0203 	and.w	r2, r2, #3
 8001b5e:	0092      	lsls	r2, r2, #2
 8001b60:	4093      	lsls	r3, r2
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b68:	4935      	ldr	r1, [pc, #212]	@ (8001c40 <HAL_GPIO_Init+0x328>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b76:	4b3d      	ldr	r3, [pc, #244]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9a:	4a34      	ldr	r2, [pc, #208]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba0:	4b32      	ldr	r3, [pc, #200]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc4:	4a29      	ldr	r2, [pc, #164]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bca:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bee:	4a1f      	ldr	r2, [pc, #124]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c18:	4a14      	ldr	r2, [pc, #80]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	f67f ae84 	bls.w	8001934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3724      	adds	r7, #36	@ 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40013800 	.word	0x40013800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40021400 	.word	0x40021400
 8001c5c:	40021800 	.word	0x40021800
 8001c60:	40021c00 	.word	0x40021c00
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40022400 	.word	0x40022400
 8001c6c:	40013c00 	.word	0x40013c00

08001c70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e001      	b.n	8001c92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
 8001cac:	4613      	mov	r3, r2
 8001cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb0:	787b      	ldrb	r3, [r7, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb6:	887a      	ldrh	r2, [r7, #2]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cbc:	e003      	b.n	8001cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cbe:	887b      	ldrh	r3, [r7, #2]
 8001cc0:	041a      	lsls	r2, r3, #16
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	619a      	str	r2, [r3, #24]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af02      	add	r7, sp, #8
 8001cd8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e101      	b.n	8001ee8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d106      	bne.n	8001d04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff f82a 	bl	8000d58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2203      	movs	r2, #3
 8001d08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d12:	d102      	bne.n	8001d1a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f001 fd4e 	bl	80037c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7c1a      	ldrb	r2, [r3, #16]
 8001d2c:	f88d 2000 	strb.w	r2, [sp]
 8001d30:	3304      	adds	r3, #4
 8001d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d34:	f001 fce0 	bl	80036f8 <USB_CoreInit>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2202      	movs	r2, #2
 8001d42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0ce      	b.n	8001ee8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f001 fd46 	bl	80037e2 <USB_SetCurrentMode>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0bf      	b.n	8001ee8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e04a      	b.n	8001e04 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3315      	adds	r3, #21
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	3314      	adds	r3, #20
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	b298      	uxth	r0, r3
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	332e      	adds	r3, #46	@ 0x2e
 8001daa:	4602      	mov	r2, r0
 8001dac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	3318      	adds	r3, #24
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4413      	add	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	331c      	adds	r3, #28
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	3320      	adds	r3, #32
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	3324      	adds	r3, #36	@ 0x24
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	3301      	adds	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	791b      	ldrb	r3, [r3, #4]
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d3af      	bcc.n	8001d6e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	e044      	b.n	8001e9e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e82:	7bfa      	ldrb	r2, [r7, #15]
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	73fb      	strb	r3, [r7, #15]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	791b      	ldrb	r3, [r3, #4]
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d3b5      	bcc.n	8001e14 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7c1a      	ldrb	r2, [r3, #16]
 8001eb0:	f88d 2000 	strb.w	r2, [sp]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb8:	f001 fce0 	bl	800387c <USB_DevInit>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00c      	b.n	8001ee8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 fea8 	bl	8003c36 <USB_DevDisconnect>

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e267      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d075      	beq.n	8001ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f0e:	4b88      	ldr	r3, [pc, #544]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d00c      	beq.n	8001f34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1a:	4b85      	ldr	r3, [pc, #532]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d112      	bne.n	8001f4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f26:	4b82      	ldr	r3, [pc, #520]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f32:	d10b      	bne.n	8001f4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	4b7e      	ldr	r3, [pc, #504]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d05b      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x108>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d157      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e242      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f54:	d106      	bne.n	8001f64 <HAL_RCC_OscConfig+0x74>
 8001f56:	4b76      	ldr	r3, [pc, #472]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a75      	ldr	r2, [pc, #468]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e01d      	b.n	8001fa0 <HAL_RCC_OscConfig+0xb0>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x98>
 8001f6e:	4b70      	ldr	r3, [pc, #448]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a6f      	ldr	r2, [pc, #444]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a6c      	ldr	r2, [pc, #432]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e00b      	b.n	8001fa0 <HAL_RCC_OscConfig+0xb0>
 8001f88:	4b69      	ldr	r3, [pc, #420]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a68      	ldr	r2, [pc, #416]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b66      	ldr	r3, [pc, #408]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a65      	ldr	r2, [pc, #404]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d013      	beq.n	8001fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff f87c 	bl	80010a4 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f878 	bl	80010a4 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	@ 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e207      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xc0>
 8001fce:	e014      	b.n	8001ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff f868 	bl	80010a4 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7ff f864 	bl	80010a4 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	@ 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e1f3      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fea:	4b51      	ldr	r3, [pc, #324]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0xe8>
 8001ff6:	e000      	b.n	8001ffa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d063      	beq.n	80020ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002006:	4b4a      	ldr	r3, [pc, #296]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00b      	beq.n	800202a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002012:	4b47      	ldr	r3, [pc, #284]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800201a:	2b08      	cmp	r3, #8
 800201c:	d11c      	bne.n	8002058 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800201e:	4b44      	ldr	r3, [pc, #272]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d116      	bne.n	8002058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202a:	4b41      	ldr	r3, [pc, #260]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_RCC_OscConfig+0x152>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d001      	beq.n	8002042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e1c7      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002042:	4b3b      	ldr	r3, [pc, #236]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4937      	ldr	r1, [pc, #220]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002056:	e03a      	b.n	80020ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d020      	beq.n	80020a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002060:	4b34      	ldr	r3, [pc, #208]	@ (8002134 <HAL_RCC_OscConfig+0x244>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002066:	f7ff f81d 	bl	80010a4 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800206e:	f7ff f819 	bl	80010a4 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e1a8      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002080:	4b2b      	ldr	r3, [pc, #172]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208c:	4b28      	ldr	r3, [pc, #160]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4925      	ldr	r1, [pc, #148]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 800209c:	4313      	orrs	r3, r2
 800209e:	600b      	str	r3, [r1, #0]
 80020a0:	e015      	b.n	80020ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a2:	4b24      	ldr	r3, [pc, #144]	@ (8002134 <HAL_RCC_OscConfig+0x244>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7fe fffc 	bl	80010a4 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b0:	f7fe fff8 	bl	80010a4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e187      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d036      	beq.n	8002148 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d016      	beq.n	8002110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e2:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <HAL_RCC_OscConfig+0x248>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e8:	f7fe ffdc 	bl	80010a4 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f0:	f7fe ffd8 	bl	80010a4 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e167      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002102:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <HAL_RCC_OscConfig+0x240>)
 8002104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x200>
 800210e:	e01b      	b.n	8002148 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002110:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <HAL_RCC_OscConfig+0x248>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002116:	f7fe ffc5 	bl	80010a4 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211c:	e00e      	b.n	800213c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800211e:	f7fe ffc1 	bl	80010a4 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d907      	bls.n	800213c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e150      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
 8002130:	40023800 	.word	0x40023800
 8002134:	42470000 	.word	0x42470000
 8002138:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800213c:	4b88      	ldr	r3, [pc, #544]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 800213e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1ea      	bne.n	800211e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 8097 	beq.w	8002284 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215a:	4b81      	ldr	r3, [pc, #516]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10f      	bne.n	8002186 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	4b7d      	ldr	r3, [pc, #500]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	4a7c      	ldr	r2, [pc, #496]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002174:	6413      	str	r3, [r2, #64]	@ 0x40
 8002176:	4b7a      	ldr	r3, [pc, #488]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002182:	2301      	movs	r3, #1
 8002184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002186:	4b77      	ldr	r3, [pc, #476]	@ (8002364 <HAL_RCC_OscConfig+0x474>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d118      	bne.n	80021c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002192:	4b74      	ldr	r3, [pc, #464]	@ (8002364 <HAL_RCC_OscConfig+0x474>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a73      	ldr	r2, [pc, #460]	@ (8002364 <HAL_RCC_OscConfig+0x474>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219e:	f7fe ff81 	bl	80010a4 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a6:	f7fe ff7d 	bl	80010a4 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e10c      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002364 <HAL_RCC_OscConfig+0x474>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x2ea>
 80021cc:	4b64      	ldr	r3, [pc, #400]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d0:	4a63      	ldr	r2, [pc, #396]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d8:	e01c      	b.n	8002214 <HAL_RCC_OscConfig+0x324>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b05      	cmp	r3, #5
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0x30c>
 80021e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021fa:	e00b      	b.n	8002214 <HAL_RCC_OscConfig+0x324>
 80021fc:	4b58      	ldr	r3, [pc, #352]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002200:	4a57      	ldr	r2, [pc, #348]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 8002202:	f023 0301 	bic.w	r3, r3, #1
 8002206:	6713      	str	r3, [r2, #112]	@ 0x70
 8002208:	4b55      	ldr	r3, [pc, #340]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220c:	4a54      	ldr	r2, [pc, #336]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 800220e:	f023 0304 	bic.w	r3, r3, #4
 8002212:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d015      	beq.n	8002248 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221c:	f7fe ff42 	bl	80010a4 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002222:	e00a      	b.n	800223a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002224:	f7fe ff3e 	bl	80010a4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e0cb      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223a:	4b49      	ldr	r3, [pc, #292]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0ee      	beq.n	8002224 <HAL_RCC_OscConfig+0x334>
 8002246:	e014      	b.n	8002272 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002248:	f7fe ff2c 	bl	80010a4 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224e:	e00a      	b.n	8002266 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002250:	f7fe ff28 	bl	80010a4 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e0b5      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002266:	4b3e      	ldr	r3, [pc, #248]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1ee      	bne.n	8002250 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002272:	7dfb      	ldrb	r3, [r7, #23]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d105      	bne.n	8002284 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002278:	4b39      	ldr	r3, [pc, #228]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	4a38      	ldr	r2, [pc, #224]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 800227e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002282:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80a1 	beq.w	80023d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800228e:	4b34      	ldr	r3, [pc, #208]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b08      	cmp	r3, #8
 8002298:	d05c      	beq.n	8002354 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d141      	bne.n	8002326 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a2:	4b31      	ldr	r3, [pc, #196]	@ (8002368 <HAL_RCC_OscConfig+0x478>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7fe fefc 	bl	80010a4 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b0:	f7fe fef8 	bl	80010a4 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e087      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c2:	4b27      	ldr	r3, [pc, #156]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69da      	ldr	r2, [r3, #28]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022dc:	019b      	lsls	r3, r3, #6
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e4:	085b      	lsrs	r3, r3, #1
 80022e6:	3b01      	subs	r3, #1
 80022e8:	041b      	lsls	r3, r3, #16
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f0:	061b      	lsls	r3, r3, #24
 80022f2:	491b      	ldr	r1, [pc, #108]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002368 <HAL_RCC_OscConfig+0x478>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7fe fed1 	bl	80010a4 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002306:	f7fe fecd 	bl	80010a4 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e05c      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x416>
 8002324:	e054      	b.n	80023d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	4b10      	ldr	r3, [pc, #64]	@ (8002368 <HAL_RCC_OscConfig+0x478>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe feba 	bl	80010a4 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002334:	f7fe feb6 	bl	80010a4 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e045      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002346:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_RCC_OscConfig+0x470>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x444>
 8002352:	e03d      	b.n	80023d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d107      	bne.n	800236c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e038      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
 8002360:	40023800 	.word	0x40023800
 8002364:	40007000 	.word	0x40007000
 8002368:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800236c:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <HAL_RCC_OscConfig+0x4ec>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d028      	beq.n	80023cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002384:	429a      	cmp	r2, r3
 8002386:	d121      	bne.n	80023cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002392:	429a      	cmp	r2, r3
 8002394:	d11a      	bne.n	80023cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800239c:	4013      	ands	r3, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d111      	bne.n	80023cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b2:	085b      	lsrs	r3, r3, #1
 80023b4:	3b01      	subs	r3, #1
 80023b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d107      	bne.n	80023cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800

080023e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0cc      	b.n	800258e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f4:	4b68      	ldr	r3, [pc, #416]	@ (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d90c      	bls.n	800241c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b65      	ldr	r3, [pc, #404]	@ (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b63      	ldr	r3, [pc, #396]	@ (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0b8      	b.n	800258e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d020      	beq.n	800246a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002434:	4b59      	ldr	r3, [pc, #356]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4a58      	ldr	r2, [pc, #352]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800243e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800244c:	4b53      	ldr	r3, [pc, #332]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4a52      	ldr	r2, [pc, #328]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002458:	4b50      	ldr	r3, [pc, #320]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	494d      	ldr	r1, [pc, #308]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	4313      	orrs	r3, r2
 8002468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d044      	beq.n	8002500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	4b47      	ldr	r3, [pc, #284]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d119      	bne.n	80024be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e07f      	b.n	800258e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d003      	beq.n	800249e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249a:	2b03      	cmp	r3, #3
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249e:	4b3f      	ldr	r3, [pc, #252]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e06f      	b.n	800258e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ae:	4b3b      	ldr	r3, [pc, #236]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e067      	b.n	800258e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024be:	4b37      	ldr	r3, [pc, #220]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f023 0203 	bic.w	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4934      	ldr	r1, [pc, #208]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d0:	f7fe fde8 	bl	80010a4 <HAL_GetTick>
 80024d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d8:	f7fe fde4 	bl	80010a4 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e04f      	b.n	800258e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	4b2b      	ldr	r3, [pc, #172]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 020c 	and.w	r2, r3, #12
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1eb      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002500:	4b25      	ldr	r3, [pc, #148]	@ (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d20c      	bcs.n	8002528 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b22      	ldr	r3, [pc, #136]	@ (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	4b20      	ldr	r3, [pc, #128]	@ (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e032      	b.n	800258e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002534:	4b19      	ldr	r3, [pc, #100]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4916      	ldr	r1, [pc, #88]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002552:	4b12      	ldr	r3, [pc, #72]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	490e      	ldr	r1, [pc, #56]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002566:	f000 f821 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 800256a:	4602      	mov	r2, r0
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	490a      	ldr	r1, [pc, #40]	@ (80025a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	5ccb      	ldrb	r3, [r1, r3]
 800257a:	fa22 f303 	lsr.w	r3, r2, r3
 800257e:	4a09      	ldr	r2, [pc, #36]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002582:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fc40 	bl	8000e0c <HAL_InitTick>

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40023c00 	.word	0x40023c00
 800259c:	40023800 	.word	0x40023800
 80025a0:	08006b58 	.word	0x08006b58
 80025a4:	20000000 	.word	0x20000000
 80025a8:	20000004 	.word	0x20000004

080025ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025b0:	b094      	sub	sp, #80	@ 0x50
 80025b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80025b8:	2300      	movs	r3, #0
 80025ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025bc:	2300      	movs	r3, #0
 80025be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025c4:	4b79      	ldr	r3, [pc, #484]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x200>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 030c 	and.w	r3, r3, #12
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d00d      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x40>
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	f200 80e1 	bhi.w	8002798 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x34>
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d003      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025de:	e0db      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025e0:	4b73      	ldr	r3, [pc, #460]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80025e2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80025e4:	e0db      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025e6:	4b73      	ldr	r3, [pc, #460]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80025e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025ea:	e0d8      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ec:	4b6f      	ldr	r3, [pc, #444]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x200>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025f6:	4b6d      	ldr	r3, [pc, #436]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x200>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d063      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002602:	4b6a      	ldr	r3, [pc, #424]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	099b      	lsrs	r3, r3, #6
 8002608:	2200      	movs	r2, #0
 800260a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800260c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800260e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002614:	633b      	str	r3, [r7, #48]	@ 0x30
 8002616:	2300      	movs	r3, #0
 8002618:	637b      	str	r3, [r7, #52]	@ 0x34
 800261a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800261e:	4622      	mov	r2, r4
 8002620:	462b      	mov	r3, r5
 8002622:	f04f 0000 	mov.w	r0, #0
 8002626:	f04f 0100 	mov.w	r1, #0
 800262a:	0159      	lsls	r1, r3, #5
 800262c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002630:	0150      	lsls	r0, r2, #5
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4621      	mov	r1, r4
 8002638:	1a51      	subs	r1, r2, r1
 800263a:	6139      	str	r1, [r7, #16]
 800263c:	4629      	mov	r1, r5
 800263e:	eb63 0301 	sbc.w	r3, r3, r1
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002650:	4659      	mov	r1, fp
 8002652:	018b      	lsls	r3, r1, #6
 8002654:	4651      	mov	r1, sl
 8002656:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800265a:	4651      	mov	r1, sl
 800265c:	018a      	lsls	r2, r1, #6
 800265e:	4651      	mov	r1, sl
 8002660:	ebb2 0801 	subs.w	r8, r2, r1
 8002664:	4659      	mov	r1, fp
 8002666:	eb63 0901 	sbc.w	r9, r3, r1
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800267a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800267e:	4690      	mov	r8, r2
 8002680:	4699      	mov	r9, r3
 8002682:	4623      	mov	r3, r4
 8002684:	eb18 0303 	adds.w	r3, r8, r3
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	462b      	mov	r3, r5
 800268c:	eb49 0303 	adc.w	r3, r9, r3
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800269e:	4629      	mov	r1, r5
 80026a0:	024b      	lsls	r3, r1, #9
 80026a2:	4621      	mov	r1, r4
 80026a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026a8:	4621      	mov	r1, r4
 80026aa:	024a      	lsls	r2, r1, #9
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026b2:	2200      	movs	r2, #0
 80026b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026bc:	f7fd fdf0 	bl	80002a0 <__aeabi_uldivmod>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4613      	mov	r3, r2
 80026c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026c8:	e058      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ca:	4b38      	ldr	r3, [pc, #224]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x200>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	099b      	lsrs	r3, r3, #6
 80026d0:	2200      	movs	r2, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	4611      	mov	r1, r2
 80026d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026da:	623b      	str	r3, [r7, #32]
 80026dc:	2300      	movs	r3, #0
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026e4:	4642      	mov	r2, r8
 80026e6:	464b      	mov	r3, r9
 80026e8:	f04f 0000 	mov.w	r0, #0
 80026ec:	f04f 0100 	mov.w	r1, #0
 80026f0:	0159      	lsls	r1, r3, #5
 80026f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f6:	0150      	lsls	r0, r2, #5
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4641      	mov	r1, r8
 80026fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002702:	4649      	mov	r1, r9
 8002704:	eb63 0b01 	sbc.w	fp, r3, r1
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002714:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002718:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800271c:	ebb2 040a 	subs.w	r4, r2, sl
 8002720:	eb63 050b 	sbc.w	r5, r3, fp
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	00eb      	lsls	r3, r5, #3
 800272e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002732:	00e2      	lsls	r2, r4, #3
 8002734:	4614      	mov	r4, r2
 8002736:	461d      	mov	r5, r3
 8002738:	4643      	mov	r3, r8
 800273a:	18e3      	adds	r3, r4, r3
 800273c:	603b      	str	r3, [r7, #0]
 800273e:	464b      	mov	r3, r9
 8002740:	eb45 0303 	adc.w	r3, r5, r3
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002752:	4629      	mov	r1, r5
 8002754:	028b      	lsls	r3, r1, #10
 8002756:	4621      	mov	r1, r4
 8002758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800275c:	4621      	mov	r1, r4
 800275e:	028a      	lsls	r2, r1, #10
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002766:	2200      	movs	r2, #0
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	61fa      	str	r2, [r7, #28]
 800276c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002770:	f7fd fd96 	bl	80002a0 <__aeabi_uldivmod>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4613      	mov	r3, r2
 800277a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800277c:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x200>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	3301      	adds	r3, #1
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800278c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800278e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002796:	e002      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800279a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800279c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3750      	adds	r7, #80	@ 0x50
 80027a4:	46bd      	mov	sp, r7
 80027a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	00f42400 	.word	0x00f42400
 80027b4:	007a1200 	.word	0x007a1200

080027b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027bc:	4b03      	ldr	r3, [pc, #12]	@ (80027cc <HAL_RCC_GetHCLKFreq+0x14>)
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000000 	.word	0x20000000

080027d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027d4:	f7ff fff0 	bl	80027b8 <HAL_RCC_GetHCLKFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	0a9b      	lsrs	r3, r3, #10
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	4903      	ldr	r1, [pc, #12]	@ (80027f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40023800 	.word	0x40023800
 80027f4:	08006b68 	.word	0x08006b68

080027f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027fc:	f7ff ffdc 	bl	80027b8 <HAL_RCC_GetHCLKFreq>
 8002800:	4602      	mov	r2, r0
 8002802:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	0b5b      	lsrs	r3, r3, #13
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	4903      	ldr	r1, [pc, #12]	@ (800281c <HAL_RCC_GetPCLK2Freq+0x24>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40023800 	.word	0x40023800
 800281c:	08006b68 	.word	0x08006b68

08002820 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	220f      	movs	r2, #15
 800282e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002830:	4b12      	ldr	r3, [pc, #72]	@ (800287c <HAL_RCC_GetClockConfig+0x5c>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 0203 	and.w	r2, r3, #3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800283c:	4b0f      	ldr	r3, [pc, #60]	@ (800287c <HAL_RCC_GetClockConfig+0x5c>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002848:	4b0c      	ldr	r3, [pc, #48]	@ (800287c <HAL_RCC_GetClockConfig+0x5c>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002854:	4b09      	ldr	r3, [pc, #36]	@ (800287c <HAL_RCC_GetClockConfig+0x5c>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	08db      	lsrs	r3, r3, #3
 800285a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002862:	4b07      	ldr	r3, [pc, #28]	@ (8002880 <HAL_RCC_GetClockConfig+0x60>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 020f 	and.w	r2, r3, #15
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	601a      	str	r2, [r3, #0]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40023c00 	.word	0x40023c00

08002884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e041      	b.n	800291a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe f9e6 	bl	8000c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	4619      	mov	r1, r3
 80028c2:	4610      	mov	r0, r2
 80028c4:	f000 fa7e 	bl	8002dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d001      	beq.n	800293c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e04e      	b.n	80029da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a23      	ldr	r2, [pc, #140]	@ (80029e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d022      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x80>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002966:	d01d      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x80>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1f      	ldr	r2, [pc, #124]	@ (80029ec <HAL_TIM_Base_Start_IT+0xc8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d018      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x80>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1e      	ldr	r2, [pc, #120]	@ (80029f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d013      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x80>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1c      	ldr	r2, [pc, #112]	@ (80029f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00e      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x80>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1b      	ldr	r2, [pc, #108]	@ (80029f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d009      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x80>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a19      	ldr	r2, [pc, #100]	@ (80029fc <HAL_TIM_Base_Start_IT+0xd8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d004      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x80>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a18      	ldr	r2, [pc, #96]	@ (8002a00 <HAL_TIM_Base_Start_IT+0xdc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d111      	bne.n	80029c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d010      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 0201 	orr.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c6:	e007      	b.n	80029d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40010000 	.word	0x40010000
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40000800 	.word	0x40000800
 80029f4:	40000c00 	.word	0x40000c00
 80029f8:	40010400 	.word	0x40010400
 80029fc:	40014000 	.word	0x40014000
 8002a00:	40001800 	.word	0x40001800

08002a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d020      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01b      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0202 	mvn.w	r2, #2
 8002a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f999 	bl	8002d86 <HAL_TIM_IC_CaptureCallback>
 8002a54:	e005      	b.n	8002a62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f98b 	bl	8002d72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f99c 	bl	8002d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d020      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01b      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0204 	mvn.w	r2, #4
 8002a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f973 	bl	8002d86 <HAL_TIM_IC_CaptureCallback>
 8002aa0:	e005      	b.n	8002aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f965 	bl	8002d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f976 	bl	8002d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d020      	beq.n	8002b00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d01b      	beq.n	8002b00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0208 	mvn.w	r2, #8
 8002ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f94d 	bl	8002d86 <HAL_TIM_IC_CaptureCallback>
 8002aec:	e005      	b.n	8002afa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f93f 	bl	8002d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f950 	bl	8002d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d020      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01b      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0210 	mvn.w	r2, #16
 8002b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2208      	movs	r2, #8
 8002b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f927 	bl	8002d86 <HAL_TIM_IC_CaptureCallback>
 8002b38:	e005      	b.n	8002b46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f919 	bl	8002d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f92a 	bl	8002d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00c      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0201 	mvn.w	r2, #1
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fd ff70 	bl	8000a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00c      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fae4 	bl	800315c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00c      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f8fb 	bl	8002dae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00c      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0220 	mvn.w	r2, #32
 8002bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fab6 	bl	8003148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_TIM_ConfigClockSource+0x1c>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e0b4      	b.n	8002d6a <HAL_TIM_ConfigClockSource+0x186>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c38:	d03e      	beq.n	8002cb8 <HAL_TIM_ConfigClockSource+0xd4>
 8002c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c3e:	f200 8087 	bhi.w	8002d50 <HAL_TIM_ConfigClockSource+0x16c>
 8002c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c46:	f000 8086 	beq.w	8002d56 <HAL_TIM_ConfigClockSource+0x172>
 8002c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c4e:	d87f      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0x16c>
 8002c50:	2b70      	cmp	r3, #112	@ 0x70
 8002c52:	d01a      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0xa6>
 8002c54:	2b70      	cmp	r3, #112	@ 0x70
 8002c56:	d87b      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0x16c>
 8002c58:	2b60      	cmp	r3, #96	@ 0x60
 8002c5a:	d050      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x11a>
 8002c5c:	2b60      	cmp	r3, #96	@ 0x60
 8002c5e:	d877      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b50      	cmp	r3, #80	@ 0x50
 8002c62:	d03c      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0xfa>
 8002c64:	2b50      	cmp	r3, #80	@ 0x50
 8002c66:	d873      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0x16c>
 8002c68:	2b40      	cmp	r3, #64	@ 0x40
 8002c6a:	d058      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x13a>
 8002c6c:	2b40      	cmp	r3, #64	@ 0x40
 8002c6e:	d86f      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0x16c>
 8002c70:	2b30      	cmp	r3, #48	@ 0x30
 8002c72:	d064      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0x15a>
 8002c74:	2b30      	cmp	r3, #48	@ 0x30
 8002c76:	d86b      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0x16c>
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d060      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0x15a>
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d867      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0x16c>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d05c      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0x15a>
 8002c84:	2b10      	cmp	r3, #16
 8002c86:	d05a      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0x15a>
 8002c88:	e062      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c9a:	f000 f9b9 	bl	8003010 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002cac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	609a      	str	r2, [r3, #8]
      break;
 8002cb6:	e04f      	b.n	8002d58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cc8:	f000 f9a2 	bl	8003010 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cda:	609a      	str	r2, [r3, #8]
      break;
 8002cdc:	e03c      	b.n	8002d58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cea:	461a      	mov	r2, r3
 8002cec:	f000 f916 	bl	8002f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2150      	movs	r1, #80	@ 0x50
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f96f 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002cfc:	e02c      	b.n	8002d58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f000 f935 	bl	8002f7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2160      	movs	r1, #96	@ 0x60
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f95f 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002d1c:	e01c      	b.n	8002d58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f000 f8f6 	bl	8002f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2140      	movs	r1, #64	@ 0x40
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 f94f 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002d3c:	e00c      	b.n	8002d58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4619      	mov	r1, r3
 8002d48:	4610      	mov	r0, r2
 8002d4a:	f000 f946 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002d4e:	e003      	b.n	8002d58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
      break;
 8002d54:	e000      	b.n	8002d58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a46      	ldr	r2, [pc, #280]	@ (8002ef0 <TIM_Base_SetConfig+0x12c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d013      	beq.n	8002e04 <TIM_Base_SetConfig+0x40>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002de2:	d00f      	beq.n	8002e04 <TIM_Base_SetConfig+0x40>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a43      	ldr	r2, [pc, #268]	@ (8002ef4 <TIM_Base_SetConfig+0x130>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00b      	beq.n	8002e04 <TIM_Base_SetConfig+0x40>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a42      	ldr	r2, [pc, #264]	@ (8002ef8 <TIM_Base_SetConfig+0x134>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d007      	beq.n	8002e04 <TIM_Base_SetConfig+0x40>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a41      	ldr	r2, [pc, #260]	@ (8002efc <TIM_Base_SetConfig+0x138>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d003      	beq.n	8002e04 <TIM_Base_SetConfig+0x40>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a40      	ldr	r2, [pc, #256]	@ (8002f00 <TIM_Base_SetConfig+0x13c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d108      	bne.n	8002e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a35      	ldr	r2, [pc, #212]	@ (8002ef0 <TIM_Base_SetConfig+0x12c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d02b      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e24:	d027      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a32      	ldr	r2, [pc, #200]	@ (8002ef4 <TIM_Base_SetConfig+0x130>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d023      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a31      	ldr	r2, [pc, #196]	@ (8002ef8 <TIM_Base_SetConfig+0x134>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01f      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a30      	ldr	r2, [pc, #192]	@ (8002efc <TIM_Base_SetConfig+0x138>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d01b      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a2f      	ldr	r2, [pc, #188]	@ (8002f00 <TIM_Base_SetConfig+0x13c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d017      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a2e      	ldr	r2, [pc, #184]	@ (8002f04 <TIM_Base_SetConfig+0x140>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d013      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a2d      	ldr	r2, [pc, #180]	@ (8002f08 <TIM_Base_SetConfig+0x144>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00f      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a2c      	ldr	r2, [pc, #176]	@ (8002f0c <TIM_Base_SetConfig+0x148>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00b      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a2b      	ldr	r2, [pc, #172]	@ (8002f10 <TIM_Base_SetConfig+0x14c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a2a      	ldr	r2, [pc, #168]	@ (8002f14 <TIM_Base_SetConfig+0x150>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d003      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a29      	ldr	r2, [pc, #164]	@ (8002f18 <TIM_Base_SetConfig+0x154>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d108      	bne.n	8002e88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a10      	ldr	r2, [pc, #64]	@ (8002ef0 <TIM_Base_SetConfig+0x12c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d003      	beq.n	8002ebc <TIM_Base_SetConfig+0xf8>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a12      	ldr	r2, [pc, #72]	@ (8002f00 <TIM_Base_SetConfig+0x13c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d103      	bne.n	8002ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d105      	bne.n	8002ee2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f023 0201 	bic.w	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	611a      	str	r2, [r3, #16]
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40010000 	.word	0x40010000
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	40000800 	.word	0x40000800
 8002efc:	40000c00 	.word	0x40000c00
 8002f00:	40010400 	.word	0x40010400
 8002f04:	40014000 	.word	0x40014000
 8002f08:	40014400 	.word	0x40014400
 8002f0c:	40014800 	.word	0x40014800
 8002f10:	40001800 	.word	0x40001800
 8002f14:	40001c00 	.word	0x40001c00
 8002f18:	40002000 	.word	0x40002000

08002f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f023 0201 	bic.w	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f023 030a 	bic.w	r3, r3, #10
 8002f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	621a      	str	r2, [r3, #32]
}
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b087      	sub	sp, #28
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f023 0210 	bic.w	r2, r3, #16
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002fa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	031b      	lsls	r3, r3, #12
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	621a      	str	r2, [r3, #32]
}
 8002fce:	bf00      	nop
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f043 0307 	orr.w	r3, r3, #7
 8002ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	609a      	str	r2, [r3, #8]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800302a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	021a      	lsls	r2, r3, #8
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	431a      	orrs	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4313      	orrs	r3, r2
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	609a      	str	r2, [r3, #8]
}
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003064:	2302      	movs	r3, #2
 8003066:	e05a      	b.n	800311e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800308e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a21      	ldr	r2, [pc, #132]	@ (800312c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d022      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030b4:	d01d      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003130 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d018      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003134 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003138 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00e      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a18      	ldr	r2, [pc, #96]	@ (800313c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d009      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a17      	ldr	r2, [pc, #92]	@ (8003140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a15      	ldr	r2, [pc, #84]	@ (8003144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10c      	bne.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	4313      	orrs	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40010000 	.word	0x40010000
 8003130:	40000400 	.word	0x40000400
 8003134:	40000800 	.word	0x40000800
 8003138:	40000c00 	.word	0x40000c00
 800313c:	40010400 	.word	0x40010400
 8003140:	40014000 	.word	0x40014000
 8003144:	40001800 	.word	0x40001800

08003148 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e042      	b.n	8003208 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fd fd96 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2224      	movs	r2, #36	@ 0x24
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f82b 	bl	8003210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695a      	ldr	r2, [r3, #20]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003214:	b0c0      	sub	sp, #256	@ 0x100
 8003216:	af00      	add	r7, sp, #0
 8003218:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800321c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322c:	68d9      	ldr	r1, [r3, #12]
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	ea40 0301 	orr.w	r3, r0, r1
 8003238:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	431a      	orrs	r2, r3
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	431a      	orrs	r2, r3
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003268:	f021 010c 	bic.w	r1, r1, #12
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003276:	430b      	orrs	r3, r1
 8003278:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328a:	6999      	ldr	r1, [r3, #24]
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	ea40 0301 	orr.w	r3, r0, r1
 8003296:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4b8f      	ldr	r3, [pc, #572]	@ (80034dc <UART_SetConfig+0x2cc>)
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d005      	beq.n	80032b0 <UART_SetConfig+0xa0>
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b8d      	ldr	r3, [pc, #564]	@ (80034e0 <UART_SetConfig+0x2d0>)
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d104      	bne.n	80032ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032b0:	f7ff faa2 	bl	80027f8 <HAL_RCC_GetPCLK2Freq>
 80032b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80032b8:	e003      	b.n	80032c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ba:	f7ff fa89 	bl	80027d0 <HAL_RCC_GetPCLK1Freq>
 80032be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032cc:	f040 810c 	bne.w	80034e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80032de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80032e2:	4622      	mov	r2, r4
 80032e4:	462b      	mov	r3, r5
 80032e6:	1891      	adds	r1, r2, r2
 80032e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80032ea:	415b      	adcs	r3, r3
 80032ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032f2:	4621      	mov	r1, r4
 80032f4:	eb12 0801 	adds.w	r8, r2, r1
 80032f8:	4629      	mov	r1, r5
 80032fa:	eb43 0901 	adc.w	r9, r3, r1
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800330a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800330e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003312:	4690      	mov	r8, r2
 8003314:	4699      	mov	r9, r3
 8003316:	4623      	mov	r3, r4
 8003318:	eb18 0303 	adds.w	r3, r8, r3
 800331c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003320:	462b      	mov	r3, r5
 8003322:	eb49 0303 	adc.w	r3, r9, r3
 8003326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800332a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003336:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800333a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800333e:	460b      	mov	r3, r1
 8003340:	18db      	adds	r3, r3, r3
 8003342:	653b      	str	r3, [r7, #80]	@ 0x50
 8003344:	4613      	mov	r3, r2
 8003346:	eb42 0303 	adc.w	r3, r2, r3
 800334a:	657b      	str	r3, [r7, #84]	@ 0x54
 800334c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003350:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003354:	f7fc ffa4 	bl	80002a0 <__aeabi_uldivmod>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4b61      	ldr	r3, [pc, #388]	@ (80034e4 <UART_SetConfig+0x2d4>)
 800335e:	fba3 2302 	umull	r2, r3, r3, r2
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	011c      	lsls	r4, r3, #4
 8003366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800336a:	2200      	movs	r2, #0
 800336c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003370:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003374:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003378:	4642      	mov	r2, r8
 800337a:	464b      	mov	r3, r9
 800337c:	1891      	adds	r1, r2, r2
 800337e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003380:	415b      	adcs	r3, r3
 8003382:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003384:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003388:	4641      	mov	r1, r8
 800338a:	eb12 0a01 	adds.w	sl, r2, r1
 800338e:	4649      	mov	r1, r9
 8003390:	eb43 0b01 	adc.w	fp, r3, r1
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033a8:	4692      	mov	sl, r2
 80033aa:	469b      	mov	fp, r3
 80033ac:	4643      	mov	r3, r8
 80033ae:	eb1a 0303 	adds.w	r3, sl, r3
 80033b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033b6:	464b      	mov	r3, r9
 80033b8:	eb4b 0303 	adc.w	r3, fp, r3
 80033bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80033d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80033d4:	460b      	mov	r3, r1
 80033d6:	18db      	adds	r3, r3, r3
 80033d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80033da:	4613      	mov	r3, r2
 80033dc:	eb42 0303 	adc.w	r3, r2, r3
 80033e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80033e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80033e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80033ea:	f7fc ff59 	bl	80002a0 <__aeabi_uldivmod>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	4b3b      	ldr	r3, [pc, #236]	@ (80034e4 <UART_SetConfig+0x2d4>)
 80033f6:	fba3 2301 	umull	r2, r3, r3, r1
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	2264      	movs	r2, #100	@ 0x64
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	1acb      	subs	r3, r1, r3
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800340a:	4b36      	ldr	r3, [pc, #216]	@ (80034e4 <UART_SetConfig+0x2d4>)
 800340c:	fba3 2302 	umull	r2, r3, r3, r2
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003418:	441c      	add	r4, r3
 800341a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800341e:	2200      	movs	r2, #0
 8003420:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003424:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003428:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800342c:	4642      	mov	r2, r8
 800342e:	464b      	mov	r3, r9
 8003430:	1891      	adds	r1, r2, r2
 8003432:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003434:	415b      	adcs	r3, r3
 8003436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800343c:	4641      	mov	r1, r8
 800343e:	1851      	adds	r1, r2, r1
 8003440:	6339      	str	r1, [r7, #48]	@ 0x30
 8003442:	4649      	mov	r1, r9
 8003444:	414b      	adcs	r3, r1
 8003446:	637b      	str	r3, [r7, #52]	@ 0x34
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003454:	4659      	mov	r1, fp
 8003456:	00cb      	lsls	r3, r1, #3
 8003458:	4651      	mov	r1, sl
 800345a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800345e:	4651      	mov	r1, sl
 8003460:	00ca      	lsls	r2, r1, #3
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	4603      	mov	r3, r0
 8003468:	4642      	mov	r2, r8
 800346a:	189b      	adds	r3, r3, r2
 800346c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003470:	464b      	mov	r3, r9
 8003472:	460a      	mov	r2, r1
 8003474:	eb42 0303 	adc.w	r3, r2, r3
 8003478:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003488:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800348c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003490:	460b      	mov	r3, r1
 8003492:	18db      	adds	r3, r3, r3
 8003494:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003496:	4613      	mov	r3, r2
 8003498:	eb42 0303 	adc.w	r3, r2, r3
 800349c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800349e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80034a6:	f7fc fefb 	bl	80002a0 <__aeabi_uldivmod>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4b0d      	ldr	r3, [pc, #52]	@ (80034e4 <UART_SetConfig+0x2d4>)
 80034b0:	fba3 1302 	umull	r1, r3, r3, r2
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	2164      	movs	r1, #100	@ 0x64
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	3332      	adds	r3, #50	@ 0x32
 80034c2:	4a08      	ldr	r2, [pc, #32]	@ (80034e4 <UART_SetConfig+0x2d4>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	f003 0207 	and.w	r2, r3, #7
 80034ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4422      	add	r2, r4
 80034d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034d8:	e106      	b.n	80036e8 <UART_SetConfig+0x4d8>
 80034da:	bf00      	nop
 80034dc:	40011000 	.word	0x40011000
 80034e0:	40011400 	.word	0x40011400
 80034e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ec:	2200      	movs	r2, #0
 80034ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80034f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80034fa:	4642      	mov	r2, r8
 80034fc:	464b      	mov	r3, r9
 80034fe:	1891      	adds	r1, r2, r2
 8003500:	6239      	str	r1, [r7, #32]
 8003502:	415b      	adcs	r3, r3
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
 8003506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800350a:	4641      	mov	r1, r8
 800350c:	1854      	adds	r4, r2, r1
 800350e:	4649      	mov	r1, r9
 8003510:	eb43 0501 	adc.w	r5, r3, r1
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	00eb      	lsls	r3, r5, #3
 800351e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003522:	00e2      	lsls	r2, r4, #3
 8003524:	4614      	mov	r4, r2
 8003526:	461d      	mov	r5, r3
 8003528:	4643      	mov	r3, r8
 800352a:	18e3      	adds	r3, r4, r3
 800352c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003530:	464b      	mov	r3, r9
 8003532:	eb45 0303 	adc.w	r3, r5, r3
 8003536:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003546:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003556:	4629      	mov	r1, r5
 8003558:	008b      	lsls	r3, r1, #2
 800355a:	4621      	mov	r1, r4
 800355c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003560:	4621      	mov	r1, r4
 8003562:	008a      	lsls	r2, r1, #2
 8003564:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003568:	f7fc fe9a 	bl	80002a0 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4b60      	ldr	r3, [pc, #384]	@ (80036f4 <UART_SetConfig+0x4e4>)
 8003572:	fba3 2302 	umull	r2, r3, r3, r2
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	011c      	lsls	r4, r3, #4
 800357a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003584:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003588:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800358c:	4642      	mov	r2, r8
 800358e:	464b      	mov	r3, r9
 8003590:	1891      	adds	r1, r2, r2
 8003592:	61b9      	str	r1, [r7, #24]
 8003594:	415b      	adcs	r3, r3
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800359c:	4641      	mov	r1, r8
 800359e:	1851      	adds	r1, r2, r1
 80035a0:	6139      	str	r1, [r7, #16]
 80035a2:	4649      	mov	r1, r9
 80035a4:	414b      	adcs	r3, r1
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035b4:	4659      	mov	r1, fp
 80035b6:	00cb      	lsls	r3, r1, #3
 80035b8:	4651      	mov	r1, sl
 80035ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035be:	4651      	mov	r1, sl
 80035c0:	00ca      	lsls	r2, r1, #3
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	4642      	mov	r2, r8
 80035ca:	189b      	adds	r3, r3, r2
 80035cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035d0:	464b      	mov	r3, r9
 80035d2:	460a      	mov	r2, r1
 80035d4:	eb42 0303 	adc.w	r3, r2, r3
 80035d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80035f4:	4649      	mov	r1, r9
 80035f6:	008b      	lsls	r3, r1, #2
 80035f8:	4641      	mov	r1, r8
 80035fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035fe:	4641      	mov	r1, r8
 8003600:	008a      	lsls	r2, r1, #2
 8003602:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003606:	f7fc fe4b 	bl	80002a0 <__aeabi_uldivmod>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4611      	mov	r1, r2
 8003610:	4b38      	ldr	r3, [pc, #224]	@ (80036f4 <UART_SetConfig+0x4e4>)
 8003612:	fba3 2301 	umull	r2, r3, r3, r1
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	2264      	movs	r2, #100	@ 0x64
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	1acb      	subs	r3, r1, r3
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	3332      	adds	r3, #50	@ 0x32
 8003624:	4a33      	ldr	r2, [pc, #204]	@ (80036f4 <UART_SetConfig+0x4e4>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003630:	441c      	add	r4, r3
 8003632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003636:	2200      	movs	r2, #0
 8003638:	673b      	str	r3, [r7, #112]	@ 0x70
 800363a:	677a      	str	r2, [r7, #116]	@ 0x74
 800363c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	1891      	adds	r1, r2, r2
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	415b      	adcs	r3, r3
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003650:	4641      	mov	r1, r8
 8003652:	1851      	adds	r1, r2, r1
 8003654:	6039      	str	r1, [r7, #0]
 8003656:	4649      	mov	r1, r9
 8003658:	414b      	adcs	r3, r1
 800365a:	607b      	str	r3, [r7, #4]
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003668:	4659      	mov	r1, fp
 800366a:	00cb      	lsls	r3, r1, #3
 800366c:	4651      	mov	r1, sl
 800366e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003672:	4651      	mov	r1, sl
 8003674:	00ca      	lsls	r2, r1, #3
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	4603      	mov	r3, r0
 800367c:	4642      	mov	r2, r8
 800367e:	189b      	adds	r3, r3, r2
 8003680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003682:	464b      	mov	r3, r9
 8003684:	460a      	mov	r2, r1
 8003686:	eb42 0303 	adc.w	r3, r2, r3
 800368a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	663b      	str	r3, [r7, #96]	@ 0x60
 8003696:	667a      	str	r2, [r7, #100]	@ 0x64
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80036a4:	4649      	mov	r1, r9
 80036a6:	008b      	lsls	r3, r1, #2
 80036a8:	4641      	mov	r1, r8
 80036aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ae:	4641      	mov	r1, r8
 80036b0:	008a      	lsls	r2, r1, #2
 80036b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80036b6:	f7fc fdf3 	bl	80002a0 <__aeabi_uldivmod>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4b0d      	ldr	r3, [pc, #52]	@ (80036f4 <UART_SetConfig+0x4e4>)
 80036c0:	fba3 1302 	umull	r1, r3, r3, r2
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	2164      	movs	r1, #100	@ 0x64
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	3332      	adds	r3, #50	@ 0x32
 80036d2:	4a08      	ldr	r2, [pc, #32]	@ (80036f4 <UART_SetConfig+0x4e4>)
 80036d4:	fba2 2303 	umull	r2, r3, r2, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	f003 020f 	and.w	r2, r3, #15
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4422      	add	r2, r4
 80036e6:	609a      	str	r2, [r3, #8]
}
 80036e8:	bf00      	nop
 80036ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80036ee:	46bd      	mov	sp, r7
 80036f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036f4:	51eb851f 	.word	0x51eb851f

080036f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036f8:	b084      	sub	sp, #16
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	f107 001c 	add.w	r0, r7, #28
 8003706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800370a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800370e:	2b01      	cmp	r3, #1
 8003710:	d123      	bne.n	800375a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003716:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003726:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800373a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800373e:	2b01      	cmp	r3, #1
 8003740:	d105      	bne.n	800374e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 faa0 	bl	8003c94 <USB_CoreReset>
 8003754:	4603      	mov	r3, r0
 8003756:	73fb      	strb	r3, [r7, #15]
 8003758:	e01b      	b.n	8003792 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa94 	bl	8003c94 <USB_CoreReset>
 800376c:	4603      	mov	r3, r0
 800376e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003770:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	639a      	str	r2, [r3, #56]	@ 0x38
 8003784:	e005      	b.n	8003792 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003792:	7fbb      	ldrb	r3, [r7, #30]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d10b      	bne.n	80037b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f043 0206 	orr.w	r2, r3, #6
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f043 0220 	orr.w	r2, r3, #32
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037bc:	b004      	add	sp, #16
 80037be:	4770      	bx	lr

080037c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f023 0201 	bic.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	460b      	mov	r3, r1
 80037ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d115      	bne.n	8003830 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003810:	200a      	movs	r0, #10
 8003812:	f7fd fc53 	bl	80010bc <HAL_Delay>
      ms += 10U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	330a      	adds	r3, #10
 800381a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fa2b 	bl	8003c78 <USB_GetMode>
 8003822:	4603      	mov	r3, r0
 8003824:	2b01      	cmp	r3, #1
 8003826:	d01e      	beq.n	8003866 <USB_SetCurrentMode+0x84>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2bc7      	cmp	r3, #199	@ 0xc7
 800382c:	d9f0      	bls.n	8003810 <USB_SetCurrentMode+0x2e>
 800382e:	e01a      	b.n	8003866 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d115      	bne.n	8003862 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003842:	200a      	movs	r0, #10
 8003844:	f7fd fc3a 	bl	80010bc <HAL_Delay>
      ms += 10U;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	330a      	adds	r3, #10
 800384c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fa12 	bl	8003c78 <USB_GetMode>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <USB_SetCurrentMode+0x84>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2bc7      	cmp	r3, #199	@ 0xc7
 800385e:	d9f0      	bls.n	8003842 <USB_SetCurrentMode+0x60>
 8003860:	e001      	b.n	8003866 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e005      	b.n	8003872 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2bc8      	cmp	r3, #200	@ 0xc8
 800386a:	d101      	bne.n	8003870 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800387c:	b084      	sub	sp, #16
 800387e:	b580      	push	{r7, lr}
 8003880:	b086      	sub	sp, #24
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800388a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	e009      	b.n	80038b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	3340      	adds	r3, #64	@ 0x40
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	2200      	movs	r2, #0
 80038a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	3301      	adds	r3, #1
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	2b0e      	cmp	r3, #14
 80038b4:	d9f2      	bls.n	800389c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d11c      	bne.n	80038f8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038cc:	f043 0302 	orr.w	r3, r3, #2
 80038d0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80038f6:	e00b      	b.n	8003910 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003908:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003916:	461a      	mov	r2, r3
 8003918:	2300      	movs	r3, #0
 800391a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800391c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003920:	2b01      	cmp	r3, #1
 8003922:	d10d      	bne.n	8003940 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003928:	2b00      	cmp	r3, #0
 800392a:	d104      	bne.n	8003936 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800392c:	2100      	movs	r1, #0
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f968 	bl	8003c04 <USB_SetDevSpeed>
 8003934:	e008      	b.n	8003948 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003936:	2101      	movs	r1, #1
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f963 	bl	8003c04 <USB_SetDevSpeed>
 800393e:	e003      	b.n	8003948 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003940:	2103      	movs	r1, #3
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f95e 	bl	8003c04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003948:	2110      	movs	r1, #16
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f8fa 	bl	8003b44 <USB_FlushTxFifo>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f924 	bl	8003ba8 <USB_FlushRxFifo>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003970:	461a      	mov	r2, r3
 8003972:	2300      	movs	r3, #0
 8003974:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800397c:	461a      	mov	r2, r3
 800397e:	2300      	movs	r3, #0
 8003980:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003988:	461a      	mov	r2, r3
 800398a:	2300      	movs	r3, #0
 800398c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	e043      	b.n	8003a1c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039aa:	d118      	bne.n	80039de <USB_DevInit+0x162>
    {
      if (i == 0U)
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039be:	461a      	mov	r2, r3
 80039c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e013      	b.n	80039f0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039d4:	461a      	mov	r2, r3
 80039d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	e008      	b.n	80039f0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ea:	461a      	mov	r2, r3
 80039ec:	2300      	movs	r3, #0
 80039ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039fc:	461a      	mov	r2, r3
 80039fe:	2300      	movs	r3, #0
 8003a00:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a20:	461a      	mov	r2, r3
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d3b5      	bcc.n	8003994 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	e043      	b.n	8003ab6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a44:	d118      	bne.n	8003a78 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	e013      	b.n	8003a8a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e008      	b.n	8003a8a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a84:	461a      	mov	r2, r3
 8003a86:	2300      	movs	r3, #0
 8003a88:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a96:	461a      	mov	r2, r3
 8003a98:	2300      	movs	r3, #0
 8003a9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003aae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003aba:	461a      	mov	r2, r3
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d3b5      	bcc.n	8003a2e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ad4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003ae2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ae4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f043 0210 	orr.w	r2, r3, #16
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	4b10      	ldr	r3, [pc, #64]	@ (8003b40 <USB_DevInit+0x2c4>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b04:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	f043 0208 	orr.w	r2, r3, #8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d107      	bne.n	8003b30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b28:	f043 0304 	orr.w	r3, r3, #4
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b3c:	b004      	add	sp, #16
 8003b3e:	4770      	bx	lr
 8003b40:	803c3800 	.word	0x803c3800

08003b44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3301      	adds	r3, #1
 8003b56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b5e:	d901      	bls.n	8003b64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e01b      	b.n	8003b9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	daf2      	bge.n	8003b52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	019b      	lsls	r3, r3, #6
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b88:	d901      	bls.n	8003b8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e006      	b.n	8003b9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d0f0      	beq.n	8003b7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bc0:	d901      	bls.n	8003bc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e018      	b.n	8003bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	daf2      	bge.n	8003bb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003be4:	d901      	bls.n	8003bea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e006      	b.n	8003bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d0f0      	beq.n	8003bd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	68f9      	ldr	r1, [r7, #12]
 8003c20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c24:	4313      	orrs	r3, r2
 8003c26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003c50:	f023 0303 	bic.w	r3, r3, #3
 8003c54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c64:	f043 0302 	orr.w	r3, r3, #2
 8003c68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	f003 0301 	and.w	r3, r3, #1
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cac:	d901      	bls.n	8003cb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e01b      	b.n	8003cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	daf2      	bge.n	8003ca0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f043 0201 	orr.w	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cd6:	d901      	bls.n	8003cdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e006      	b.n	8003cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d0f0      	beq.n	8003cca <USB_CoreReset+0x36>

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003cfa:	f000 f9c3 	bl	8004084 <vTaskStartScheduler>
  
  return osOK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f103 0208 	add.w	r2, r3, #8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f103 0208 	add.w	r2, r3, #8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f103 0208 	add.w	r2, r3, #8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b085      	sub	sp, #20
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	601a      	str	r2, [r3, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6892      	ldr	r2, [r2, #8]
 8003dbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6852      	ldr	r2, [r2, #4]
 8003dc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d103      	bne.n	8003dda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	1e5a      	subs	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b08c      	sub	sp, #48	@ 0x30
 8003dfe:	af04      	add	r7, sp, #16
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fe62 	bl	8004ad8 <pvPortMalloc>
 8003e14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00e      	beq.n	8003e3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e1c:	2064      	movs	r0, #100	@ 0x64
 8003e1e:	f000 fe5b 	bl	8004ad8 <pvPortMalloc>
 8003e22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e30:	e005      	b.n	8003e3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e32:	6978      	ldr	r0, [r7, #20]
 8003e34:	f000 ff1e 	bl	8004c74 <vPortFree>
 8003e38:	e001      	b.n	8003e3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d013      	beq.n	8003e6c <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e44:	88fa      	ldrh	r2, [r7, #6]
 8003e46:	2300      	movs	r3, #0
 8003e48:	9303      	str	r3, [sp, #12]
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	9302      	str	r3, [sp, #8]
 8003e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 f80e 	bl	8003e7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e60:	69f8      	ldr	r0, [r7, #28]
 8003e62:	f000 f8a1 	bl	8003fa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e66:	2301      	movs	r3, #1
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	e002      	b.n	8003e72 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e72:	69bb      	ldr	r3, [r7, #24]
	}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	461a      	mov	r2, r3
 8003e94:	21a5      	movs	r1, #165	@ 0xa5
 8003e96:	f001 fbd2 	bl	800563e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f023 0307 	bic.w	r3, r3, #7
 8003eb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00b      	beq.n	8003ed6 <prvInitialiseNewTask+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	e7fd      	b.n	8003ed2 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d01f      	beq.n	8003f22 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	e012      	b.n	8003f0e <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	7819      	ldrb	r1, [r3, #0]
 8003ef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3334      	adds	r3, #52	@ 0x34
 8003ef8:	460a      	mov	r2, r1
 8003efa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	4413      	add	r3, r2
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d006      	beq.n	8003f16 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	2b0f      	cmp	r3, #15
 8003f12:	d9e9      	bls.n	8003ee8 <prvInitialiseNewTask+0x6c>
 8003f14:	e000      	b.n	8003f18 <prvInitialiseNewTask+0x9c>
			{
				break;
 8003f16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f20:	e003      	b.n	8003f2a <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2c:	2b06      	cmp	r3, #6
 8003f2e:	d901      	bls.n	8003f34 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f30:	2306      	movs	r3, #6
 8003f32:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f38:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f3e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8003f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f42:	2200      	movs	r2, #0
 8003f44:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f48:	3304      	adds	r3, #4
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fefa 	bl	8003d44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f52:	3318      	adds	r3, #24
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fef5 	bl	8003d44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f62:	f1c3 0207 	rsb	r2, r3, #7
 8003f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f6e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8003f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f72:	2200      	movs	r2, #0
 8003f74:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f78:	2200      	movs	r2, #0
 8003f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	68f9      	ldr	r1, [r7, #12]
 8003f88:	69b8      	ldr	r0, [r7, #24]
 8003f8a:	f000 fb91 	bl	80046b0 <pxPortInitialiseStack>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fa0:	bf00      	nop
 8003fa2:	3720      	adds	r7, #32
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fb0:	f000 fcb2 	bl	8004918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8004068 <prvAddNewTaskToReadyList+0xc0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	4a2b      	ldr	r2, [pc, #172]	@ (8004068 <prvAddNewTaskToReadyList+0xc0>)
 8003fbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800406c <prvAddNewTaskToReadyList+0xc4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fc6:	4a29      	ldr	r2, [pc, #164]	@ (800406c <prvAddNewTaskToReadyList+0xc4>)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fcc:	4b26      	ldr	r3, [pc, #152]	@ (8004068 <prvAddNewTaskToReadyList+0xc0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d110      	bne.n	8003ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fd4:	f000 face 	bl	8004574 <prvInitialiseTaskLists>
 8003fd8:	e00d      	b.n	8003ff6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fda:	4b25      	ldr	r3, [pc, #148]	@ (8004070 <prvAddNewTaskToReadyList+0xc8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fe2:	4b22      	ldr	r3, [pc, #136]	@ (800406c <prvAddNewTaskToReadyList+0xc4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d802      	bhi.n	8003ff6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800406c <prvAddNewTaskToReadyList+0xc4>)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8004074 <prvAddNewTaskToReadyList+0xcc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8004074 <prvAddNewTaskToReadyList+0xcc>)
 8003ffe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004000:	4b1c      	ldr	r3, [pc, #112]	@ (8004074 <prvAddNewTaskToReadyList+0xcc>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	2201      	movs	r2, #1
 800400e:	409a      	lsls	r2, r3
 8004010:	4b19      	ldr	r3, [pc, #100]	@ (8004078 <prvAddNewTaskToReadyList+0xd0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4313      	orrs	r3, r2
 8004016:	4a18      	ldr	r2, [pc, #96]	@ (8004078 <prvAddNewTaskToReadyList+0xd0>)
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4a15      	ldr	r2, [pc, #84]	@ (800407c <prvAddNewTaskToReadyList+0xd4>)
 8004028:	441a      	add	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f7ff fe94 	bl	8003d5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004036:	f000 fca1 	bl	800497c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800403a:	4b0d      	ldr	r3, [pc, #52]	@ (8004070 <prvAddNewTaskToReadyList+0xc8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00e      	beq.n	8004060 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004042:	4b0a      	ldr	r3, [pc, #40]	@ (800406c <prvAddNewTaskToReadyList+0xc4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404c:	429a      	cmp	r2, r3
 800404e:	d207      	bcs.n	8004060 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004050:	4b0b      	ldr	r3, [pc, #44]	@ (8004080 <prvAddNewTaskToReadyList+0xd8>)
 8004052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	200009e4 	.word	0x200009e4
 800406c:	200008e4 	.word	0x200008e4
 8004070:	200009f0 	.word	0x200009f0
 8004074:	20000a00 	.word	0x20000a00
 8004078:	200009ec 	.word	0x200009ec
 800407c:	200008e8 	.word	0x200008e8
 8004080:	e000ed04 	.word	0xe000ed04

08004084 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800408a:	4b1d      	ldr	r3, [pc, #116]	@ (8004100 <vTaskStartScheduler+0x7c>)
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	2300      	movs	r3, #0
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	2300      	movs	r3, #0
 8004094:	2280      	movs	r2, #128	@ 0x80
 8004096:	491b      	ldr	r1, [pc, #108]	@ (8004104 <vTaskStartScheduler+0x80>)
 8004098:	481b      	ldr	r0, [pc, #108]	@ (8004108 <vTaskStartScheduler+0x84>)
 800409a:	f7ff feae 	bl	8003dfa <xTaskCreate>
 800409e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d118      	bne.n	80040d8 <vTaskStartScheduler+0x54>
	__asm volatile
 80040a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	60bb      	str	r3, [r7, #8]
}
 80040b8:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040ba:	4b14      	ldr	r3, [pc, #80]	@ (800410c <vTaskStartScheduler+0x88>)
 80040bc:	f04f 32ff 	mov.w	r2, #4294967295
 80040c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040c2:	4b13      	ldr	r3, [pc, #76]	@ (8004110 <vTaskStartScheduler+0x8c>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040c8:	4b12      	ldr	r3, [pc, #72]	@ (8004114 <vTaskStartScheduler+0x90>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80040ce:	f7fc fc89 	bl	80009e4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040d2:	f000 fb7d 	bl	80047d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040d6:	e00f      	b.n	80040f8 <vTaskStartScheduler+0x74>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	d10b      	bne.n	80040f8 <vTaskStartScheduler+0x74>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	607b      	str	r3, [r7, #4]
}
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <vTaskStartScheduler+0x70>
}
 80040f8:	bf00      	nop
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000a08 	.word	0x20000a08
 8004104:	08006a04 	.word	0x08006a04
 8004108:	08004541 	.word	0x08004541
 800410c:	20000a04 	.word	0x20000a04
 8004110:	200009f0 	.word	0x200009f0
 8004114:	200009e8 	.word	0x200009e8

08004118 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800411c:	4b04      	ldr	r3, [pc, #16]	@ (8004130 <vTaskSuspendAll+0x18>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3301      	adds	r3, #1
 8004122:	4a03      	ldr	r2, [pc, #12]	@ (8004130 <vTaskSuspendAll+0x18>)
 8004124:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	20000a0c 	.word	0x20000a0c

08004134 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004142:	4b42      	ldr	r3, [pc, #264]	@ (800424c <xTaskResumeAll+0x118>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10b      	bne.n	8004162 <xTaskResumeAll+0x2e>
	__asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	603b      	str	r3, [r7, #0]
}
 800415c:	bf00      	nop
 800415e:	bf00      	nop
 8004160:	e7fd      	b.n	800415e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004162:	f000 fbd9 	bl	8004918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004166:	4b39      	ldr	r3, [pc, #228]	@ (800424c <xTaskResumeAll+0x118>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3b01      	subs	r3, #1
 800416c:	4a37      	ldr	r2, [pc, #220]	@ (800424c <xTaskResumeAll+0x118>)
 800416e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004170:	4b36      	ldr	r3, [pc, #216]	@ (800424c <xTaskResumeAll+0x118>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d161      	bne.n	800423c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004178:	4b35      	ldr	r3, [pc, #212]	@ (8004250 <xTaskResumeAll+0x11c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d05d      	beq.n	800423c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004180:	e02e      	b.n	80041e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004182:	4b34      	ldr	r3, [pc, #208]	@ (8004254 <xTaskResumeAll+0x120>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3318      	adds	r3, #24
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff fe09 	bl	8003da6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3304      	adds	r3, #4
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff fe04 	bl	8003da6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a2:	2201      	movs	r2, #1
 80041a4:	409a      	lsls	r2, r3
 80041a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004258 <xTaskResumeAll+0x124>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004258 <xTaskResumeAll+0x124>)
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4a27      	ldr	r2, [pc, #156]	@ (800425c <xTaskResumeAll+0x128>)
 80041be:	441a      	add	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4619      	mov	r1, r3
 80041c6:	4610      	mov	r0, r2
 80041c8:	f7ff fdc9 	bl	8003d5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d0:	4b23      	ldr	r3, [pc, #140]	@ (8004260 <xTaskResumeAll+0x12c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d302      	bcc.n	80041e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80041da:	4b22      	ldr	r3, [pc, #136]	@ (8004264 <xTaskResumeAll+0x130>)
 80041dc:	2201      	movs	r2, #1
 80041de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004254 <xTaskResumeAll+0x120>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1cc      	bne.n	8004182 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041ee:	f000 fa3f 	bl	8004670 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004268 <xTaskResumeAll+0x134>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d010      	beq.n	8004220 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041fe:	f000 f86d 	bl	80042dc <xTaskIncrementTick>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004208:	4b16      	ldr	r3, [pc, #88]	@ (8004264 <xTaskResumeAll+0x130>)
 800420a:	2201      	movs	r2, #1
 800420c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3b01      	subs	r3, #1
 8004212:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f1      	bne.n	80041fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800421a:	4b13      	ldr	r3, [pc, #76]	@ (8004268 <xTaskResumeAll+0x134>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004220:	4b10      	ldr	r3, [pc, #64]	@ (8004264 <xTaskResumeAll+0x130>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d009      	beq.n	800423c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004228:	2301      	movs	r3, #1
 800422a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800422c:	4b0f      	ldr	r3, [pc, #60]	@ (800426c <xTaskResumeAll+0x138>)
 800422e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800423c:	f000 fb9e 	bl	800497c <vPortExitCritical>

	return xAlreadyYielded;
 8004240:	68bb      	ldr	r3, [r7, #8]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000a0c 	.word	0x20000a0c
 8004250:	200009e4 	.word	0x200009e4
 8004254:	200009a4 	.word	0x200009a4
 8004258:	200009ec 	.word	0x200009ec
 800425c:	200008e8 	.word	0x200008e8
 8004260:	200008e4 	.word	0x200008e4
 8004264:	200009f8 	.word	0x200009f8
 8004268:	200009f4 	.word	0x200009f4
 800426c:	e000ed04 	.word	0xe000ed04

08004270 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004276:	4b05      	ldr	r3, [pc, #20]	@ (800428c <xTaskGetTickCount+0x1c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800427c:	687b      	ldr	r3, [r7, #4]
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	200009e8 	.word	0x200009e8

08004290 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d102      	bne.n	80042a4 <pcTaskGetName+0x14>
 800429e:	4b0e      	ldr	r3, [pc, #56]	@ (80042d8 <pcTaskGetName+0x48>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	e000      	b.n	80042a6 <pcTaskGetName+0x16>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10b      	bne.n	80042c6 <pcTaskGetName+0x36>
	__asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	60bb      	str	r3, [r7, #8]
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	e7fd      	b.n	80042c2 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3334      	adds	r3, #52	@ 0x34
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	200008e4 	.word	0x200008e4

080042dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004424 <xTaskIncrementTick+0x148>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f040 808f 	bne.w	800440e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004428 <xTaskIncrementTick+0x14c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3301      	adds	r3, #1
 80042f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004428 <xTaskIncrementTick+0x14c>)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d121      	bne.n	8004348 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004304:	4b49      	ldr	r3, [pc, #292]	@ (800442c <xTaskIncrementTick+0x150>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <xTaskIncrementTick+0x4a>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	603b      	str	r3, [r7, #0]
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	e7fd      	b.n	8004322 <xTaskIncrementTick+0x46>
 8004326:	4b41      	ldr	r3, [pc, #260]	@ (800442c <xTaskIncrementTick+0x150>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	4b40      	ldr	r3, [pc, #256]	@ (8004430 <xTaskIncrementTick+0x154>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a3e      	ldr	r2, [pc, #248]	@ (800442c <xTaskIncrementTick+0x150>)
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4a3e      	ldr	r2, [pc, #248]	@ (8004430 <xTaskIncrementTick+0x154>)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b3e      	ldr	r3, [pc, #248]	@ (8004434 <xTaskIncrementTick+0x158>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	4a3c      	ldr	r2, [pc, #240]	@ (8004434 <xTaskIncrementTick+0x158>)
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	f000 f994 	bl	8004670 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004348:	4b3b      	ldr	r3, [pc, #236]	@ (8004438 <xTaskIncrementTick+0x15c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	429a      	cmp	r2, r3
 8004350:	d348      	bcc.n	80043e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004352:	4b36      	ldr	r3, [pc, #216]	@ (800442c <xTaskIncrementTick+0x150>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d104      	bne.n	8004366 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800435c:	4b36      	ldr	r3, [pc, #216]	@ (8004438 <xTaskIncrementTick+0x15c>)
 800435e:	f04f 32ff 	mov.w	r2, #4294967295
 8004362:	601a      	str	r2, [r3, #0]
					break;
 8004364:	e03e      	b.n	80043e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004366:	4b31      	ldr	r3, [pc, #196]	@ (800442c <xTaskIncrementTick+0x150>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	429a      	cmp	r2, r3
 800437c:	d203      	bcs.n	8004386 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800437e:	4a2e      	ldr	r2, [pc, #184]	@ (8004438 <xTaskIncrementTick+0x15c>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004384:	e02e      	b.n	80043e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	3304      	adds	r3, #4
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fd0b 	bl	8003da6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	d004      	beq.n	80043a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	3318      	adds	r3, #24
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fd02 	bl	8003da6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a6:	2201      	movs	r2, #1
 80043a8:	409a      	lsls	r2, r3
 80043aa:	4b24      	ldr	r3, [pc, #144]	@ (800443c <xTaskIncrementTick+0x160>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	4a22      	ldr	r2, [pc, #136]	@ (800443c <xTaskIncrementTick+0x160>)
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004440 <xTaskIncrementTick+0x164>)
 80043c2:	441a      	add	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f7ff fcc7 	bl	8003d5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004444 <xTaskIncrementTick+0x168>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043da:	429a      	cmp	r2, r3
 80043dc:	d3b9      	bcc.n	8004352 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80043de:	2301      	movs	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043e2:	e7b6      	b.n	8004352 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043e4:	4b17      	ldr	r3, [pc, #92]	@ (8004444 <xTaskIncrementTick+0x168>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ea:	4915      	ldr	r1, [pc, #84]	@ (8004440 <xTaskIncrementTick+0x164>)
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d901      	bls.n	8004400 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80043fc:	2301      	movs	r3, #1
 80043fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004400:	4b11      	ldr	r3, [pc, #68]	@ (8004448 <xTaskIncrementTick+0x16c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004408:	2301      	movs	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	e004      	b.n	8004418 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800440e:	4b0f      	ldr	r3, [pc, #60]	@ (800444c <xTaskIncrementTick+0x170>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3301      	adds	r3, #1
 8004414:	4a0d      	ldr	r2, [pc, #52]	@ (800444c <xTaskIncrementTick+0x170>)
 8004416:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004418:	697b      	ldr	r3, [r7, #20]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000a0c 	.word	0x20000a0c
 8004428:	200009e8 	.word	0x200009e8
 800442c:	2000099c 	.word	0x2000099c
 8004430:	200009a0 	.word	0x200009a0
 8004434:	200009fc 	.word	0x200009fc
 8004438:	20000a04 	.word	0x20000a04
 800443c:	200009ec 	.word	0x200009ec
 8004440:	200008e8 	.word	0x200008e8
 8004444:	200008e4 	.word	0x200008e4
 8004448:	200009f8 	.word	0x200009f8
 800444c:	200009f4 	.word	0x200009f4

08004450 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004456:	4b33      	ldr	r3, [pc, #204]	@ (8004524 <vTaskSwitchContext+0xd4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800445e:	4b32      	ldr	r3, [pc, #200]	@ (8004528 <vTaskSwitchContext+0xd8>)
 8004460:	2201      	movs	r2, #1
 8004462:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004464:	e059      	b.n	800451a <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8004466:	4b30      	ldr	r3, [pc, #192]	@ (8004528 <vTaskSwitchContext+0xd8>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800446c:	f7fc fac6 	bl	80009fc <getRunTimeCounterValue>
 8004470:	4603      	mov	r3, r0
 8004472:	4a2e      	ldr	r2, [pc, #184]	@ (800452c <vTaskSwitchContext+0xdc>)
 8004474:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004476:	4b2d      	ldr	r3, [pc, #180]	@ (800452c <vTaskSwitchContext+0xdc>)
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4b2d      	ldr	r3, [pc, #180]	@ (8004530 <vTaskSwitchContext+0xe0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d909      	bls.n	8004496 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004482:	4b2c      	ldr	r3, [pc, #176]	@ (8004534 <vTaskSwitchContext+0xe4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8004488:	4a28      	ldr	r2, [pc, #160]	@ (800452c <vTaskSwitchContext+0xdc>)
 800448a:	6810      	ldr	r0, [r2, #0]
 800448c:	4a28      	ldr	r2, [pc, #160]	@ (8004530 <vTaskSwitchContext+0xe0>)
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	1a82      	subs	r2, r0, r2
 8004492:	440a      	add	r2, r1
 8004494:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004496:	4b25      	ldr	r3, [pc, #148]	@ (800452c <vTaskSwitchContext+0xdc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a25      	ldr	r2, [pc, #148]	@ (8004530 <vTaskSwitchContext+0xe0>)
 800449c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800449e:	4b26      	ldr	r3, [pc, #152]	@ (8004538 <vTaskSwitchContext+0xe8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	fab3 f383 	clz	r3, r3
 80044aa:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80044ac:	7afb      	ldrb	r3, [r7, #11]
 80044ae:	f1c3 031f 	rsb	r3, r3, #31
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	4921      	ldr	r1, [pc, #132]	@ (800453c <vTaskSwitchContext+0xec>)
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10b      	bne.n	80044e0 <vTaskSwitchContext+0x90>
	__asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	607b      	str	r3, [r7, #4]
}
 80044da:	bf00      	nop
 80044dc:	bf00      	nop
 80044de:	e7fd      	b.n	80044dc <vTaskSwitchContext+0x8c>
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4a14      	ldr	r2, [pc, #80]	@ (800453c <vTaskSwitchContext+0xec>)
 80044ec:	4413      	add	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	605a      	str	r2, [r3, #4]
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	3308      	adds	r3, #8
 8004502:	429a      	cmp	r2, r3
 8004504:	d104      	bne.n	8004510 <vTaskSwitchContext+0xc0>
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	605a      	str	r2, [r3, #4]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	4a07      	ldr	r2, [pc, #28]	@ (8004534 <vTaskSwitchContext+0xe4>)
 8004518:	6013      	str	r3, [r2, #0]
}
 800451a:	bf00      	nop
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20000a0c 	.word	0x20000a0c
 8004528:	200009f8 	.word	0x200009f8
 800452c:	20000a14 	.word	0x20000a14
 8004530:	20000a10 	.word	0x20000a10
 8004534:	200008e4 	.word	0x200008e4
 8004538:	200009ec 	.word	0x200009ec
 800453c:	200008e8 	.word	0x200008e8

08004540 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004548:	f000 f854 	bl	80045f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800454c:	4b07      	ldr	r3, [pc, #28]	@ (800456c <prvIdleTask+0x2c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d907      	bls.n	8004564 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004554:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <prvIdleTask+0x30>)
 8004556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004564:	f7fc fa56 	bl	8000a14 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004568:	e7ee      	b.n	8004548 <prvIdleTask+0x8>
 800456a:	bf00      	nop
 800456c:	200008e8 	.word	0x200008e8
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	e00c      	b.n	800459a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4a12      	ldr	r2, [pc, #72]	@ (80045d4 <prvInitialiseTaskLists+0x60>)
 800458c:	4413      	add	r3, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fbb8 	bl	8003d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3301      	adds	r3, #1
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b06      	cmp	r3, #6
 800459e:	d9ef      	bls.n	8004580 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045a0:	480d      	ldr	r0, [pc, #52]	@ (80045d8 <prvInitialiseTaskLists+0x64>)
 80045a2:	f7ff fbaf 	bl	8003d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045a6:	480d      	ldr	r0, [pc, #52]	@ (80045dc <prvInitialiseTaskLists+0x68>)
 80045a8:	f7ff fbac 	bl	8003d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045ac:	480c      	ldr	r0, [pc, #48]	@ (80045e0 <prvInitialiseTaskLists+0x6c>)
 80045ae:	f7ff fba9 	bl	8003d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045b2:	480c      	ldr	r0, [pc, #48]	@ (80045e4 <prvInitialiseTaskLists+0x70>)
 80045b4:	f7ff fba6 	bl	8003d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045b8:	480b      	ldr	r0, [pc, #44]	@ (80045e8 <prvInitialiseTaskLists+0x74>)
 80045ba:	f7ff fba3 	bl	8003d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045be:	4b0b      	ldr	r3, [pc, #44]	@ (80045ec <prvInitialiseTaskLists+0x78>)
 80045c0:	4a05      	ldr	r2, [pc, #20]	@ (80045d8 <prvInitialiseTaskLists+0x64>)
 80045c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045c4:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <prvInitialiseTaskLists+0x7c>)
 80045c6:	4a05      	ldr	r2, [pc, #20]	@ (80045dc <prvInitialiseTaskLists+0x68>)
 80045c8:	601a      	str	r2, [r3, #0]
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200008e8 	.word	0x200008e8
 80045d8:	20000974 	.word	0x20000974
 80045dc:	20000988 	.word	0x20000988
 80045e0:	200009a4 	.word	0x200009a4
 80045e4:	200009b8 	.word	0x200009b8
 80045e8:	200009d0 	.word	0x200009d0
 80045ec:	2000099c 	.word	0x2000099c
 80045f0:	200009a0 	.word	0x200009a0

080045f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045fa:	e019      	b.n	8004630 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045fc:	f000 f98c 	bl	8004918 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004600:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <prvCheckTasksWaitingTermination+0x50>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fbca 	bl	8003da6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004612:	4b0d      	ldr	r3, [pc, #52]	@ (8004648 <prvCheckTasksWaitingTermination+0x54>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3b01      	subs	r3, #1
 8004618:	4a0b      	ldr	r2, [pc, #44]	@ (8004648 <prvCheckTasksWaitingTermination+0x54>)
 800461a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800461c:	4b0b      	ldr	r3, [pc, #44]	@ (800464c <prvCheckTasksWaitingTermination+0x58>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3b01      	subs	r3, #1
 8004622:	4a0a      	ldr	r2, [pc, #40]	@ (800464c <prvCheckTasksWaitingTermination+0x58>)
 8004624:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004626:	f000 f9a9 	bl	800497c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f810 	bl	8004650 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004630:	4b06      	ldr	r3, [pc, #24]	@ (800464c <prvCheckTasksWaitingTermination+0x58>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e1      	bne.n	80045fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	200009b8 	.word	0x200009b8
 8004648:	200009e4 	.word	0x200009e4
 800464c:	200009cc 	.word	0x200009cc

08004650 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fb09 	bl	8004c74 <vPortFree>
			vPortFree( pxTCB );
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fb06 	bl	8004c74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004676:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <prvResetNextTaskUnblockTime+0x38>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004680:	4b0a      	ldr	r3, [pc, #40]	@ (80046ac <prvResetNextTaskUnblockTime+0x3c>)
 8004682:	f04f 32ff 	mov.w	r2, #4294967295
 8004686:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004688:	e008      	b.n	800469c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800468a:	4b07      	ldr	r3, [pc, #28]	@ (80046a8 <prvResetNextTaskUnblockTime+0x38>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4a04      	ldr	r2, [pc, #16]	@ (80046ac <prvResetNextTaskUnblockTime+0x3c>)
 800469a:	6013      	str	r3, [r2, #0]
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	2000099c 	.word	0x2000099c
 80046ac:	20000a04 	.word	0x20000a04

080046b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3b04      	subs	r3, #4
 80046c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3b04      	subs	r3, #4
 80046ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f023 0201 	bic.w	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3b04      	subs	r3, #4
 80046de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004714 <pxPortInitialiseStack+0x64>)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3b14      	subs	r3, #20
 80046ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	3b04      	subs	r3, #4
 80046f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f06f 0202 	mvn.w	r2, #2
 80046fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3b20      	subs	r3, #32
 8004704:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004706:	68fb      	ldr	r3, [r7, #12]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	08004719 	.word	0x08004719

08004718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004722:	4b13      	ldr	r3, [pc, #76]	@ (8004770 <prvTaskExitError+0x58>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472a:	d00b      	beq.n	8004744 <prvTaskExitError+0x2c>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	60fb      	str	r3, [r7, #12]
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	e7fd      	b.n	8004740 <prvTaskExitError+0x28>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	60bb      	str	r3, [r7, #8]
}
 8004756:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004758:	bf00      	nop
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0fc      	beq.n	800475a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004760:	bf00      	nop
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	2000000c 	.word	0x2000000c
	...

08004780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004780:	4b07      	ldr	r3, [pc, #28]	@ (80047a0 <pxCurrentTCBConst2>)
 8004782:	6819      	ldr	r1, [r3, #0]
 8004784:	6808      	ldr	r0, [r1, #0]
 8004786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800478a:	f380 8809 	msr	PSP, r0
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f04f 0000 	mov.w	r0, #0
 8004796:	f380 8811 	msr	BASEPRI, r0
 800479a:	4770      	bx	lr
 800479c:	f3af 8000 	nop.w

080047a0 <pxCurrentTCBConst2>:
 80047a0:	200008e4 	.word	0x200008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop

080047a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80047a8:	4808      	ldr	r0, [pc, #32]	@ (80047cc <prvPortStartFirstTask+0x24>)
 80047aa:	6800      	ldr	r0, [r0, #0]
 80047ac:	6800      	ldr	r0, [r0, #0]
 80047ae:	f380 8808 	msr	MSP, r0
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f380 8814 	msr	CONTROL, r0
 80047ba:	b662      	cpsie	i
 80047bc:	b661      	cpsie	f
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	df00      	svc	0
 80047c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047ca:	bf00      	nop
 80047cc:	e000ed08 	.word	0xe000ed08

080047d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047d6:	4b47      	ldr	r3, [pc, #284]	@ (80048f4 <xPortStartScheduler+0x124>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a47      	ldr	r2, [pc, #284]	@ (80048f8 <xPortStartScheduler+0x128>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d10b      	bne.n	80047f8 <xPortStartScheduler+0x28>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	613b      	str	r3, [r7, #16]
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	e7fd      	b.n	80047f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047f8:	4b3e      	ldr	r3, [pc, #248]	@ (80048f4 <xPortStartScheduler+0x124>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a3f      	ldr	r2, [pc, #252]	@ (80048fc <xPortStartScheduler+0x12c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10b      	bne.n	800481a <xPortStartScheduler+0x4a>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	60fb      	str	r3, [r7, #12]
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop
 8004818:	e7fd      	b.n	8004816 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800481a:	4b39      	ldr	r3, [pc, #228]	@ (8004900 <xPortStartScheduler+0x130>)
 800481c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	22ff      	movs	r2, #255	@ 0xff
 800482a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800483c:	b2da      	uxtb	r2, r3
 800483e:	4b31      	ldr	r3, [pc, #196]	@ (8004904 <xPortStartScheduler+0x134>)
 8004840:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004842:	4b31      	ldr	r3, [pc, #196]	@ (8004908 <xPortStartScheduler+0x138>)
 8004844:	2207      	movs	r2, #7
 8004846:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004848:	e009      	b.n	800485e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800484a:	4b2f      	ldr	r3, [pc, #188]	@ (8004908 <xPortStartScheduler+0x138>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3b01      	subs	r3, #1
 8004850:	4a2d      	ldr	r2, [pc, #180]	@ (8004908 <xPortStartScheduler+0x138>)
 8004852:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	b2db      	uxtb	r3, r3
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	b2db      	uxtb	r3, r3
 800485c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800485e:	78fb      	ldrb	r3, [r7, #3]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004866:	2b80      	cmp	r3, #128	@ 0x80
 8004868:	d0ef      	beq.n	800484a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800486a:	4b27      	ldr	r3, [pc, #156]	@ (8004908 <xPortStartScheduler+0x138>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f1c3 0307 	rsb	r3, r3, #7
 8004872:	2b04      	cmp	r3, #4
 8004874:	d00b      	beq.n	800488e <xPortStartScheduler+0xbe>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	60bb      	str	r3, [r7, #8]
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	e7fd      	b.n	800488a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800488e:	4b1e      	ldr	r3, [pc, #120]	@ (8004908 <xPortStartScheduler+0x138>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	4a1c      	ldr	r2, [pc, #112]	@ (8004908 <xPortStartScheduler+0x138>)
 8004896:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004898:	4b1b      	ldr	r3, [pc, #108]	@ (8004908 <xPortStartScheduler+0x138>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80048a0:	4a19      	ldr	r2, [pc, #100]	@ (8004908 <xPortStartScheduler+0x138>)
 80048a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048ac:	4b17      	ldr	r3, [pc, #92]	@ (800490c <xPortStartScheduler+0x13c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a16      	ldr	r2, [pc, #88]	@ (800490c <xPortStartScheduler+0x13c>)
 80048b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80048b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048b8:	4b14      	ldr	r3, [pc, #80]	@ (800490c <xPortStartScheduler+0x13c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a13      	ldr	r2, [pc, #76]	@ (800490c <xPortStartScheduler+0x13c>)
 80048be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80048c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048c4:	f000 f8da 	bl	8004a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048c8:	4b11      	ldr	r3, [pc, #68]	@ (8004910 <xPortStartScheduler+0x140>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80048ce:	f000 f8f9 	bl	8004ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80048d2:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <xPortStartScheduler+0x144>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a0f      	ldr	r2, [pc, #60]	@ (8004914 <xPortStartScheduler+0x144>)
 80048d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80048dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048de:	f7ff ff63 	bl	80047a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048e2:	f7ff fdb5 	bl	8004450 <vTaskSwitchContext>
	prvTaskExitError();
 80048e6:	f7ff ff17 	bl	8004718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	e000ed00 	.word	0xe000ed00
 80048f8:	410fc271 	.word	0x410fc271
 80048fc:	410fc270 	.word	0x410fc270
 8004900:	e000e400 	.word	0xe000e400
 8004904:	20000a18 	.word	0x20000a18
 8004908:	20000a1c 	.word	0x20000a1c
 800490c:	e000ed20 	.word	0xe000ed20
 8004910:	2000000c 	.word	0x2000000c
 8004914:	e000ef34 	.word	0xe000ef34

08004918 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	607b      	str	r3, [r7, #4]
}
 8004930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004932:	4b10      	ldr	r3, [pc, #64]	@ (8004974 <vPortEnterCritical+0x5c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3301      	adds	r3, #1
 8004938:	4a0e      	ldr	r2, [pc, #56]	@ (8004974 <vPortEnterCritical+0x5c>)
 800493a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800493c:	4b0d      	ldr	r3, [pc, #52]	@ (8004974 <vPortEnterCritical+0x5c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d110      	bne.n	8004966 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004944:	4b0c      	ldr	r3, [pc, #48]	@ (8004978 <vPortEnterCritical+0x60>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <vPortEnterCritical+0x4e>
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	603b      	str	r3, [r7, #0]
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	e7fd      	b.n	8004962 <vPortEnterCritical+0x4a>
	}
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	2000000c 	.word	0x2000000c
 8004978:	e000ed04 	.word	0xe000ed04

0800497c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004982:	4b12      	ldr	r3, [pc, #72]	@ (80049cc <vPortExitCritical+0x50>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10b      	bne.n	80049a2 <vPortExitCritical+0x26>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	607b      	str	r3, [r7, #4]
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	e7fd      	b.n	800499e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049a2:	4b0a      	ldr	r3, [pc, #40]	@ (80049cc <vPortExitCritical+0x50>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	4a08      	ldr	r2, [pc, #32]	@ (80049cc <vPortExitCritical+0x50>)
 80049aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049ac:	4b07      	ldr	r3, [pc, #28]	@ (80049cc <vPortExitCritical+0x50>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <vPortExitCritical+0x44>
 80049b4:	2300      	movs	r3, #0
 80049b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	2000000c 	.word	0x2000000c

080049d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049d0:	f3ef 8009 	mrs	r0, PSP
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	4b15      	ldr	r3, [pc, #84]	@ (8004a30 <pxCurrentTCBConst>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	f01e 0f10 	tst.w	lr, #16
 80049e0:	bf08      	it	eq
 80049e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ea:	6010      	str	r0, [r2, #0]
 80049ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80049f4:	f380 8811 	msr	BASEPRI, r0
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f7ff fd26 	bl	8004450 <vTaskSwitchContext>
 8004a04:	f04f 0000 	mov.w	r0, #0
 8004a08:	f380 8811 	msr	BASEPRI, r0
 8004a0c:	bc09      	pop	{r0, r3}
 8004a0e:	6819      	ldr	r1, [r3, #0]
 8004a10:	6808      	ldr	r0, [r1, #0]
 8004a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a16:	f01e 0f10 	tst.w	lr, #16
 8004a1a:	bf08      	it	eq
 8004a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a20:	f380 8809 	msr	PSP, r0
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	f3af 8000 	nop.w

08004a30 <pxCurrentTCBConst>:
 8004a30:	200008e4 	.word	0x200008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop

08004a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	607b      	str	r3, [r7, #4]
}
 8004a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a52:	f7ff fc43 	bl	80042dc <xTaskIncrementTick>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a5c:	4b06      	ldr	r3, [pc, #24]	@ (8004a78 <SysTick_Handler+0x40>)
 8004a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	2300      	movs	r3, #0
 8004a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	f383 8811 	msr	BASEPRI, r3
}
 8004a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a70:	bf00      	nop
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a80:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab0 <vPortSetupTimerInterrupt+0x34>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a86:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab4 <vPortSetupTimerInterrupt+0x38>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab8 <vPortSetupTimerInterrupt+0x3c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a0a      	ldr	r2, [pc, #40]	@ (8004abc <vPortSetupTimerInterrupt+0x40>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	099b      	lsrs	r3, r3, #6
 8004a98:	4a09      	ldr	r2, [pc, #36]	@ (8004ac0 <vPortSetupTimerInterrupt+0x44>)
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a9e:	4b04      	ldr	r3, [pc, #16]	@ (8004ab0 <vPortSetupTimerInterrupt+0x34>)
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	601a      	str	r2, [r3, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	e000e010 	.word	0xe000e010
 8004ab4:	e000e018 	.word	0xe000e018
 8004ab8:	20000000 	.word	0x20000000
 8004abc:	10624dd3 	.word	0x10624dd3
 8004ac0:	e000e014 	.word	0xe000e014

08004ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ad4 <vPortEnableVFP+0x10>
 8004ac8:	6801      	ldr	r1, [r0, #0]
 8004aca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004ace:	6001      	str	r1, [r0, #0]
 8004ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ad2:	bf00      	nop
 8004ad4:	e000ed88 	.word	0xe000ed88

08004ad8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08a      	sub	sp, #40	@ 0x28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ae4:	f7ff fb18 	bl	8004118 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ae8:	4b5c      	ldr	r3, [pc, #368]	@ (8004c5c <pvPortMalloc+0x184>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004af0:	f000 f924 	bl	8004d3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004af4:	4b5a      	ldr	r3, [pc, #360]	@ (8004c60 <pvPortMalloc+0x188>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f040 8095 	bne.w	8004c2c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01e      	beq.n	8004b46 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004b08:	2208      	movs	r2, #8
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d015      	beq.n	8004b46 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f023 0307 	bic.w	r3, r3, #7
 8004b20:	3308      	adds	r3, #8
 8004b22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00b      	beq.n	8004b46 <pvPortMalloc+0x6e>
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	617b      	str	r3, [r7, #20]
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	e7fd      	b.n	8004b42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d06f      	beq.n	8004c2c <pvPortMalloc+0x154>
 8004b4c:	4b45      	ldr	r3, [pc, #276]	@ (8004c64 <pvPortMalloc+0x18c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d86a      	bhi.n	8004c2c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b56:	4b44      	ldr	r3, [pc, #272]	@ (8004c68 <pvPortMalloc+0x190>)
 8004b58:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b5a:	4b43      	ldr	r3, [pc, #268]	@ (8004c68 <pvPortMalloc+0x190>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b60:	e004      	b.n	8004b6c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d903      	bls.n	8004b7e <pvPortMalloc+0xa6>
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f1      	bne.n	8004b62 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b7e:	4b37      	ldr	r3, [pc, #220]	@ (8004c5c <pvPortMalloc+0x184>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d051      	beq.n	8004c2c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	4413      	add	r3, r2
 8004b90:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	1ad2      	subs	r2, r2, r3
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d920      	bls.n	8004bec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4413      	add	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00b      	beq.n	8004bd4 <pvPortMalloc+0xfc>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	613b      	str	r3, [r7, #16]
}
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
 8004bd2:	e7fd      	b.n	8004bd0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	1ad2      	subs	r2, r2, r3
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004be6:	69b8      	ldr	r0, [r7, #24]
 8004be8:	f000 f90a 	bl	8004e00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bec:	4b1d      	ldr	r3, [pc, #116]	@ (8004c64 <pvPortMalloc+0x18c>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c64 <pvPortMalloc+0x18c>)
 8004bf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8004c64 <pvPortMalloc+0x18c>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8004c6c <pvPortMalloc+0x194>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d203      	bcs.n	8004c0e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c06:	4b17      	ldr	r3, [pc, #92]	@ (8004c64 <pvPortMalloc+0x18c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a18      	ldr	r2, [pc, #96]	@ (8004c6c <pvPortMalloc+0x194>)
 8004c0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	4b13      	ldr	r3, [pc, #76]	@ (8004c60 <pvPortMalloc+0x188>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c22:	4b13      	ldr	r3, [pc, #76]	@ (8004c70 <pvPortMalloc+0x198>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3301      	adds	r3, #1
 8004c28:	4a11      	ldr	r2, [pc, #68]	@ (8004c70 <pvPortMalloc+0x198>)
 8004c2a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c2c:	f7ff fa82 	bl	8004134 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00b      	beq.n	8004c52 <pvPortMalloc+0x17a>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	60fb      	str	r3, [r7, #12]
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	e7fd      	b.n	8004c4e <pvPortMalloc+0x176>
	return pvReturn;
 8004c52:	69fb      	ldr	r3, [r7, #28]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3728      	adds	r7, #40	@ 0x28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20004628 	.word	0x20004628
 8004c60:	2000463c 	.word	0x2000463c
 8004c64:	2000462c 	.word	0x2000462c
 8004c68:	20004620 	.word	0x20004620
 8004c6c:	20004630 	.word	0x20004630
 8004c70:	20004634 	.word	0x20004634

08004c74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d04f      	beq.n	8004d26 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c86:	2308      	movs	r3, #8
 8004c88:	425b      	negs	r3, r3
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	4b25      	ldr	r3, [pc, #148]	@ (8004d30 <vPortFree+0xbc>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10b      	bne.n	8004cba <vPortFree+0x46>
	__asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	60fb      	str	r3, [r7, #12]
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop
 8004cb8:	e7fd      	b.n	8004cb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <vPortFree+0x66>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	60bb      	str	r3, [r7, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop
 8004cd8:	e7fd      	b.n	8004cd6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	4b14      	ldr	r3, [pc, #80]	@ (8004d30 <vPortFree+0xbc>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01e      	beq.n	8004d26 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d11a      	bne.n	8004d26 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8004d30 <vPortFree+0xbc>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	401a      	ands	r2, r3
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d00:	f7ff fa0a 	bl	8004118 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	4b0a      	ldr	r3, [pc, #40]	@ (8004d34 <vPortFree+0xc0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	4a09      	ldr	r2, [pc, #36]	@ (8004d34 <vPortFree+0xc0>)
 8004d10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d12:	6938      	ldr	r0, [r7, #16]
 8004d14:	f000 f874 	bl	8004e00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d18:	4b07      	ldr	r3, [pc, #28]	@ (8004d38 <vPortFree+0xc4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	4a06      	ldr	r2, [pc, #24]	@ (8004d38 <vPortFree+0xc4>)
 8004d20:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d22:	f7ff fa07 	bl	8004134 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d26:	bf00      	nop
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	2000463c 	.word	0x2000463c
 8004d34:	2000462c 	.word	0x2000462c
 8004d38:	20004638 	.word	0x20004638

08004d3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d42:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004d46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d48:	4b27      	ldr	r3, [pc, #156]	@ (8004de8 <prvHeapInit+0xac>)
 8004d4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00c      	beq.n	8004d70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3307      	adds	r3, #7
 8004d5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0307 	bic.w	r3, r3, #7
 8004d62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8004de8 <prvHeapInit+0xac>)
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d74:	4a1d      	ldr	r2, [pc, #116]	@ (8004dec <prvHeapInit+0xb0>)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004dec <prvHeapInit+0xb0>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	4413      	add	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d88:	2208      	movs	r2, #8
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0307 	bic.w	r3, r3, #7
 8004d96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4a15      	ldr	r2, [pc, #84]	@ (8004df0 <prvHeapInit+0xb4>)
 8004d9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d9e:	4b14      	ldr	r3, [pc, #80]	@ (8004df0 <prvHeapInit+0xb4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2200      	movs	r2, #0
 8004da4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004da6:	4b12      	ldr	r3, [pc, #72]	@ (8004df0 <prvHeapInit+0xb4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	1ad2      	subs	r2, r2, r3
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004df0 <prvHeapInit+0xb4>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8004df4 <prvHeapInit+0xb8>)
 8004dca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	4a09      	ldr	r2, [pc, #36]	@ (8004df8 <prvHeapInit+0xbc>)
 8004dd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dd4:	4b09      	ldr	r3, [pc, #36]	@ (8004dfc <prvHeapInit+0xc0>)
 8004dd6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004dda:	601a      	str	r2, [r3, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	20000a20 	.word	0x20000a20
 8004dec:	20004620 	.word	0x20004620
 8004df0:	20004628 	.word	0x20004628
 8004df4:	20004630 	.word	0x20004630
 8004df8:	2000462c 	.word	0x2000462c
 8004dfc:	2000463c 	.word	0x2000463c

08004e00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e08:	4b28      	ldr	r3, [pc, #160]	@ (8004eac <prvInsertBlockIntoFreeList+0xac>)
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	e002      	b.n	8004e14 <prvInsertBlockIntoFreeList+0x14>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d8f7      	bhi.n	8004e0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	4413      	add	r3, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d108      	bne.n	8004e42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	441a      	add	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	441a      	add	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d118      	bne.n	8004e88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4b15      	ldr	r3, [pc, #84]	@ (8004eb0 <prvInsertBlockIntoFreeList+0xb0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d00d      	beq.n	8004e7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	441a      	add	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	e008      	b.n	8004e90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb0 <prvInsertBlockIntoFreeList+0xb0>)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	e003      	b.n	8004e90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d002      	beq.n	8004e9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e9e:	bf00      	nop
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	20004620 	.word	0x20004620
 8004eb0:	20004628 	.word	0x20004628

08004eb4 <app_init>:
TaskHandle_t task_b_h;
TaskHandle_t task_c_h;

/********************** external functions definition ************************/
void app_init(void)
{
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af02      	add	r7, sp, #8
	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 8004eba:	f7ff fd2d 	bl	8004918 <vPortEnterCritical>
 8004ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8005028 <app_init+0x174>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a5a      	ldr	r2, [pc, #360]	@ (800502c <app_init+0x178>)
 8004ec4:	213f      	movs	r1, #63	@ 0x3f
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fb42 	bl	8005550 <sniprintf>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4a58      	ldr	r2, [pc, #352]	@ (8005030 <app_init+0x17c>)
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	4b55      	ldr	r3, [pc, #340]	@ (8005028 <app_init+0x174>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f8cc 	bl	8005074 <logger_log_print_>
 8004edc:	f7ff fd4e 	bl	800497c <vPortExitCritical>
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)xTaskGetTickCount());
 8004ee0:	f7ff fd1a 	bl	8004918 <vPortEnterCritical>
 8004ee4:	4b50      	ldr	r3, [pc, #320]	@ (8005028 <app_init+0x174>)
 8004ee6:	681c      	ldr	r4, [r3, #0]
 8004ee8:	f7ff f9c2 	bl	8004270 <xTaskGetTickCount>
 8004eec:	4603      	mov	r3, r0
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	4b50      	ldr	r3, [pc, #320]	@ (8005034 <app_init+0x180>)
 8004ef2:	4a51      	ldr	r2, [pc, #324]	@ (8005038 <app_init+0x184>)
 8004ef4:	213f      	movs	r1, #63	@ 0x3f
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f000 fb2a 	bl	8005550 <sniprintf>
 8004efc:	4603      	mov	r3, r0
 8004efe:	4a4c      	ldr	r2, [pc, #304]	@ (8005030 <app_init+0x17c>)
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	4b49      	ldr	r3, [pc, #292]	@ (8005028 <app_init+0x174>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 f8b4 	bl	8005074 <logger_log_print_>
 8004f0c:	f7ff fd36 	bl	800497c <vPortExitCritical>

	LOGGER_LOG(p_sys);
 8004f10:	f7ff fd02 	bl	8004918 <vPortEnterCritical>
 8004f14:	4b44      	ldr	r3, [pc, #272]	@ (8005028 <app_init+0x174>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a48      	ldr	r2, [pc, #288]	@ (800503c <app_init+0x188>)
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	213f      	movs	r1, #63	@ 0x3f
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fb16 	bl	8005550 <sniprintf>
 8004f24:	4603      	mov	r3, r0
 8004f26:	4a42      	ldr	r2, [pc, #264]	@ (8005030 <app_init+0x17c>)
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	4b3f      	ldr	r3, [pc, #252]	@ (8005028 <app_init+0x174>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f8a0 	bl	8005074 <logger_log_print_>
 8004f34:	f7ff fd22 	bl	800497c <vPortExitCritical>
	LOGGER_LOG(p_app);
 8004f38:	f7ff fcee 	bl	8004918 <vPortEnterCritical>
 8004f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8005028 <app_init+0x174>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a3f      	ldr	r2, [pc, #252]	@ (8005040 <app_init+0x18c>)
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	213f      	movs	r1, #63	@ 0x3f
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fb02 	bl	8005550 <sniprintf>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	4a38      	ldr	r2, [pc, #224]	@ (8005030 <app_init+0x17c>)
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	4b35      	ldr	r3, [pc, #212]	@ (8005028 <app_init+0x174>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f88c 	bl	8005074 <logger_log_print_>
 8004f5c:	f7ff fd0e 	bl	800497c <vPortExitCritical>
    BaseType_t ret;


	//index = 0; // REEMPLAZADO POR set_a
    /* Task A thread at priority 1 */
    ret = xTaskCreate(task_function,					/* Pointer to the function thats implement the task. */
 8004f60:	4b38      	ldr	r3, [pc, #224]	@ (8005044 <app_init+0x190>)
 8004f62:	9301      	str	r3, [sp, #4]
 8004f64:	2301      	movs	r3, #1
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	4b37      	ldr	r3, [pc, #220]	@ (8005048 <app_init+0x194>)
 8004f6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f6e:	4937      	ldr	r1, [pc, #220]	@ (800504c <app_init+0x198>)
 8004f70:	4837      	ldr	r0, [pc, #220]	@ (8005050 <app_init+0x19c>)
 8004f72:	f7fe ff42 	bl	8003dfa <xTaskCreate>
 8004f76:	60f8      	str	r0, [r7, #12]
					  (void*)&led_btn_cfg[0],    		/* PREVIO-(void*)index - Pass the index as the task parameter. */
					  (tskIDLE_PRIORITY + 1UL),			/* This task will run at priority 1. */
					  &task_a_h);						/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(ret == pdPASS);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d00b      	beq.n	8004f96 <app_init+0xe2>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	60bb      	str	r3, [r7, #8]
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	e7fd      	b.n	8004f92 <app_init+0xde>

	//index = 1; // REEMPLAZADO POR set_b
    /* Task B thread at priority 1 */
    ret = xTaskCreate(task_function,					/* Pointer to the function thats implement the task. */
 8004f96:	4b2f      	ldr	r3, [pc, #188]	@ (8005054 <app_init+0x1a0>)
 8004f98:	9301      	str	r3, [sp, #4]
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8005058 <app_init+0x1a4>)
 8004fa0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fa4:	492d      	ldr	r1, [pc, #180]	@ (800505c <app_init+0x1a8>)
 8004fa6:	482a      	ldr	r0, [pc, #168]	@ (8005050 <app_init+0x19c>)
 8004fa8:	f7fe ff27 	bl	8003dfa <xTaskCreate>
 8004fac:	60f8      	str	r0, [r7, #12]
					  (void*)&led_btn_cfg[1],    		/* PREVIO-(void*)index - Pass the index as the task parameter. */
					  (tskIDLE_PRIORITY + 1UL),			/* This task will run at priority 1. */
					  &task_b_h);						/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(ret == pdPASS);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d00b      	beq.n	8004fcc <app_init+0x118>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	607b      	str	r3, [r7, #4]
}
 8004fc6:	bf00      	nop
 8004fc8:	bf00      	nop
 8004fca:	e7fd      	b.n	8004fc8 <app_init+0x114>

	//index = 2; // REEMPLAZADO POR set_c
    /* Task C thread at priority 1 */
    ret = xTaskCreate(task_function,					/* Pointer to the function thats implement the task. */
 8004fcc:	4b24      	ldr	r3, [pc, #144]	@ (8005060 <app_init+0x1ac>)
 8004fce:	9301      	str	r3, [sp, #4]
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	4b23      	ldr	r3, [pc, #140]	@ (8005064 <app_init+0x1b0>)
 8004fd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fda:	4923      	ldr	r1, [pc, #140]	@ (8005068 <app_init+0x1b4>)
 8004fdc:	481c      	ldr	r0, [pc, #112]	@ (8005050 <app_init+0x19c>)
 8004fde:	f7fe ff0c 	bl	8003dfa <xTaskCreate>
 8004fe2:	60f8      	str	r0, [r7, #12]
					  (void*)&led_btn_cfg[2],    		/* PREVIO-(void*)index - Pass the index as the task parameter. */
					  (tskIDLE_PRIORITY + 1UL),			/* This task will run at priority 1. */
					  &task_c_h);						/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(ret == pdPASS);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d00b      	beq.n	8005002 <app_init+0x14e>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	603b      	str	r3, [r7, #0]
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	e7fd      	b.n	8004ffe <app_init+0x14a>

    cycle_counter_init();
 8005002:	4b1a      	ldr	r3, [pc, #104]	@ (800506c <app_init+0x1b8>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	4a19      	ldr	r2, [pc, #100]	@ (800506c <app_init+0x1b8>)
 8005008:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800500c:	60d3      	str	r3, [r2, #12]
 800500e:	4b18      	ldr	r3, [pc, #96]	@ (8005070 <app_init+0x1bc>)
 8005010:	2200      	movs	r2, #0
 8005012:	605a      	str	r2, [r3, #4]
 8005014:	4b16      	ldr	r3, [pc, #88]	@ (8005070 <app_init+0x1bc>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a15      	ldr	r2, [pc, #84]	@ (8005070 <app_init+0x1bc>)
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	6013      	str	r3, [r2, #0]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	bd90      	pop	{r4, r7, pc}
 8005028:	08006b70 	.word	0x08006b70
 800502c:	08006a84 	.word	0x08006a84
 8005030:	2000468c 	.word	0x2000468c
 8005034:	08006a88 	.word	0x08006a88
 8005038:	08006a94 	.word	0x08006a94
 800503c:	20000010 	.word	0x20000010
 8005040:	20000014 	.word	0x20000014
 8005044:	20004640 	.word	0x20004640
 8005048:	20000024 	.word	0x20000024
 800504c:	08006ab8 	.word	0x08006ab8
 8005050:	0800509d 	.word	0x0800509d
 8005054:	20004644 	.word	0x20004644
 8005058:	2000003c 	.word	0x2000003c
 800505c:	08006ac0 	.word	0x08006ac0
 8005060:	20004648 	.word	0x20004648
 8005064:	20000054 	.word	0x20000054
 8005068:	08006ac8 	.word	0x08006ac8
 800506c:	e000edf0 	.word	0xe000edf0
 8005070:	e0001000 	.word	0xe0001000

08005074 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	printf(msg);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fa55 	bl	800552c <iprintf>
	fflush(stdout);
 8005082:	4b05      	ldr	r3, [pc, #20]	@ (8005098 <logger_log_print_+0x24>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	4618      	mov	r0, r3
 800508a:	f000 f979 	bl	8005380 <fflush>
}
 800508e:	bf00      	nop
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000078 	.word	0x20000078

0800509c <task_function>:

/********************** external functions definition ************************/

/* Task A, B and C thread */
void task_function(void *parameters)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	6078      	str	r0, [r7, #4]
	#if (TEST_X == TEST_0)
	g_task_function_cnt = G_TASK_FUNCTION_CNT_INI;
 80050a4:	4b58      	ldr	r3, [pc, #352]	@ (8005208 <task_function+0x16c>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]

	/*  Declare & Initialize Task Function variables for argument, led, button and task */
	//uint32_t index = (uint32_t) parameters; // NO NECESARIO
	led_btn_cfg_t * set = (led_btn_cfg_t *) parameters; // ASIGNAR A VARIABLE set DONDE APUNTA parametros
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60fb      	str	r3, [r7, #12]

	TickType_t btn_tick_cnt = xTaskGetTickCount();
	GPIO_PinState btn_state = BTN_HOVER;
	*/

	set->led_flag = NOT_BLINKING;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2201      	movs	r2, #1
 80050b2:	71da      	strb	r2, [r3, #7]
	//led_flag_t led_flag = NOT_BLINKING;
	set->led_state = GPIO_PIN_RESET;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	719a      	strb	r2, [r3, #6]
	//GPIO_PinState led_state = GPIO_PIN_RESET;
	set->led_tick_cnt = xTaskGetTickCount();
 80050ba:	f7ff f8d9 	bl	8004270 <xTaskGetTickCount>
 80050be:	4602      	mov	r2, r0
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	609a      	str	r2, [r3, #8]
	//TickType_t led_tick_cnt = xTaskGetTickCount();

	set->btn_tick_cnt = xTaskGetTickCount();
 80050c4:	f7ff f8d4 	bl	8004270 <xTaskGetTickCount>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	615a      	str	r2, [r3, #20]
	//TickType_t btn_tick_cnt = xTaskGetTickCount();
	set->btn_state = BTN_HOVER;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	749a      	strb	r2, [r3, #18]
	//GPIO_PinState btn_state = BTN_HOVER;

	char *p_task_name = (char *) pcTaskGetName(NULL);
 80050d4:	2000      	movs	r0, #0
 80050d6:	f7ff f8db 	bl	8004290 <pcTaskGetName>
 80050da:	60b8      	str	r0, [r7, #8]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", p_task_name, p_task_function);
 80050dc:	f7ff fc1c 	bl	8004918 <vPortEnterCritical>
 80050e0:	4b4a      	ldr	r3, [pc, #296]	@ (800520c <task_function+0x170>)
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	4b4a      	ldr	r3, [pc, #296]	@ (8005210 <task_function+0x174>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4a49      	ldr	r2, [pc, #292]	@ (8005214 <task_function+0x178>)
 80050ee:	213f      	movs	r1, #63	@ 0x3f
 80050f0:	f000 fa2e 	bl	8005550 <sniprintf>
 80050f4:	4603      	mov	r3, r0
 80050f6:	4a48      	ldr	r2, [pc, #288]	@ (8005218 <task_function+0x17c>)
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	4b44      	ldr	r3, [pc, #272]	@ (800520c <task_function+0x170>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff ffb8 	bl	8005074 <logger_log_print_>
 8005104:	f7ff fc3a 	bl	800497c <vPortExitCritical>
	{

		#if (TEST_X == TEST_0)

		/* Update Task A Counter */
		g_task_function_cnt++;
 8005108:	4b3f      	ldr	r3, [pc, #252]	@ (8005208 <task_function+0x16c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3301      	adds	r3, #1
 800510e:	4a3e      	ldr	r2, [pc, #248]	@ (8005208 <task_function+0x16c>)
 8005110:	6013      	str	r3, [r2, #0]

		/* Check HW Button State */
		//btn_state = HAL_GPIO_ReadPin(btn_gpio_port[index], btn_pin[index]); // REEMPLAZO POR ESTRUCTURA
		set->btn_state = HAL_GPIO_ReadPin(set->btn_gpio_port, set->btn_pin);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8a1b      	ldrh	r3, [r3, #16]
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f7fc fda7 	bl	8001c70 <HAL_GPIO_ReadPin>
 8005122:	4603      	mov	r3, r0
 8005124:	461a      	mov	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	749a      	strb	r2, [r3, #18]
		//if (BTN_PRESSED == btn_state)
		if (BTN_PRESSED == set->btn_state)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	7c9b      	ldrb	r3, [r3, #18]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d143      	bne.n	80051ba <task_function+0x11e>
		{
			/* Delay for a period using Tick Count */
			//if (BTN_TICK_CNT_MAX <= (xTaskGetTickCount() - btn_tick_cnt)) // REEMPLAZO POR ESTRUCTURA
			if (BTN_TICK_CNT_MAX <= (xTaskGetTickCount() - set->btn_tick_cnt))
 8005132:	f7ff f89d 	bl	8004270 <xTaskGetTickCount>
 8005136:	4602      	mov	r2, r0
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2bf9      	cmp	r3, #249	@ 0xf9
 8005140:	d93b      	bls.n	80051ba <task_function+0x11e>
			{
				/* Check, Update and Print Led Flag */
				//if (NOT_BLINKING == led_flag) // REEMPLAZO POR ESTRUCTURA
				if (NOT_BLINKING == set->led_flag)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	79db      	ldrb	r3, [r3, #7]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d119      	bne.n	800517e <task_function+0xe2>
				{
					//led_flag = BLINKING; // REEMPLAZO POR ESTRUCTURA
					set->led_flag = BLINKING;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	71da      	strb	r2, [r3, #7]

					/* Print out: Task execution */
					LOGGER_LOG("  %s - %s\r\n", p_task_name, p_task_blinking_on);
 8005150:	f7ff fbe2 	bl	8004918 <vPortEnterCritical>
 8005154:	4b2d      	ldr	r3, [pc, #180]	@ (800520c <task_function+0x170>)
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	4b30      	ldr	r3, [pc, #192]	@ (800521c <task_function+0x180>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	4a2f      	ldr	r2, [pc, #188]	@ (8005220 <task_function+0x184>)
 8005162:	213f      	movs	r1, #63	@ 0x3f
 8005164:	f000 f9f4 	bl	8005550 <sniprintf>
 8005168:	4603      	mov	r3, r0
 800516a:	4a2b      	ldr	r2, [pc, #172]	@ (8005218 <task_function+0x17c>)
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	4b27      	ldr	r3, [pc, #156]	@ (800520c <task_function+0x170>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff ff7e 	bl	8005074 <logger_log_print_>
 8005178:	f7ff fc00 	bl	800497c <vPortExitCritical>
 800517c:	e018      	b.n	80051b0 <task_function+0x114>
				}
				else
				{
					//led_flag = NOT_BLINKING; // REEMPLAZO POR ESTRUCTURA
					set->led_flag = NOT_BLINKING;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2201      	movs	r2, #1
 8005182:	71da      	strb	r2, [r3, #7]

					/* Print out: Task execution */
					LOGGER_LOG("  %s - %s\r\n", p_task_name, p_task_blinking_off);
 8005184:	f7ff fbc8 	bl	8004918 <vPortEnterCritical>
 8005188:	4b20      	ldr	r3, [pc, #128]	@ (800520c <task_function+0x170>)
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	4b25      	ldr	r3, [pc, #148]	@ (8005224 <task_function+0x188>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	4a22      	ldr	r2, [pc, #136]	@ (8005220 <task_function+0x184>)
 8005196:	213f      	movs	r1, #63	@ 0x3f
 8005198:	f000 f9da 	bl	8005550 <sniprintf>
 800519c:	4603      	mov	r3, r0
 800519e:	4a1e      	ldr	r2, [pc, #120]	@ (8005218 <task_function+0x17c>)
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	4b1a      	ldr	r3, [pc, #104]	@ (800520c <task_function+0x170>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff ff64 	bl	8005074 <logger_log_print_>
 80051ac:	f7ff fbe6 	bl	800497c <vPortExitCritical>
				}
				/* Update and Button Tick Counter */
				//btn_tick_cnt = xTaskGetTickCount(); // REEMPLAZO POR ESTRUCTURA
				set->btn_tick_cnt = xTaskGetTickCount();
 80051b0:	f7ff f85e 	bl	8004270 <xTaskGetTickCount>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check Led Flag */
		//if (BLINKING == led_flag) // REEMPLAZO POR ESTRUCTURA
		if (BLINKING == set->led_flag)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	79db      	ldrb	r3, [r3, #7]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1a2      	bne.n	8005108 <task_function+0x6c>
		{
			/* Delay for a period using Tick Count. */
			//if (LED_TICK_CNT_MAX <= (xTaskGetTickCount() - led_tick_cnt)) // REEMPLAZO POR ESTRUCTURA
			if (LED_TICK_CNT_MAX <= (xTaskGetTickCount() - set->led_tick_cnt))
 80051c2:	f7ff f855 	bl	8004270 <xTaskGetTickCount>
 80051c6:	4602      	mov	r2, r0
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2bf9      	cmp	r3, #249	@ 0xf9
 80051d0:	d99a      	bls.n	8005108 <task_function+0x6c>
			{
				/* Check, Update and Print Led State */
				//if (GPIO_PIN_RESET == led_state) // REEMPLAZO POR ESTRUCTURA
				if (GPIO_PIN_RESET == set->led_state)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	799b      	ldrb	r3, [r3, #6]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d103      	bne.n	80051e2 <task_function+0x146>
				{
					//led_state = LED_ON; // REEMPLAZO POR ESTRUCTURA
					set->led_state = LED_ON;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	719a      	strb	r2, [r3, #6]
 80051e0:	e002      	b.n	80051e8 <task_function+0x14c>
					//LOGGER_LOG("  %s - %s\r\n", p_task_name, p_task_led_t_on);
				}
				else
				{
					//led_state = LED_OFF; // REEMPLAZO POR ESTRUCTURA
					set->led_state = LED_OFF;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	719a      	strb	r2, [r3, #6]
					/* Print out: Task execution */
					//LOGGER_LOG("  %s - %s\r\n", p_task_name, p_task_led_t_off);
				}
				/* Update HW Led State */
				//HAL_GPIO_WritePin(led_gpio_port[index], led_pin[index], led_state); // REEMPLAZO POR ESTRUCTURA
				HAL_GPIO_WritePin(set->led_gpio_port, set->led_pin, set->led_state);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8899      	ldrh	r1, [r3, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	799b      	ldrb	r3, [r3, #6]
 80051f4:	461a      	mov	r2, r3
 80051f6:	f7fc fd53 	bl	8001ca0 <HAL_GPIO_WritePin>

				/* Update and Led Tick Counter */
				//led_tick_cnt = xTaskGetTickCount(); // REEMPLAZO POR ESTRUCTURA
				set->led_tick_cnt = xTaskGetTickCount();
 80051fa:	f7ff f839 	bl	8004270 <xTaskGetTickCount>
 80051fe:	4602      	mov	r2, r0
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	609a      	str	r2, [r3, #8]
		g_task_function_cnt++;
 8005204:	e780      	b.n	8005108 <task_function+0x6c>
 8005206:	bf00      	nop
 8005208:	20004690 	.word	0x20004690
 800520c:	08006b70 	.word	0x08006b70
 8005210:	20000018 	.word	0x20000018
 8005214:	08006b34 	.word	0x08006b34
 8005218:	2000468c 	.word	0x2000468c
 800521c:	2000001c 	.word	0x2000001c
 8005220:	08006b4c 	.word	0x08006b4c
 8005224:	20000020 	.word	0x20000020

08005228 <__sflush_r>:
 8005228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800522c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005230:	0716      	lsls	r6, r2, #28
 8005232:	4605      	mov	r5, r0
 8005234:	460c      	mov	r4, r1
 8005236:	d454      	bmi.n	80052e2 <__sflush_r+0xba>
 8005238:	684b      	ldr	r3, [r1, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	dc02      	bgt.n	8005244 <__sflush_r+0x1c>
 800523e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	dd48      	ble.n	80052d6 <__sflush_r+0xae>
 8005244:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005246:	2e00      	cmp	r6, #0
 8005248:	d045      	beq.n	80052d6 <__sflush_r+0xae>
 800524a:	2300      	movs	r3, #0
 800524c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005250:	682f      	ldr	r7, [r5, #0]
 8005252:	6a21      	ldr	r1, [r4, #32]
 8005254:	602b      	str	r3, [r5, #0]
 8005256:	d030      	beq.n	80052ba <__sflush_r+0x92>
 8005258:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	0759      	lsls	r1, r3, #29
 800525e:	d505      	bpl.n	800526c <__sflush_r+0x44>
 8005260:	6863      	ldr	r3, [r4, #4]
 8005262:	1ad2      	subs	r2, r2, r3
 8005264:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005266:	b10b      	cbz	r3, 800526c <__sflush_r+0x44>
 8005268:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800526a:	1ad2      	subs	r2, r2, r3
 800526c:	2300      	movs	r3, #0
 800526e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005270:	6a21      	ldr	r1, [r4, #32]
 8005272:	4628      	mov	r0, r5
 8005274:	47b0      	blx	r6
 8005276:	1c43      	adds	r3, r0, #1
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	d106      	bne.n	800528a <__sflush_r+0x62>
 800527c:	6829      	ldr	r1, [r5, #0]
 800527e:	291d      	cmp	r1, #29
 8005280:	d82b      	bhi.n	80052da <__sflush_r+0xb2>
 8005282:	4a2a      	ldr	r2, [pc, #168]	@ (800532c <__sflush_r+0x104>)
 8005284:	410a      	asrs	r2, r1
 8005286:	07d6      	lsls	r6, r2, #31
 8005288:	d427      	bmi.n	80052da <__sflush_r+0xb2>
 800528a:	2200      	movs	r2, #0
 800528c:	6062      	str	r2, [r4, #4]
 800528e:	04d9      	lsls	r1, r3, #19
 8005290:	6922      	ldr	r2, [r4, #16]
 8005292:	6022      	str	r2, [r4, #0]
 8005294:	d504      	bpl.n	80052a0 <__sflush_r+0x78>
 8005296:	1c42      	adds	r2, r0, #1
 8005298:	d101      	bne.n	800529e <__sflush_r+0x76>
 800529a:	682b      	ldr	r3, [r5, #0]
 800529c:	b903      	cbnz	r3, 80052a0 <__sflush_r+0x78>
 800529e:	6560      	str	r0, [r4, #84]	@ 0x54
 80052a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052a2:	602f      	str	r7, [r5, #0]
 80052a4:	b1b9      	cbz	r1, 80052d6 <__sflush_r+0xae>
 80052a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052aa:	4299      	cmp	r1, r3
 80052ac:	d002      	beq.n	80052b4 <__sflush_r+0x8c>
 80052ae:	4628      	mov	r0, r5
 80052b0:	f000 fa50 	bl	8005754 <_free_r>
 80052b4:	2300      	movs	r3, #0
 80052b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80052b8:	e00d      	b.n	80052d6 <__sflush_r+0xae>
 80052ba:	2301      	movs	r3, #1
 80052bc:	4628      	mov	r0, r5
 80052be:	47b0      	blx	r6
 80052c0:	4602      	mov	r2, r0
 80052c2:	1c50      	adds	r0, r2, #1
 80052c4:	d1c9      	bne.n	800525a <__sflush_r+0x32>
 80052c6:	682b      	ldr	r3, [r5, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0c6      	beq.n	800525a <__sflush_r+0x32>
 80052cc:	2b1d      	cmp	r3, #29
 80052ce:	d001      	beq.n	80052d4 <__sflush_r+0xac>
 80052d0:	2b16      	cmp	r3, #22
 80052d2:	d11e      	bne.n	8005312 <__sflush_r+0xea>
 80052d4:	602f      	str	r7, [r5, #0]
 80052d6:	2000      	movs	r0, #0
 80052d8:	e022      	b.n	8005320 <__sflush_r+0xf8>
 80052da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052de:	b21b      	sxth	r3, r3
 80052e0:	e01b      	b.n	800531a <__sflush_r+0xf2>
 80052e2:	690f      	ldr	r7, [r1, #16]
 80052e4:	2f00      	cmp	r7, #0
 80052e6:	d0f6      	beq.n	80052d6 <__sflush_r+0xae>
 80052e8:	0793      	lsls	r3, r2, #30
 80052ea:	680e      	ldr	r6, [r1, #0]
 80052ec:	bf08      	it	eq
 80052ee:	694b      	ldreq	r3, [r1, #20]
 80052f0:	600f      	str	r7, [r1, #0]
 80052f2:	bf18      	it	ne
 80052f4:	2300      	movne	r3, #0
 80052f6:	eba6 0807 	sub.w	r8, r6, r7
 80052fa:	608b      	str	r3, [r1, #8]
 80052fc:	f1b8 0f00 	cmp.w	r8, #0
 8005300:	dde9      	ble.n	80052d6 <__sflush_r+0xae>
 8005302:	6a21      	ldr	r1, [r4, #32]
 8005304:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005306:	4643      	mov	r3, r8
 8005308:	463a      	mov	r2, r7
 800530a:	4628      	mov	r0, r5
 800530c:	47b0      	blx	r6
 800530e:	2800      	cmp	r0, #0
 8005310:	dc08      	bgt.n	8005324 <__sflush_r+0xfc>
 8005312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800531a:	81a3      	strh	r3, [r4, #12]
 800531c:	f04f 30ff 	mov.w	r0, #4294967295
 8005320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005324:	4407      	add	r7, r0
 8005326:	eba8 0800 	sub.w	r8, r8, r0
 800532a:	e7e7      	b.n	80052fc <__sflush_r+0xd4>
 800532c:	dfbffffe 	.word	0xdfbffffe

08005330 <_fflush_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	690b      	ldr	r3, [r1, #16]
 8005334:	4605      	mov	r5, r0
 8005336:	460c      	mov	r4, r1
 8005338:	b913      	cbnz	r3, 8005340 <_fflush_r+0x10>
 800533a:	2500      	movs	r5, #0
 800533c:	4628      	mov	r0, r5
 800533e:	bd38      	pop	{r3, r4, r5, pc}
 8005340:	b118      	cbz	r0, 800534a <_fflush_r+0x1a>
 8005342:	6a03      	ldr	r3, [r0, #32]
 8005344:	b90b      	cbnz	r3, 800534a <_fflush_r+0x1a>
 8005346:	f000 f8bb 	bl	80054c0 <__sinit>
 800534a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0f3      	beq.n	800533a <_fflush_r+0xa>
 8005352:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005354:	07d0      	lsls	r0, r2, #31
 8005356:	d404      	bmi.n	8005362 <_fflush_r+0x32>
 8005358:	0599      	lsls	r1, r3, #22
 800535a:	d402      	bmi.n	8005362 <_fflush_r+0x32>
 800535c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800535e:	f000 f9e8 	bl	8005732 <__retarget_lock_acquire_recursive>
 8005362:	4628      	mov	r0, r5
 8005364:	4621      	mov	r1, r4
 8005366:	f7ff ff5f 	bl	8005228 <__sflush_r>
 800536a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800536c:	07da      	lsls	r2, r3, #31
 800536e:	4605      	mov	r5, r0
 8005370:	d4e4      	bmi.n	800533c <_fflush_r+0xc>
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	059b      	lsls	r3, r3, #22
 8005376:	d4e1      	bmi.n	800533c <_fflush_r+0xc>
 8005378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800537a:	f000 f9db 	bl	8005734 <__retarget_lock_release_recursive>
 800537e:	e7dd      	b.n	800533c <_fflush_r+0xc>

08005380 <fflush>:
 8005380:	4601      	mov	r1, r0
 8005382:	b920      	cbnz	r0, 800538e <fflush+0xe>
 8005384:	4a04      	ldr	r2, [pc, #16]	@ (8005398 <fflush+0x18>)
 8005386:	4905      	ldr	r1, [pc, #20]	@ (800539c <fflush+0x1c>)
 8005388:	4805      	ldr	r0, [pc, #20]	@ (80053a0 <fflush+0x20>)
 800538a:	f000 b8b1 	b.w	80054f0 <_fwalk_sglue>
 800538e:	4b05      	ldr	r3, [pc, #20]	@ (80053a4 <fflush+0x24>)
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	f7ff bfcd 	b.w	8005330 <_fflush_r>
 8005396:	bf00      	nop
 8005398:	2000006c 	.word	0x2000006c
 800539c:	08005331 	.word	0x08005331
 80053a0:	2000007c 	.word	0x2000007c
 80053a4:	20000078 	.word	0x20000078

080053a8 <std>:
 80053a8:	2300      	movs	r3, #0
 80053aa:	b510      	push	{r4, lr}
 80053ac:	4604      	mov	r4, r0
 80053ae:	e9c0 3300 	strd	r3, r3, [r0]
 80053b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053b6:	6083      	str	r3, [r0, #8]
 80053b8:	8181      	strh	r1, [r0, #12]
 80053ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80053bc:	81c2      	strh	r2, [r0, #14]
 80053be:	6183      	str	r3, [r0, #24]
 80053c0:	4619      	mov	r1, r3
 80053c2:	2208      	movs	r2, #8
 80053c4:	305c      	adds	r0, #92	@ 0x5c
 80053c6:	f000 f93a 	bl	800563e <memset>
 80053ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005400 <std+0x58>)
 80053cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80053ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005404 <std+0x5c>)
 80053d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80053d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005408 <std+0x60>)
 80053d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80053d6:	4b0d      	ldr	r3, [pc, #52]	@ (800540c <std+0x64>)
 80053d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80053da:	4b0d      	ldr	r3, [pc, #52]	@ (8005410 <std+0x68>)
 80053dc:	6224      	str	r4, [r4, #32]
 80053de:	429c      	cmp	r4, r3
 80053e0:	d006      	beq.n	80053f0 <std+0x48>
 80053e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80053e6:	4294      	cmp	r4, r2
 80053e8:	d002      	beq.n	80053f0 <std+0x48>
 80053ea:	33d0      	adds	r3, #208	@ 0xd0
 80053ec:	429c      	cmp	r4, r3
 80053ee:	d105      	bne.n	80053fc <std+0x54>
 80053f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053f8:	f000 b99a 	b.w	8005730 <__retarget_lock_init_recursive>
 80053fc:	bd10      	pop	{r4, pc}
 80053fe:	bf00      	nop
 8005400:	080055b9 	.word	0x080055b9
 8005404:	080055db 	.word	0x080055db
 8005408:	08005613 	.word	0x08005613
 800540c:	08005637 	.word	0x08005637
 8005410:	20004694 	.word	0x20004694

08005414 <stdio_exit_handler>:
 8005414:	4a02      	ldr	r2, [pc, #8]	@ (8005420 <stdio_exit_handler+0xc>)
 8005416:	4903      	ldr	r1, [pc, #12]	@ (8005424 <stdio_exit_handler+0x10>)
 8005418:	4803      	ldr	r0, [pc, #12]	@ (8005428 <stdio_exit_handler+0x14>)
 800541a:	f000 b869 	b.w	80054f0 <_fwalk_sglue>
 800541e:	bf00      	nop
 8005420:	2000006c 	.word	0x2000006c
 8005424:	08005331 	.word	0x08005331
 8005428:	2000007c 	.word	0x2000007c

0800542c <cleanup_stdio>:
 800542c:	6841      	ldr	r1, [r0, #4]
 800542e:	4b0c      	ldr	r3, [pc, #48]	@ (8005460 <cleanup_stdio+0x34>)
 8005430:	4299      	cmp	r1, r3
 8005432:	b510      	push	{r4, lr}
 8005434:	4604      	mov	r4, r0
 8005436:	d001      	beq.n	800543c <cleanup_stdio+0x10>
 8005438:	f7ff ff7a 	bl	8005330 <_fflush_r>
 800543c:	68a1      	ldr	r1, [r4, #8]
 800543e:	4b09      	ldr	r3, [pc, #36]	@ (8005464 <cleanup_stdio+0x38>)
 8005440:	4299      	cmp	r1, r3
 8005442:	d002      	beq.n	800544a <cleanup_stdio+0x1e>
 8005444:	4620      	mov	r0, r4
 8005446:	f7ff ff73 	bl	8005330 <_fflush_r>
 800544a:	68e1      	ldr	r1, [r4, #12]
 800544c:	4b06      	ldr	r3, [pc, #24]	@ (8005468 <cleanup_stdio+0x3c>)
 800544e:	4299      	cmp	r1, r3
 8005450:	d004      	beq.n	800545c <cleanup_stdio+0x30>
 8005452:	4620      	mov	r0, r4
 8005454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005458:	f7ff bf6a 	b.w	8005330 <_fflush_r>
 800545c:	bd10      	pop	{r4, pc}
 800545e:	bf00      	nop
 8005460:	20004694 	.word	0x20004694
 8005464:	200046fc 	.word	0x200046fc
 8005468:	20004764 	.word	0x20004764

0800546c <global_stdio_init.part.0>:
 800546c:	b510      	push	{r4, lr}
 800546e:	4b0b      	ldr	r3, [pc, #44]	@ (800549c <global_stdio_init.part.0+0x30>)
 8005470:	4c0b      	ldr	r4, [pc, #44]	@ (80054a0 <global_stdio_init.part.0+0x34>)
 8005472:	4a0c      	ldr	r2, [pc, #48]	@ (80054a4 <global_stdio_init.part.0+0x38>)
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	4620      	mov	r0, r4
 8005478:	2200      	movs	r2, #0
 800547a:	2104      	movs	r1, #4
 800547c:	f7ff ff94 	bl	80053a8 <std>
 8005480:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005484:	2201      	movs	r2, #1
 8005486:	2109      	movs	r1, #9
 8005488:	f7ff ff8e 	bl	80053a8 <std>
 800548c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005490:	2202      	movs	r2, #2
 8005492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005496:	2112      	movs	r1, #18
 8005498:	f7ff bf86 	b.w	80053a8 <std>
 800549c:	200047cc 	.word	0x200047cc
 80054a0:	20004694 	.word	0x20004694
 80054a4:	08005415 	.word	0x08005415

080054a8 <__sfp_lock_acquire>:
 80054a8:	4801      	ldr	r0, [pc, #4]	@ (80054b0 <__sfp_lock_acquire+0x8>)
 80054aa:	f000 b942 	b.w	8005732 <__retarget_lock_acquire_recursive>
 80054ae:	bf00      	nop
 80054b0:	200047d5 	.word	0x200047d5

080054b4 <__sfp_lock_release>:
 80054b4:	4801      	ldr	r0, [pc, #4]	@ (80054bc <__sfp_lock_release+0x8>)
 80054b6:	f000 b93d 	b.w	8005734 <__retarget_lock_release_recursive>
 80054ba:	bf00      	nop
 80054bc:	200047d5 	.word	0x200047d5

080054c0 <__sinit>:
 80054c0:	b510      	push	{r4, lr}
 80054c2:	4604      	mov	r4, r0
 80054c4:	f7ff fff0 	bl	80054a8 <__sfp_lock_acquire>
 80054c8:	6a23      	ldr	r3, [r4, #32]
 80054ca:	b11b      	cbz	r3, 80054d4 <__sinit+0x14>
 80054cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d0:	f7ff bff0 	b.w	80054b4 <__sfp_lock_release>
 80054d4:	4b04      	ldr	r3, [pc, #16]	@ (80054e8 <__sinit+0x28>)
 80054d6:	6223      	str	r3, [r4, #32]
 80054d8:	4b04      	ldr	r3, [pc, #16]	@ (80054ec <__sinit+0x2c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f5      	bne.n	80054cc <__sinit+0xc>
 80054e0:	f7ff ffc4 	bl	800546c <global_stdio_init.part.0>
 80054e4:	e7f2      	b.n	80054cc <__sinit+0xc>
 80054e6:	bf00      	nop
 80054e8:	0800542d 	.word	0x0800542d
 80054ec:	200047cc 	.word	0x200047cc

080054f0 <_fwalk_sglue>:
 80054f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054f4:	4607      	mov	r7, r0
 80054f6:	4688      	mov	r8, r1
 80054f8:	4614      	mov	r4, r2
 80054fa:	2600      	movs	r6, #0
 80054fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005500:	f1b9 0901 	subs.w	r9, r9, #1
 8005504:	d505      	bpl.n	8005512 <_fwalk_sglue+0x22>
 8005506:	6824      	ldr	r4, [r4, #0]
 8005508:	2c00      	cmp	r4, #0
 800550a:	d1f7      	bne.n	80054fc <_fwalk_sglue+0xc>
 800550c:	4630      	mov	r0, r6
 800550e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005512:	89ab      	ldrh	r3, [r5, #12]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d907      	bls.n	8005528 <_fwalk_sglue+0x38>
 8005518:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800551c:	3301      	adds	r3, #1
 800551e:	d003      	beq.n	8005528 <_fwalk_sglue+0x38>
 8005520:	4629      	mov	r1, r5
 8005522:	4638      	mov	r0, r7
 8005524:	47c0      	blx	r8
 8005526:	4306      	orrs	r6, r0
 8005528:	3568      	adds	r5, #104	@ 0x68
 800552a:	e7e9      	b.n	8005500 <_fwalk_sglue+0x10>

0800552c <iprintf>:
 800552c:	b40f      	push	{r0, r1, r2, r3}
 800552e:	b507      	push	{r0, r1, r2, lr}
 8005530:	4906      	ldr	r1, [pc, #24]	@ (800554c <iprintf+0x20>)
 8005532:	ab04      	add	r3, sp, #16
 8005534:	6808      	ldr	r0, [r1, #0]
 8005536:	f853 2b04 	ldr.w	r2, [r3], #4
 800553a:	6881      	ldr	r1, [r0, #8]
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	f000 fb83 	bl	8005c48 <_vfiprintf_r>
 8005542:	b003      	add	sp, #12
 8005544:	f85d eb04 	ldr.w	lr, [sp], #4
 8005548:	b004      	add	sp, #16
 800554a:	4770      	bx	lr
 800554c:	20000078 	.word	0x20000078

08005550 <sniprintf>:
 8005550:	b40c      	push	{r2, r3}
 8005552:	b530      	push	{r4, r5, lr}
 8005554:	4b17      	ldr	r3, [pc, #92]	@ (80055b4 <sniprintf+0x64>)
 8005556:	1e0c      	subs	r4, r1, #0
 8005558:	681d      	ldr	r5, [r3, #0]
 800555a:	b09d      	sub	sp, #116	@ 0x74
 800555c:	da08      	bge.n	8005570 <sniprintf+0x20>
 800555e:	238b      	movs	r3, #139	@ 0x8b
 8005560:	602b      	str	r3, [r5, #0]
 8005562:	f04f 30ff 	mov.w	r0, #4294967295
 8005566:	b01d      	add	sp, #116	@ 0x74
 8005568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800556c:	b002      	add	sp, #8
 800556e:	4770      	bx	lr
 8005570:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005574:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005578:	bf14      	ite	ne
 800557a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800557e:	4623      	moveq	r3, r4
 8005580:	9304      	str	r3, [sp, #16]
 8005582:	9307      	str	r3, [sp, #28]
 8005584:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005588:	9002      	str	r0, [sp, #8]
 800558a:	9006      	str	r0, [sp, #24]
 800558c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005590:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005592:	ab21      	add	r3, sp, #132	@ 0x84
 8005594:	a902      	add	r1, sp, #8
 8005596:	4628      	mov	r0, r5
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	f000 fa2f 	bl	80059fc <_svfiprintf_r>
 800559e:	1c43      	adds	r3, r0, #1
 80055a0:	bfbc      	itt	lt
 80055a2:	238b      	movlt	r3, #139	@ 0x8b
 80055a4:	602b      	strlt	r3, [r5, #0]
 80055a6:	2c00      	cmp	r4, #0
 80055a8:	d0dd      	beq.n	8005566 <sniprintf+0x16>
 80055aa:	9b02      	ldr	r3, [sp, #8]
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
 80055b0:	e7d9      	b.n	8005566 <sniprintf+0x16>
 80055b2:	bf00      	nop
 80055b4:	20000078 	.word	0x20000078

080055b8 <__sread>:
 80055b8:	b510      	push	{r4, lr}
 80055ba:	460c      	mov	r4, r1
 80055bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c0:	f000 f868 	bl	8005694 <_read_r>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	bfab      	itete	ge
 80055c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80055ca:	89a3      	ldrhlt	r3, [r4, #12]
 80055cc:	181b      	addge	r3, r3, r0
 80055ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80055d2:	bfac      	ite	ge
 80055d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80055d6:	81a3      	strhlt	r3, [r4, #12]
 80055d8:	bd10      	pop	{r4, pc}

080055da <__swrite>:
 80055da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055de:	461f      	mov	r7, r3
 80055e0:	898b      	ldrh	r3, [r1, #12]
 80055e2:	05db      	lsls	r3, r3, #23
 80055e4:	4605      	mov	r5, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	4616      	mov	r6, r2
 80055ea:	d505      	bpl.n	80055f8 <__swrite+0x1e>
 80055ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f0:	2302      	movs	r3, #2
 80055f2:	2200      	movs	r2, #0
 80055f4:	f000 f83c 	bl	8005670 <_lseek_r>
 80055f8:	89a3      	ldrh	r3, [r4, #12]
 80055fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005602:	81a3      	strh	r3, [r4, #12]
 8005604:	4632      	mov	r2, r6
 8005606:	463b      	mov	r3, r7
 8005608:	4628      	mov	r0, r5
 800560a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800560e:	f000 b853 	b.w	80056b8 <_write_r>

08005612 <__sseek>:
 8005612:	b510      	push	{r4, lr}
 8005614:	460c      	mov	r4, r1
 8005616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800561a:	f000 f829 	bl	8005670 <_lseek_r>
 800561e:	1c43      	adds	r3, r0, #1
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	bf15      	itete	ne
 8005624:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005626:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800562a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800562e:	81a3      	strheq	r3, [r4, #12]
 8005630:	bf18      	it	ne
 8005632:	81a3      	strhne	r3, [r4, #12]
 8005634:	bd10      	pop	{r4, pc}

08005636 <__sclose>:
 8005636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800563a:	f000 b809 	b.w	8005650 <_close_r>

0800563e <memset>:
 800563e:	4402      	add	r2, r0
 8005640:	4603      	mov	r3, r0
 8005642:	4293      	cmp	r3, r2
 8005644:	d100      	bne.n	8005648 <memset+0xa>
 8005646:	4770      	bx	lr
 8005648:	f803 1b01 	strb.w	r1, [r3], #1
 800564c:	e7f9      	b.n	8005642 <memset+0x4>
	...

08005650 <_close_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	4d06      	ldr	r5, [pc, #24]	@ (800566c <_close_r+0x1c>)
 8005654:	2300      	movs	r3, #0
 8005656:	4604      	mov	r4, r0
 8005658:	4608      	mov	r0, r1
 800565a:	602b      	str	r3, [r5, #0]
 800565c:	f000 ffe4 	bl	8006628 <_close>
 8005660:	1c43      	adds	r3, r0, #1
 8005662:	d102      	bne.n	800566a <_close_r+0x1a>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	b103      	cbz	r3, 800566a <_close_r+0x1a>
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	bd38      	pop	{r3, r4, r5, pc}
 800566c:	200047d0 	.word	0x200047d0

08005670 <_lseek_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4d07      	ldr	r5, [pc, #28]	@ (8005690 <_lseek_r+0x20>)
 8005674:	4604      	mov	r4, r0
 8005676:	4608      	mov	r0, r1
 8005678:	4611      	mov	r1, r2
 800567a:	2200      	movs	r2, #0
 800567c:	602a      	str	r2, [r5, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	f000 ff93 	bl	80065aa <_lseek>
 8005684:	1c43      	adds	r3, r0, #1
 8005686:	d102      	bne.n	800568e <_lseek_r+0x1e>
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	b103      	cbz	r3, 800568e <_lseek_r+0x1e>
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	bd38      	pop	{r3, r4, r5, pc}
 8005690:	200047d0 	.word	0x200047d0

08005694 <_read_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4d07      	ldr	r5, [pc, #28]	@ (80056b4 <_read_r+0x20>)
 8005698:	4604      	mov	r4, r0
 800569a:	4608      	mov	r0, r1
 800569c:	4611      	mov	r1, r2
 800569e:	2200      	movs	r2, #0
 80056a0:	602a      	str	r2, [r5, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	f000 ff2b 	bl	80064fe <_read>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_read_r+0x1e>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_read_r+0x1e>
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	200047d0 	.word	0x200047d0

080056b8 <_write_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4d07      	ldr	r5, [pc, #28]	@ (80056d8 <_write_r+0x20>)
 80056bc:	4604      	mov	r4, r0
 80056be:	4608      	mov	r0, r1
 80056c0:	4611      	mov	r1, r2
 80056c2:	2200      	movs	r2, #0
 80056c4:	602a      	str	r2, [r5, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f000 ff81 	bl	80065ce <_write>
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	d102      	bne.n	80056d6 <_write_r+0x1e>
 80056d0:	682b      	ldr	r3, [r5, #0]
 80056d2:	b103      	cbz	r3, 80056d6 <_write_r+0x1e>
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	bd38      	pop	{r3, r4, r5, pc}
 80056d8:	200047d0 	.word	0x200047d0

080056dc <__errno>:
 80056dc:	4b01      	ldr	r3, [pc, #4]	@ (80056e4 <__errno+0x8>)
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000078 	.word	0x20000078

080056e8 <__libc_init_array>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005720 <__libc_init_array+0x38>)
 80056ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005724 <__libc_init_array+0x3c>)
 80056ee:	1b64      	subs	r4, r4, r5
 80056f0:	10a4      	asrs	r4, r4, #2
 80056f2:	2600      	movs	r6, #0
 80056f4:	42a6      	cmp	r6, r4
 80056f6:	d109      	bne.n	800570c <__libc_init_array+0x24>
 80056f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005728 <__libc_init_array+0x40>)
 80056fa:	4c0c      	ldr	r4, [pc, #48]	@ (800572c <__libc_init_array+0x44>)
 80056fc:	f001 f958 	bl	80069b0 <_init>
 8005700:	1b64      	subs	r4, r4, r5
 8005702:	10a4      	asrs	r4, r4, #2
 8005704:	2600      	movs	r6, #0
 8005706:	42a6      	cmp	r6, r4
 8005708:	d105      	bne.n	8005716 <__libc_init_array+0x2e>
 800570a:	bd70      	pop	{r4, r5, r6, pc}
 800570c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005710:	4798      	blx	r3
 8005712:	3601      	adds	r6, #1
 8005714:	e7ee      	b.n	80056f4 <__libc_init_array+0xc>
 8005716:	f855 3b04 	ldr.w	r3, [r5], #4
 800571a:	4798      	blx	r3
 800571c:	3601      	adds	r6, #1
 800571e:	e7f2      	b.n	8005706 <__libc_init_array+0x1e>
 8005720:	08006bcc 	.word	0x08006bcc
 8005724:	08006bcc 	.word	0x08006bcc
 8005728:	08006bcc 	.word	0x08006bcc
 800572c:	08006bd0 	.word	0x08006bd0

08005730 <__retarget_lock_init_recursive>:
 8005730:	4770      	bx	lr

08005732 <__retarget_lock_acquire_recursive>:
 8005732:	4770      	bx	lr

08005734 <__retarget_lock_release_recursive>:
 8005734:	4770      	bx	lr

08005736 <memcpy>:
 8005736:	440a      	add	r2, r1
 8005738:	4291      	cmp	r1, r2
 800573a:	f100 33ff 	add.w	r3, r0, #4294967295
 800573e:	d100      	bne.n	8005742 <memcpy+0xc>
 8005740:	4770      	bx	lr
 8005742:	b510      	push	{r4, lr}
 8005744:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005748:	f803 4f01 	strb.w	r4, [r3, #1]!
 800574c:	4291      	cmp	r1, r2
 800574e:	d1f9      	bne.n	8005744 <memcpy+0xe>
 8005750:	bd10      	pop	{r4, pc}
	...

08005754 <_free_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4605      	mov	r5, r0
 8005758:	2900      	cmp	r1, #0
 800575a:	d041      	beq.n	80057e0 <_free_r+0x8c>
 800575c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005760:	1f0c      	subs	r4, r1, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	bfb8      	it	lt
 8005766:	18e4      	addlt	r4, r4, r3
 8005768:	f000 f8e0 	bl	800592c <__malloc_lock>
 800576c:	4a1d      	ldr	r2, [pc, #116]	@ (80057e4 <_free_r+0x90>)
 800576e:	6813      	ldr	r3, [r2, #0]
 8005770:	b933      	cbnz	r3, 8005780 <_free_r+0x2c>
 8005772:	6063      	str	r3, [r4, #4]
 8005774:	6014      	str	r4, [r2, #0]
 8005776:	4628      	mov	r0, r5
 8005778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800577c:	f000 b8dc 	b.w	8005938 <__malloc_unlock>
 8005780:	42a3      	cmp	r3, r4
 8005782:	d908      	bls.n	8005796 <_free_r+0x42>
 8005784:	6820      	ldr	r0, [r4, #0]
 8005786:	1821      	adds	r1, r4, r0
 8005788:	428b      	cmp	r3, r1
 800578a:	bf01      	itttt	eq
 800578c:	6819      	ldreq	r1, [r3, #0]
 800578e:	685b      	ldreq	r3, [r3, #4]
 8005790:	1809      	addeq	r1, r1, r0
 8005792:	6021      	streq	r1, [r4, #0]
 8005794:	e7ed      	b.n	8005772 <_free_r+0x1e>
 8005796:	461a      	mov	r2, r3
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	b10b      	cbz	r3, 80057a0 <_free_r+0x4c>
 800579c:	42a3      	cmp	r3, r4
 800579e:	d9fa      	bls.n	8005796 <_free_r+0x42>
 80057a0:	6811      	ldr	r1, [r2, #0]
 80057a2:	1850      	adds	r0, r2, r1
 80057a4:	42a0      	cmp	r0, r4
 80057a6:	d10b      	bne.n	80057c0 <_free_r+0x6c>
 80057a8:	6820      	ldr	r0, [r4, #0]
 80057aa:	4401      	add	r1, r0
 80057ac:	1850      	adds	r0, r2, r1
 80057ae:	4283      	cmp	r3, r0
 80057b0:	6011      	str	r1, [r2, #0]
 80057b2:	d1e0      	bne.n	8005776 <_free_r+0x22>
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	6053      	str	r3, [r2, #4]
 80057ba:	4408      	add	r0, r1
 80057bc:	6010      	str	r0, [r2, #0]
 80057be:	e7da      	b.n	8005776 <_free_r+0x22>
 80057c0:	d902      	bls.n	80057c8 <_free_r+0x74>
 80057c2:	230c      	movs	r3, #12
 80057c4:	602b      	str	r3, [r5, #0]
 80057c6:	e7d6      	b.n	8005776 <_free_r+0x22>
 80057c8:	6820      	ldr	r0, [r4, #0]
 80057ca:	1821      	adds	r1, r4, r0
 80057cc:	428b      	cmp	r3, r1
 80057ce:	bf04      	itt	eq
 80057d0:	6819      	ldreq	r1, [r3, #0]
 80057d2:	685b      	ldreq	r3, [r3, #4]
 80057d4:	6063      	str	r3, [r4, #4]
 80057d6:	bf04      	itt	eq
 80057d8:	1809      	addeq	r1, r1, r0
 80057da:	6021      	streq	r1, [r4, #0]
 80057dc:	6054      	str	r4, [r2, #4]
 80057de:	e7ca      	b.n	8005776 <_free_r+0x22>
 80057e0:	bd38      	pop	{r3, r4, r5, pc}
 80057e2:	bf00      	nop
 80057e4:	200047dc 	.word	0x200047dc

080057e8 <sbrk_aligned>:
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	4e0f      	ldr	r6, [pc, #60]	@ (8005828 <sbrk_aligned+0x40>)
 80057ec:	460c      	mov	r4, r1
 80057ee:	6831      	ldr	r1, [r6, #0]
 80057f0:	4605      	mov	r5, r0
 80057f2:	b911      	cbnz	r1, 80057fa <sbrk_aligned+0x12>
 80057f4:	f000 fd7c 	bl	80062f0 <_sbrk_r>
 80057f8:	6030      	str	r0, [r6, #0]
 80057fa:	4621      	mov	r1, r4
 80057fc:	4628      	mov	r0, r5
 80057fe:	f000 fd77 	bl	80062f0 <_sbrk_r>
 8005802:	1c43      	adds	r3, r0, #1
 8005804:	d103      	bne.n	800580e <sbrk_aligned+0x26>
 8005806:	f04f 34ff 	mov.w	r4, #4294967295
 800580a:	4620      	mov	r0, r4
 800580c:	bd70      	pop	{r4, r5, r6, pc}
 800580e:	1cc4      	adds	r4, r0, #3
 8005810:	f024 0403 	bic.w	r4, r4, #3
 8005814:	42a0      	cmp	r0, r4
 8005816:	d0f8      	beq.n	800580a <sbrk_aligned+0x22>
 8005818:	1a21      	subs	r1, r4, r0
 800581a:	4628      	mov	r0, r5
 800581c:	f000 fd68 	bl	80062f0 <_sbrk_r>
 8005820:	3001      	adds	r0, #1
 8005822:	d1f2      	bne.n	800580a <sbrk_aligned+0x22>
 8005824:	e7ef      	b.n	8005806 <sbrk_aligned+0x1e>
 8005826:	bf00      	nop
 8005828:	200047d8 	.word	0x200047d8

0800582c <_malloc_r>:
 800582c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005830:	1ccd      	adds	r5, r1, #3
 8005832:	f025 0503 	bic.w	r5, r5, #3
 8005836:	3508      	adds	r5, #8
 8005838:	2d0c      	cmp	r5, #12
 800583a:	bf38      	it	cc
 800583c:	250c      	movcc	r5, #12
 800583e:	2d00      	cmp	r5, #0
 8005840:	4606      	mov	r6, r0
 8005842:	db01      	blt.n	8005848 <_malloc_r+0x1c>
 8005844:	42a9      	cmp	r1, r5
 8005846:	d904      	bls.n	8005852 <_malloc_r+0x26>
 8005848:	230c      	movs	r3, #12
 800584a:	6033      	str	r3, [r6, #0]
 800584c:	2000      	movs	r0, #0
 800584e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005852:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005928 <_malloc_r+0xfc>
 8005856:	f000 f869 	bl	800592c <__malloc_lock>
 800585a:	f8d8 3000 	ldr.w	r3, [r8]
 800585e:	461c      	mov	r4, r3
 8005860:	bb44      	cbnz	r4, 80058b4 <_malloc_r+0x88>
 8005862:	4629      	mov	r1, r5
 8005864:	4630      	mov	r0, r6
 8005866:	f7ff ffbf 	bl	80057e8 <sbrk_aligned>
 800586a:	1c43      	adds	r3, r0, #1
 800586c:	4604      	mov	r4, r0
 800586e:	d158      	bne.n	8005922 <_malloc_r+0xf6>
 8005870:	f8d8 4000 	ldr.w	r4, [r8]
 8005874:	4627      	mov	r7, r4
 8005876:	2f00      	cmp	r7, #0
 8005878:	d143      	bne.n	8005902 <_malloc_r+0xd6>
 800587a:	2c00      	cmp	r4, #0
 800587c:	d04b      	beq.n	8005916 <_malloc_r+0xea>
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	4639      	mov	r1, r7
 8005882:	4630      	mov	r0, r6
 8005884:	eb04 0903 	add.w	r9, r4, r3
 8005888:	f000 fd32 	bl	80062f0 <_sbrk_r>
 800588c:	4581      	cmp	r9, r0
 800588e:	d142      	bne.n	8005916 <_malloc_r+0xea>
 8005890:	6821      	ldr	r1, [r4, #0]
 8005892:	1a6d      	subs	r5, r5, r1
 8005894:	4629      	mov	r1, r5
 8005896:	4630      	mov	r0, r6
 8005898:	f7ff ffa6 	bl	80057e8 <sbrk_aligned>
 800589c:	3001      	adds	r0, #1
 800589e:	d03a      	beq.n	8005916 <_malloc_r+0xea>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	442b      	add	r3, r5
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	f8d8 3000 	ldr.w	r3, [r8]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	bb62      	cbnz	r2, 8005908 <_malloc_r+0xdc>
 80058ae:	f8c8 7000 	str.w	r7, [r8]
 80058b2:	e00f      	b.n	80058d4 <_malloc_r+0xa8>
 80058b4:	6822      	ldr	r2, [r4, #0]
 80058b6:	1b52      	subs	r2, r2, r5
 80058b8:	d420      	bmi.n	80058fc <_malloc_r+0xd0>
 80058ba:	2a0b      	cmp	r2, #11
 80058bc:	d917      	bls.n	80058ee <_malloc_r+0xc2>
 80058be:	1961      	adds	r1, r4, r5
 80058c0:	42a3      	cmp	r3, r4
 80058c2:	6025      	str	r5, [r4, #0]
 80058c4:	bf18      	it	ne
 80058c6:	6059      	strne	r1, [r3, #4]
 80058c8:	6863      	ldr	r3, [r4, #4]
 80058ca:	bf08      	it	eq
 80058cc:	f8c8 1000 	streq.w	r1, [r8]
 80058d0:	5162      	str	r2, [r4, r5]
 80058d2:	604b      	str	r3, [r1, #4]
 80058d4:	4630      	mov	r0, r6
 80058d6:	f000 f82f 	bl	8005938 <__malloc_unlock>
 80058da:	f104 000b 	add.w	r0, r4, #11
 80058de:	1d23      	adds	r3, r4, #4
 80058e0:	f020 0007 	bic.w	r0, r0, #7
 80058e4:	1ac2      	subs	r2, r0, r3
 80058e6:	bf1c      	itt	ne
 80058e8:	1a1b      	subne	r3, r3, r0
 80058ea:	50a3      	strne	r3, [r4, r2]
 80058ec:	e7af      	b.n	800584e <_malloc_r+0x22>
 80058ee:	6862      	ldr	r2, [r4, #4]
 80058f0:	42a3      	cmp	r3, r4
 80058f2:	bf0c      	ite	eq
 80058f4:	f8c8 2000 	streq.w	r2, [r8]
 80058f8:	605a      	strne	r2, [r3, #4]
 80058fa:	e7eb      	b.n	80058d4 <_malloc_r+0xa8>
 80058fc:	4623      	mov	r3, r4
 80058fe:	6864      	ldr	r4, [r4, #4]
 8005900:	e7ae      	b.n	8005860 <_malloc_r+0x34>
 8005902:	463c      	mov	r4, r7
 8005904:	687f      	ldr	r7, [r7, #4]
 8005906:	e7b6      	b.n	8005876 <_malloc_r+0x4a>
 8005908:	461a      	mov	r2, r3
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	42a3      	cmp	r3, r4
 800590e:	d1fb      	bne.n	8005908 <_malloc_r+0xdc>
 8005910:	2300      	movs	r3, #0
 8005912:	6053      	str	r3, [r2, #4]
 8005914:	e7de      	b.n	80058d4 <_malloc_r+0xa8>
 8005916:	230c      	movs	r3, #12
 8005918:	6033      	str	r3, [r6, #0]
 800591a:	4630      	mov	r0, r6
 800591c:	f000 f80c 	bl	8005938 <__malloc_unlock>
 8005920:	e794      	b.n	800584c <_malloc_r+0x20>
 8005922:	6005      	str	r5, [r0, #0]
 8005924:	e7d6      	b.n	80058d4 <_malloc_r+0xa8>
 8005926:	bf00      	nop
 8005928:	200047dc 	.word	0x200047dc

0800592c <__malloc_lock>:
 800592c:	4801      	ldr	r0, [pc, #4]	@ (8005934 <__malloc_lock+0x8>)
 800592e:	f7ff bf00 	b.w	8005732 <__retarget_lock_acquire_recursive>
 8005932:	bf00      	nop
 8005934:	200047d4 	.word	0x200047d4

08005938 <__malloc_unlock>:
 8005938:	4801      	ldr	r0, [pc, #4]	@ (8005940 <__malloc_unlock+0x8>)
 800593a:	f7ff befb 	b.w	8005734 <__retarget_lock_release_recursive>
 800593e:	bf00      	nop
 8005940:	200047d4 	.word	0x200047d4

08005944 <__ssputs_r>:
 8005944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005948:	688e      	ldr	r6, [r1, #8]
 800594a:	461f      	mov	r7, r3
 800594c:	42be      	cmp	r6, r7
 800594e:	680b      	ldr	r3, [r1, #0]
 8005950:	4682      	mov	sl, r0
 8005952:	460c      	mov	r4, r1
 8005954:	4690      	mov	r8, r2
 8005956:	d82d      	bhi.n	80059b4 <__ssputs_r+0x70>
 8005958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800595c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005960:	d026      	beq.n	80059b0 <__ssputs_r+0x6c>
 8005962:	6965      	ldr	r5, [r4, #20]
 8005964:	6909      	ldr	r1, [r1, #16]
 8005966:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800596a:	eba3 0901 	sub.w	r9, r3, r1
 800596e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005972:	1c7b      	adds	r3, r7, #1
 8005974:	444b      	add	r3, r9
 8005976:	106d      	asrs	r5, r5, #1
 8005978:	429d      	cmp	r5, r3
 800597a:	bf38      	it	cc
 800597c:	461d      	movcc	r5, r3
 800597e:	0553      	lsls	r3, r2, #21
 8005980:	d527      	bpl.n	80059d2 <__ssputs_r+0x8e>
 8005982:	4629      	mov	r1, r5
 8005984:	f7ff ff52 	bl	800582c <_malloc_r>
 8005988:	4606      	mov	r6, r0
 800598a:	b360      	cbz	r0, 80059e6 <__ssputs_r+0xa2>
 800598c:	6921      	ldr	r1, [r4, #16]
 800598e:	464a      	mov	r2, r9
 8005990:	f7ff fed1 	bl	8005736 <memcpy>
 8005994:	89a3      	ldrh	r3, [r4, #12]
 8005996:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800599a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800599e:	81a3      	strh	r3, [r4, #12]
 80059a0:	6126      	str	r6, [r4, #16]
 80059a2:	6165      	str	r5, [r4, #20]
 80059a4:	444e      	add	r6, r9
 80059a6:	eba5 0509 	sub.w	r5, r5, r9
 80059aa:	6026      	str	r6, [r4, #0]
 80059ac:	60a5      	str	r5, [r4, #8]
 80059ae:	463e      	mov	r6, r7
 80059b0:	42be      	cmp	r6, r7
 80059b2:	d900      	bls.n	80059b6 <__ssputs_r+0x72>
 80059b4:	463e      	mov	r6, r7
 80059b6:	6820      	ldr	r0, [r4, #0]
 80059b8:	4632      	mov	r2, r6
 80059ba:	4641      	mov	r1, r8
 80059bc:	f000 fc7e 	bl	80062bc <memmove>
 80059c0:	68a3      	ldr	r3, [r4, #8]
 80059c2:	1b9b      	subs	r3, r3, r6
 80059c4:	60a3      	str	r3, [r4, #8]
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	4433      	add	r3, r6
 80059ca:	6023      	str	r3, [r4, #0]
 80059cc:	2000      	movs	r0, #0
 80059ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d2:	462a      	mov	r2, r5
 80059d4:	f000 fc9c 	bl	8006310 <_realloc_r>
 80059d8:	4606      	mov	r6, r0
 80059da:	2800      	cmp	r0, #0
 80059dc:	d1e0      	bne.n	80059a0 <__ssputs_r+0x5c>
 80059de:	6921      	ldr	r1, [r4, #16]
 80059e0:	4650      	mov	r0, sl
 80059e2:	f7ff feb7 	bl	8005754 <_free_r>
 80059e6:	230c      	movs	r3, #12
 80059e8:	f8ca 3000 	str.w	r3, [sl]
 80059ec:	89a3      	ldrh	r3, [r4, #12]
 80059ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059f2:	81a3      	strh	r3, [r4, #12]
 80059f4:	f04f 30ff 	mov.w	r0, #4294967295
 80059f8:	e7e9      	b.n	80059ce <__ssputs_r+0x8a>
	...

080059fc <_svfiprintf_r>:
 80059fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a00:	4698      	mov	r8, r3
 8005a02:	898b      	ldrh	r3, [r1, #12]
 8005a04:	061b      	lsls	r3, r3, #24
 8005a06:	b09d      	sub	sp, #116	@ 0x74
 8005a08:	4607      	mov	r7, r0
 8005a0a:	460d      	mov	r5, r1
 8005a0c:	4614      	mov	r4, r2
 8005a0e:	d510      	bpl.n	8005a32 <_svfiprintf_r+0x36>
 8005a10:	690b      	ldr	r3, [r1, #16]
 8005a12:	b973      	cbnz	r3, 8005a32 <_svfiprintf_r+0x36>
 8005a14:	2140      	movs	r1, #64	@ 0x40
 8005a16:	f7ff ff09 	bl	800582c <_malloc_r>
 8005a1a:	6028      	str	r0, [r5, #0]
 8005a1c:	6128      	str	r0, [r5, #16]
 8005a1e:	b930      	cbnz	r0, 8005a2e <_svfiprintf_r+0x32>
 8005a20:	230c      	movs	r3, #12
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295
 8005a28:	b01d      	add	sp, #116	@ 0x74
 8005a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2e:	2340      	movs	r3, #64	@ 0x40
 8005a30:	616b      	str	r3, [r5, #20]
 8005a32:	2300      	movs	r3, #0
 8005a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a36:	2320      	movs	r3, #32
 8005a38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a40:	2330      	movs	r3, #48	@ 0x30
 8005a42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005be0 <_svfiprintf_r+0x1e4>
 8005a46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a4a:	f04f 0901 	mov.w	r9, #1
 8005a4e:	4623      	mov	r3, r4
 8005a50:	469a      	mov	sl, r3
 8005a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a56:	b10a      	cbz	r2, 8005a5c <_svfiprintf_r+0x60>
 8005a58:	2a25      	cmp	r2, #37	@ 0x25
 8005a5a:	d1f9      	bne.n	8005a50 <_svfiprintf_r+0x54>
 8005a5c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a60:	d00b      	beq.n	8005a7a <_svfiprintf_r+0x7e>
 8005a62:	465b      	mov	r3, fp
 8005a64:	4622      	mov	r2, r4
 8005a66:	4629      	mov	r1, r5
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f7ff ff6b 	bl	8005944 <__ssputs_r>
 8005a6e:	3001      	adds	r0, #1
 8005a70:	f000 80a7 	beq.w	8005bc2 <_svfiprintf_r+0x1c6>
 8005a74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a76:	445a      	add	r2, fp
 8005a78:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 809f 	beq.w	8005bc2 <_svfiprintf_r+0x1c6>
 8005a84:	2300      	movs	r3, #0
 8005a86:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a8e:	f10a 0a01 	add.w	sl, sl, #1
 8005a92:	9304      	str	r3, [sp, #16]
 8005a94:	9307      	str	r3, [sp, #28]
 8005a96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a9c:	4654      	mov	r4, sl
 8005a9e:	2205      	movs	r2, #5
 8005aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa4:	484e      	ldr	r0, [pc, #312]	@ (8005be0 <_svfiprintf_r+0x1e4>)
 8005aa6:	f7fa fbab 	bl	8000200 <memchr>
 8005aaa:	9a04      	ldr	r2, [sp, #16]
 8005aac:	b9d8      	cbnz	r0, 8005ae6 <_svfiprintf_r+0xea>
 8005aae:	06d0      	lsls	r0, r2, #27
 8005ab0:	bf44      	itt	mi
 8005ab2:	2320      	movmi	r3, #32
 8005ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ab8:	0711      	lsls	r1, r2, #28
 8005aba:	bf44      	itt	mi
 8005abc:	232b      	movmi	r3, #43	@ 0x2b
 8005abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ac6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ac8:	d015      	beq.n	8005af6 <_svfiprintf_r+0xfa>
 8005aca:	9a07      	ldr	r2, [sp, #28]
 8005acc:	4654      	mov	r4, sl
 8005ace:	2000      	movs	r0, #0
 8005ad0:	f04f 0c0a 	mov.w	ip, #10
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ada:	3b30      	subs	r3, #48	@ 0x30
 8005adc:	2b09      	cmp	r3, #9
 8005ade:	d94b      	bls.n	8005b78 <_svfiprintf_r+0x17c>
 8005ae0:	b1b0      	cbz	r0, 8005b10 <_svfiprintf_r+0x114>
 8005ae2:	9207      	str	r2, [sp, #28]
 8005ae4:	e014      	b.n	8005b10 <_svfiprintf_r+0x114>
 8005ae6:	eba0 0308 	sub.w	r3, r0, r8
 8005aea:	fa09 f303 	lsl.w	r3, r9, r3
 8005aee:	4313      	orrs	r3, r2
 8005af0:	9304      	str	r3, [sp, #16]
 8005af2:	46a2      	mov	sl, r4
 8005af4:	e7d2      	b.n	8005a9c <_svfiprintf_r+0xa0>
 8005af6:	9b03      	ldr	r3, [sp, #12]
 8005af8:	1d19      	adds	r1, r3, #4
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	9103      	str	r1, [sp, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bfbb      	ittet	lt
 8005b02:	425b      	neglt	r3, r3
 8005b04:	f042 0202 	orrlt.w	r2, r2, #2
 8005b08:	9307      	strge	r3, [sp, #28]
 8005b0a:	9307      	strlt	r3, [sp, #28]
 8005b0c:	bfb8      	it	lt
 8005b0e:	9204      	strlt	r2, [sp, #16]
 8005b10:	7823      	ldrb	r3, [r4, #0]
 8005b12:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b14:	d10a      	bne.n	8005b2c <_svfiprintf_r+0x130>
 8005b16:	7863      	ldrb	r3, [r4, #1]
 8005b18:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b1a:	d132      	bne.n	8005b82 <_svfiprintf_r+0x186>
 8005b1c:	9b03      	ldr	r3, [sp, #12]
 8005b1e:	1d1a      	adds	r2, r3, #4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	9203      	str	r2, [sp, #12]
 8005b24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b28:	3402      	adds	r4, #2
 8005b2a:	9305      	str	r3, [sp, #20]
 8005b2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005bf0 <_svfiprintf_r+0x1f4>
 8005b30:	7821      	ldrb	r1, [r4, #0]
 8005b32:	2203      	movs	r2, #3
 8005b34:	4650      	mov	r0, sl
 8005b36:	f7fa fb63 	bl	8000200 <memchr>
 8005b3a:	b138      	cbz	r0, 8005b4c <_svfiprintf_r+0x150>
 8005b3c:	9b04      	ldr	r3, [sp, #16]
 8005b3e:	eba0 000a 	sub.w	r0, r0, sl
 8005b42:	2240      	movs	r2, #64	@ 0x40
 8005b44:	4082      	lsls	r2, r0
 8005b46:	4313      	orrs	r3, r2
 8005b48:	3401      	adds	r4, #1
 8005b4a:	9304      	str	r3, [sp, #16]
 8005b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b50:	4824      	ldr	r0, [pc, #144]	@ (8005be4 <_svfiprintf_r+0x1e8>)
 8005b52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b56:	2206      	movs	r2, #6
 8005b58:	f7fa fb52 	bl	8000200 <memchr>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d036      	beq.n	8005bce <_svfiprintf_r+0x1d2>
 8005b60:	4b21      	ldr	r3, [pc, #132]	@ (8005be8 <_svfiprintf_r+0x1ec>)
 8005b62:	bb1b      	cbnz	r3, 8005bac <_svfiprintf_r+0x1b0>
 8005b64:	9b03      	ldr	r3, [sp, #12]
 8005b66:	3307      	adds	r3, #7
 8005b68:	f023 0307 	bic.w	r3, r3, #7
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	9303      	str	r3, [sp, #12]
 8005b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b72:	4433      	add	r3, r6
 8005b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b76:	e76a      	b.n	8005a4e <_svfiprintf_r+0x52>
 8005b78:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	2001      	movs	r0, #1
 8005b80:	e7a8      	b.n	8005ad4 <_svfiprintf_r+0xd8>
 8005b82:	2300      	movs	r3, #0
 8005b84:	3401      	adds	r4, #1
 8005b86:	9305      	str	r3, [sp, #20]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	f04f 0c0a 	mov.w	ip, #10
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b94:	3a30      	subs	r2, #48	@ 0x30
 8005b96:	2a09      	cmp	r2, #9
 8005b98:	d903      	bls.n	8005ba2 <_svfiprintf_r+0x1a6>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0c6      	beq.n	8005b2c <_svfiprintf_r+0x130>
 8005b9e:	9105      	str	r1, [sp, #20]
 8005ba0:	e7c4      	b.n	8005b2c <_svfiprintf_r+0x130>
 8005ba2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e7f0      	b.n	8005b8e <_svfiprintf_r+0x192>
 8005bac:	ab03      	add	r3, sp, #12
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	462a      	mov	r2, r5
 8005bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8005bec <_svfiprintf_r+0x1f0>)
 8005bb4:	a904      	add	r1, sp, #16
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	f3af 8000 	nop.w
 8005bbc:	1c42      	adds	r2, r0, #1
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	d1d6      	bne.n	8005b70 <_svfiprintf_r+0x174>
 8005bc2:	89ab      	ldrh	r3, [r5, #12]
 8005bc4:	065b      	lsls	r3, r3, #25
 8005bc6:	f53f af2d 	bmi.w	8005a24 <_svfiprintf_r+0x28>
 8005bca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bcc:	e72c      	b.n	8005a28 <_svfiprintf_r+0x2c>
 8005bce:	ab03      	add	r3, sp, #12
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	462a      	mov	r2, r5
 8005bd4:	4b05      	ldr	r3, [pc, #20]	@ (8005bec <_svfiprintf_r+0x1f0>)
 8005bd6:	a904      	add	r1, sp, #16
 8005bd8:	4638      	mov	r0, r7
 8005bda:	f000 f9bb 	bl	8005f54 <_printf_i>
 8005bde:	e7ed      	b.n	8005bbc <_svfiprintf_r+0x1c0>
 8005be0:	08006b74 	.word	0x08006b74
 8005be4:	08006b7e 	.word	0x08006b7e
 8005be8:	00000000 	.word	0x00000000
 8005bec:	08005945 	.word	0x08005945
 8005bf0:	08006b7a 	.word	0x08006b7a

08005bf4 <__sfputc_r>:
 8005bf4:	6893      	ldr	r3, [r2, #8]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	b410      	push	{r4}
 8005bfc:	6093      	str	r3, [r2, #8]
 8005bfe:	da08      	bge.n	8005c12 <__sfputc_r+0x1e>
 8005c00:	6994      	ldr	r4, [r2, #24]
 8005c02:	42a3      	cmp	r3, r4
 8005c04:	db01      	blt.n	8005c0a <__sfputc_r+0x16>
 8005c06:	290a      	cmp	r1, #10
 8005c08:	d103      	bne.n	8005c12 <__sfputc_r+0x1e>
 8005c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c0e:	f000 bac1 	b.w	8006194 <__swbuf_r>
 8005c12:	6813      	ldr	r3, [r2, #0]
 8005c14:	1c58      	adds	r0, r3, #1
 8005c16:	6010      	str	r0, [r2, #0]
 8005c18:	7019      	strb	r1, [r3, #0]
 8005c1a:	4608      	mov	r0, r1
 8005c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <__sfputs_r>:
 8005c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c24:	4606      	mov	r6, r0
 8005c26:	460f      	mov	r7, r1
 8005c28:	4614      	mov	r4, r2
 8005c2a:	18d5      	adds	r5, r2, r3
 8005c2c:	42ac      	cmp	r4, r5
 8005c2e:	d101      	bne.n	8005c34 <__sfputs_r+0x12>
 8005c30:	2000      	movs	r0, #0
 8005c32:	e007      	b.n	8005c44 <__sfputs_r+0x22>
 8005c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c38:	463a      	mov	r2, r7
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f7ff ffda 	bl	8005bf4 <__sfputc_r>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d1f3      	bne.n	8005c2c <__sfputs_r+0xa>
 8005c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c48 <_vfiprintf_r>:
 8005c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4c:	460d      	mov	r5, r1
 8005c4e:	b09d      	sub	sp, #116	@ 0x74
 8005c50:	4614      	mov	r4, r2
 8005c52:	4698      	mov	r8, r3
 8005c54:	4606      	mov	r6, r0
 8005c56:	b118      	cbz	r0, 8005c60 <_vfiprintf_r+0x18>
 8005c58:	6a03      	ldr	r3, [r0, #32]
 8005c5a:	b90b      	cbnz	r3, 8005c60 <_vfiprintf_r+0x18>
 8005c5c:	f7ff fc30 	bl	80054c0 <__sinit>
 8005c60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c62:	07d9      	lsls	r1, r3, #31
 8005c64:	d405      	bmi.n	8005c72 <_vfiprintf_r+0x2a>
 8005c66:	89ab      	ldrh	r3, [r5, #12]
 8005c68:	059a      	lsls	r2, r3, #22
 8005c6a:	d402      	bmi.n	8005c72 <_vfiprintf_r+0x2a>
 8005c6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c6e:	f7ff fd60 	bl	8005732 <__retarget_lock_acquire_recursive>
 8005c72:	89ab      	ldrh	r3, [r5, #12]
 8005c74:	071b      	lsls	r3, r3, #28
 8005c76:	d501      	bpl.n	8005c7c <_vfiprintf_r+0x34>
 8005c78:	692b      	ldr	r3, [r5, #16]
 8005c7a:	b99b      	cbnz	r3, 8005ca4 <_vfiprintf_r+0x5c>
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f000 fac6 	bl	8006210 <__swsetup_r>
 8005c84:	b170      	cbz	r0, 8005ca4 <_vfiprintf_r+0x5c>
 8005c86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c88:	07dc      	lsls	r4, r3, #31
 8005c8a:	d504      	bpl.n	8005c96 <_vfiprintf_r+0x4e>
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c90:	b01d      	add	sp, #116	@ 0x74
 8005c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c96:	89ab      	ldrh	r3, [r5, #12]
 8005c98:	0598      	lsls	r0, r3, #22
 8005c9a:	d4f7      	bmi.n	8005c8c <_vfiprintf_r+0x44>
 8005c9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c9e:	f7ff fd49 	bl	8005734 <__retarget_lock_release_recursive>
 8005ca2:	e7f3      	b.n	8005c8c <_vfiprintf_r+0x44>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ca8:	2320      	movs	r3, #32
 8005caa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cae:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cb2:	2330      	movs	r3, #48	@ 0x30
 8005cb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e64 <_vfiprintf_r+0x21c>
 8005cb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cbc:	f04f 0901 	mov.w	r9, #1
 8005cc0:	4623      	mov	r3, r4
 8005cc2:	469a      	mov	sl, r3
 8005cc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cc8:	b10a      	cbz	r2, 8005cce <_vfiprintf_r+0x86>
 8005cca:	2a25      	cmp	r2, #37	@ 0x25
 8005ccc:	d1f9      	bne.n	8005cc2 <_vfiprintf_r+0x7a>
 8005cce:	ebba 0b04 	subs.w	fp, sl, r4
 8005cd2:	d00b      	beq.n	8005cec <_vfiprintf_r+0xa4>
 8005cd4:	465b      	mov	r3, fp
 8005cd6:	4622      	mov	r2, r4
 8005cd8:	4629      	mov	r1, r5
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f7ff ffa1 	bl	8005c22 <__sfputs_r>
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	f000 80a7 	beq.w	8005e34 <_vfiprintf_r+0x1ec>
 8005ce6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ce8:	445a      	add	r2, fp
 8005cea:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cec:	f89a 3000 	ldrb.w	r3, [sl]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 809f 	beq.w	8005e34 <_vfiprintf_r+0x1ec>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d00:	f10a 0a01 	add.w	sl, sl, #1
 8005d04:	9304      	str	r3, [sp, #16]
 8005d06:	9307      	str	r3, [sp, #28]
 8005d08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d0e:	4654      	mov	r4, sl
 8005d10:	2205      	movs	r2, #5
 8005d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d16:	4853      	ldr	r0, [pc, #332]	@ (8005e64 <_vfiprintf_r+0x21c>)
 8005d18:	f7fa fa72 	bl	8000200 <memchr>
 8005d1c:	9a04      	ldr	r2, [sp, #16]
 8005d1e:	b9d8      	cbnz	r0, 8005d58 <_vfiprintf_r+0x110>
 8005d20:	06d1      	lsls	r1, r2, #27
 8005d22:	bf44      	itt	mi
 8005d24:	2320      	movmi	r3, #32
 8005d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d2a:	0713      	lsls	r3, r2, #28
 8005d2c:	bf44      	itt	mi
 8005d2e:	232b      	movmi	r3, #43	@ 0x2b
 8005d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d34:	f89a 3000 	ldrb.w	r3, [sl]
 8005d38:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d3a:	d015      	beq.n	8005d68 <_vfiprintf_r+0x120>
 8005d3c:	9a07      	ldr	r2, [sp, #28]
 8005d3e:	4654      	mov	r4, sl
 8005d40:	2000      	movs	r0, #0
 8005d42:	f04f 0c0a 	mov.w	ip, #10
 8005d46:	4621      	mov	r1, r4
 8005d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d4c:	3b30      	subs	r3, #48	@ 0x30
 8005d4e:	2b09      	cmp	r3, #9
 8005d50:	d94b      	bls.n	8005dea <_vfiprintf_r+0x1a2>
 8005d52:	b1b0      	cbz	r0, 8005d82 <_vfiprintf_r+0x13a>
 8005d54:	9207      	str	r2, [sp, #28]
 8005d56:	e014      	b.n	8005d82 <_vfiprintf_r+0x13a>
 8005d58:	eba0 0308 	sub.w	r3, r0, r8
 8005d5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005d60:	4313      	orrs	r3, r2
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	46a2      	mov	sl, r4
 8005d66:	e7d2      	b.n	8005d0e <_vfiprintf_r+0xc6>
 8005d68:	9b03      	ldr	r3, [sp, #12]
 8005d6a:	1d19      	adds	r1, r3, #4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	9103      	str	r1, [sp, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bfbb      	ittet	lt
 8005d74:	425b      	neglt	r3, r3
 8005d76:	f042 0202 	orrlt.w	r2, r2, #2
 8005d7a:	9307      	strge	r3, [sp, #28]
 8005d7c:	9307      	strlt	r3, [sp, #28]
 8005d7e:	bfb8      	it	lt
 8005d80:	9204      	strlt	r2, [sp, #16]
 8005d82:	7823      	ldrb	r3, [r4, #0]
 8005d84:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d86:	d10a      	bne.n	8005d9e <_vfiprintf_r+0x156>
 8005d88:	7863      	ldrb	r3, [r4, #1]
 8005d8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d8c:	d132      	bne.n	8005df4 <_vfiprintf_r+0x1ac>
 8005d8e:	9b03      	ldr	r3, [sp, #12]
 8005d90:	1d1a      	adds	r2, r3, #4
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	9203      	str	r2, [sp, #12]
 8005d96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d9a:	3402      	adds	r4, #2
 8005d9c:	9305      	str	r3, [sp, #20]
 8005d9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e74 <_vfiprintf_r+0x22c>
 8005da2:	7821      	ldrb	r1, [r4, #0]
 8005da4:	2203      	movs	r2, #3
 8005da6:	4650      	mov	r0, sl
 8005da8:	f7fa fa2a 	bl	8000200 <memchr>
 8005dac:	b138      	cbz	r0, 8005dbe <_vfiprintf_r+0x176>
 8005dae:	9b04      	ldr	r3, [sp, #16]
 8005db0:	eba0 000a 	sub.w	r0, r0, sl
 8005db4:	2240      	movs	r2, #64	@ 0x40
 8005db6:	4082      	lsls	r2, r0
 8005db8:	4313      	orrs	r3, r2
 8005dba:	3401      	adds	r4, #1
 8005dbc:	9304      	str	r3, [sp, #16]
 8005dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dc2:	4829      	ldr	r0, [pc, #164]	@ (8005e68 <_vfiprintf_r+0x220>)
 8005dc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dc8:	2206      	movs	r2, #6
 8005dca:	f7fa fa19 	bl	8000200 <memchr>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	d03f      	beq.n	8005e52 <_vfiprintf_r+0x20a>
 8005dd2:	4b26      	ldr	r3, [pc, #152]	@ (8005e6c <_vfiprintf_r+0x224>)
 8005dd4:	bb1b      	cbnz	r3, 8005e1e <_vfiprintf_r+0x1d6>
 8005dd6:	9b03      	ldr	r3, [sp, #12]
 8005dd8:	3307      	adds	r3, #7
 8005dda:	f023 0307 	bic.w	r3, r3, #7
 8005dde:	3308      	adds	r3, #8
 8005de0:	9303      	str	r3, [sp, #12]
 8005de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005de4:	443b      	add	r3, r7
 8005de6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005de8:	e76a      	b.n	8005cc0 <_vfiprintf_r+0x78>
 8005dea:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dee:	460c      	mov	r4, r1
 8005df0:	2001      	movs	r0, #1
 8005df2:	e7a8      	b.n	8005d46 <_vfiprintf_r+0xfe>
 8005df4:	2300      	movs	r3, #0
 8005df6:	3401      	adds	r4, #1
 8005df8:	9305      	str	r3, [sp, #20]
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	f04f 0c0a 	mov.w	ip, #10
 8005e00:	4620      	mov	r0, r4
 8005e02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e06:	3a30      	subs	r2, #48	@ 0x30
 8005e08:	2a09      	cmp	r2, #9
 8005e0a:	d903      	bls.n	8005e14 <_vfiprintf_r+0x1cc>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0c6      	beq.n	8005d9e <_vfiprintf_r+0x156>
 8005e10:	9105      	str	r1, [sp, #20]
 8005e12:	e7c4      	b.n	8005d9e <_vfiprintf_r+0x156>
 8005e14:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e18:	4604      	mov	r4, r0
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e7f0      	b.n	8005e00 <_vfiprintf_r+0x1b8>
 8005e1e:	ab03      	add	r3, sp, #12
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	462a      	mov	r2, r5
 8005e24:	4b12      	ldr	r3, [pc, #72]	@ (8005e70 <_vfiprintf_r+0x228>)
 8005e26:	a904      	add	r1, sp, #16
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f3af 8000 	nop.w
 8005e2e:	4607      	mov	r7, r0
 8005e30:	1c78      	adds	r0, r7, #1
 8005e32:	d1d6      	bne.n	8005de2 <_vfiprintf_r+0x19a>
 8005e34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e36:	07d9      	lsls	r1, r3, #31
 8005e38:	d405      	bmi.n	8005e46 <_vfiprintf_r+0x1fe>
 8005e3a:	89ab      	ldrh	r3, [r5, #12]
 8005e3c:	059a      	lsls	r2, r3, #22
 8005e3e:	d402      	bmi.n	8005e46 <_vfiprintf_r+0x1fe>
 8005e40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e42:	f7ff fc77 	bl	8005734 <__retarget_lock_release_recursive>
 8005e46:	89ab      	ldrh	r3, [r5, #12]
 8005e48:	065b      	lsls	r3, r3, #25
 8005e4a:	f53f af1f 	bmi.w	8005c8c <_vfiprintf_r+0x44>
 8005e4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e50:	e71e      	b.n	8005c90 <_vfiprintf_r+0x48>
 8005e52:	ab03      	add	r3, sp, #12
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	462a      	mov	r2, r5
 8005e58:	4b05      	ldr	r3, [pc, #20]	@ (8005e70 <_vfiprintf_r+0x228>)
 8005e5a:	a904      	add	r1, sp, #16
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	f000 f879 	bl	8005f54 <_printf_i>
 8005e62:	e7e4      	b.n	8005e2e <_vfiprintf_r+0x1e6>
 8005e64:	08006b74 	.word	0x08006b74
 8005e68:	08006b7e 	.word	0x08006b7e
 8005e6c:	00000000 	.word	0x00000000
 8005e70:	08005c23 	.word	0x08005c23
 8005e74:	08006b7a 	.word	0x08006b7a

08005e78 <_printf_common>:
 8005e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	4698      	mov	r8, r3
 8005e80:	688a      	ldr	r2, [r1, #8]
 8005e82:	690b      	ldr	r3, [r1, #16]
 8005e84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	bfb8      	it	lt
 8005e8c:	4613      	movlt	r3, r2
 8005e8e:	6033      	str	r3, [r6, #0]
 8005e90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e94:	4607      	mov	r7, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	b10a      	cbz	r2, 8005e9e <_printf_common+0x26>
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	6033      	str	r3, [r6, #0]
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	0699      	lsls	r1, r3, #26
 8005ea2:	bf42      	ittt	mi
 8005ea4:	6833      	ldrmi	r3, [r6, #0]
 8005ea6:	3302      	addmi	r3, #2
 8005ea8:	6033      	strmi	r3, [r6, #0]
 8005eaa:	6825      	ldr	r5, [r4, #0]
 8005eac:	f015 0506 	ands.w	r5, r5, #6
 8005eb0:	d106      	bne.n	8005ec0 <_printf_common+0x48>
 8005eb2:	f104 0a19 	add.w	sl, r4, #25
 8005eb6:	68e3      	ldr	r3, [r4, #12]
 8005eb8:	6832      	ldr	r2, [r6, #0]
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	42ab      	cmp	r3, r5
 8005ebe:	dc26      	bgt.n	8005f0e <_printf_common+0x96>
 8005ec0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ec4:	6822      	ldr	r2, [r4, #0]
 8005ec6:	3b00      	subs	r3, #0
 8005ec8:	bf18      	it	ne
 8005eca:	2301      	movne	r3, #1
 8005ecc:	0692      	lsls	r2, r2, #26
 8005ece:	d42b      	bmi.n	8005f28 <_printf_common+0xb0>
 8005ed0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ed4:	4641      	mov	r1, r8
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	47c8      	blx	r9
 8005eda:	3001      	adds	r0, #1
 8005edc:	d01e      	beq.n	8005f1c <_printf_common+0xa4>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	6922      	ldr	r2, [r4, #16]
 8005ee2:	f003 0306 	and.w	r3, r3, #6
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	bf02      	ittt	eq
 8005eea:	68e5      	ldreq	r5, [r4, #12]
 8005eec:	6833      	ldreq	r3, [r6, #0]
 8005eee:	1aed      	subeq	r5, r5, r3
 8005ef0:	68a3      	ldr	r3, [r4, #8]
 8005ef2:	bf0c      	ite	eq
 8005ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ef8:	2500      	movne	r5, #0
 8005efa:	4293      	cmp	r3, r2
 8005efc:	bfc4      	itt	gt
 8005efe:	1a9b      	subgt	r3, r3, r2
 8005f00:	18ed      	addgt	r5, r5, r3
 8005f02:	2600      	movs	r6, #0
 8005f04:	341a      	adds	r4, #26
 8005f06:	42b5      	cmp	r5, r6
 8005f08:	d11a      	bne.n	8005f40 <_printf_common+0xc8>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e008      	b.n	8005f20 <_printf_common+0xa8>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4652      	mov	r2, sl
 8005f12:	4641      	mov	r1, r8
 8005f14:	4638      	mov	r0, r7
 8005f16:	47c8      	blx	r9
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d103      	bne.n	8005f24 <_printf_common+0xac>
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f24:	3501      	adds	r5, #1
 8005f26:	e7c6      	b.n	8005eb6 <_printf_common+0x3e>
 8005f28:	18e1      	adds	r1, r4, r3
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	2030      	movs	r0, #48	@ 0x30
 8005f2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f32:	4422      	add	r2, r4
 8005f34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	e7c7      	b.n	8005ed0 <_printf_common+0x58>
 8005f40:	2301      	movs	r3, #1
 8005f42:	4622      	mov	r2, r4
 8005f44:	4641      	mov	r1, r8
 8005f46:	4638      	mov	r0, r7
 8005f48:	47c8      	blx	r9
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d0e6      	beq.n	8005f1c <_printf_common+0xa4>
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7d9      	b.n	8005f06 <_printf_common+0x8e>
	...

08005f54 <_printf_i>:
 8005f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	7e0f      	ldrb	r7, [r1, #24]
 8005f5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f5c:	2f78      	cmp	r7, #120	@ 0x78
 8005f5e:	4691      	mov	r9, r2
 8005f60:	4680      	mov	r8, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	469a      	mov	sl, r3
 8005f66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f6a:	d807      	bhi.n	8005f7c <_printf_i+0x28>
 8005f6c:	2f62      	cmp	r7, #98	@ 0x62
 8005f6e:	d80a      	bhi.n	8005f86 <_printf_i+0x32>
 8005f70:	2f00      	cmp	r7, #0
 8005f72:	f000 80d2 	beq.w	800611a <_printf_i+0x1c6>
 8005f76:	2f58      	cmp	r7, #88	@ 0x58
 8005f78:	f000 80b9 	beq.w	80060ee <_printf_i+0x19a>
 8005f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f84:	e03a      	b.n	8005ffc <_printf_i+0xa8>
 8005f86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f8a:	2b15      	cmp	r3, #21
 8005f8c:	d8f6      	bhi.n	8005f7c <_printf_i+0x28>
 8005f8e:	a101      	add	r1, pc, #4	@ (adr r1, 8005f94 <_printf_i+0x40>)
 8005f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f94:	08005fed 	.word	0x08005fed
 8005f98:	08006001 	.word	0x08006001
 8005f9c:	08005f7d 	.word	0x08005f7d
 8005fa0:	08005f7d 	.word	0x08005f7d
 8005fa4:	08005f7d 	.word	0x08005f7d
 8005fa8:	08005f7d 	.word	0x08005f7d
 8005fac:	08006001 	.word	0x08006001
 8005fb0:	08005f7d 	.word	0x08005f7d
 8005fb4:	08005f7d 	.word	0x08005f7d
 8005fb8:	08005f7d 	.word	0x08005f7d
 8005fbc:	08005f7d 	.word	0x08005f7d
 8005fc0:	08006101 	.word	0x08006101
 8005fc4:	0800602b 	.word	0x0800602b
 8005fc8:	080060bb 	.word	0x080060bb
 8005fcc:	08005f7d 	.word	0x08005f7d
 8005fd0:	08005f7d 	.word	0x08005f7d
 8005fd4:	08006123 	.word	0x08006123
 8005fd8:	08005f7d 	.word	0x08005f7d
 8005fdc:	0800602b 	.word	0x0800602b
 8005fe0:	08005f7d 	.word	0x08005f7d
 8005fe4:	08005f7d 	.word	0x08005f7d
 8005fe8:	080060c3 	.word	0x080060c3
 8005fec:	6833      	ldr	r3, [r6, #0]
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6032      	str	r2, [r6, #0]
 8005ff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ff8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e09d      	b.n	800613c <_printf_i+0x1e8>
 8006000:	6833      	ldr	r3, [r6, #0]
 8006002:	6820      	ldr	r0, [r4, #0]
 8006004:	1d19      	adds	r1, r3, #4
 8006006:	6031      	str	r1, [r6, #0]
 8006008:	0606      	lsls	r6, r0, #24
 800600a:	d501      	bpl.n	8006010 <_printf_i+0xbc>
 800600c:	681d      	ldr	r5, [r3, #0]
 800600e:	e003      	b.n	8006018 <_printf_i+0xc4>
 8006010:	0645      	lsls	r5, r0, #25
 8006012:	d5fb      	bpl.n	800600c <_printf_i+0xb8>
 8006014:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006018:	2d00      	cmp	r5, #0
 800601a:	da03      	bge.n	8006024 <_printf_i+0xd0>
 800601c:	232d      	movs	r3, #45	@ 0x2d
 800601e:	426d      	negs	r5, r5
 8006020:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006024:	4859      	ldr	r0, [pc, #356]	@ (800618c <_printf_i+0x238>)
 8006026:	230a      	movs	r3, #10
 8006028:	e011      	b.n	800604e <_printf_i+0xfa>
 800602a:	6821      	ldr	r1, [r4, #0]
 800602c:	6833      	ldr	r3, [r6, #0]
 800602e:	0608      	lsls	r0, r1, #24
 8006030:	f853 5b04 	ldr.w	r5, [r3], #4
 8006034:	d402      	bmi.n	800603c <_printf_i+0xe8>
 8006036:	0649      	lsls	r1, r1, #25
 8006038:	bf48      	it	mi
 800603a:	b2ad      	uxthmi	r5, r5
 800603c:	2f6f      	cmp	r7, #111	@ 0x6f
 800603e:	4853      	ldr	r0, [pc, #332]	@ (800618c <_printf_i+0x238>)
 8006040:	6033      	str	r3, [r6, #0]
 8006042:	bf14      	ite	ne
 8006044:	230a      	movne	r3, #10
 8006046:	2308      	moveq	r3, #8
 8006048:	2100      	movs	r1, #0
 800604a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800604e:	6866      	ldr	r6, [r4, #4]
 8006050:	60a6      	str	r6, [r4, #8]
 8006052:	2e00      	cmp	r6, #0
 8006054:	bfa2      	ittt	ge
 8006056:	6821      	ldrge	r1, [r4, #0]
 8006058:	f021 0104 	bicge.w	r1, r1, #4
 800605c:	6021      	strge	r1, [r4, #0]
 800605e:	b90d      	cbnz	r5, 8006064 <_printf_i+0x110>
 8006060:	2e00      	cmp	r6, #0
 8006062:	d04b      	beq.n	80060fc <_printf_i+0x1a8>
 8006064:	4616      	mov	r6, r2
 8006066:	fbb5 f1f3 	udiv	r1, r5, r3
 800606a:	fb03 5711 	mls	r7, r3, r1, r5
 800606e:	5dc7      	ldrb	r7, [r0, r7]
 8006070:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006074:	462f      	mov	r7, r5
 8006076:	42bb      	cmp	r3, r7
 8006078:	460d      	mov	r5, r1
 800607a:	d9f4      	bls.n	8006066 <_printf_i+0x112>
 800607c:	2b08      	cmp	r3, #8
 800607e:	d10b      	bne.n	8006098 <_printf_i+0x144>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	07df      	lsls	r7, r3, #31
 8006084:	d508      	bpl.n	8006098 <_printf_i+0x144>
 8006086:	6923      	ldr	r3, [r4, #16]
 8006088:	6861      	ldr	r1, [r4, #4]
 800608a:	4299      	cmp	r1, r3
 800608c:	bfde      	ittt	le
 800608e:	2330      	movle	r3, #48	@ 0x30
 8006090:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006094:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006098:	1b92      	subs	r2, r2, r6
 800609a:	6122      	str	r2, [r4, #16]
 800609c:	f8cd a000 	str.w	sl, [sp]
 80060a0:	464b      	mov	r3, r9
 80060a2:	aa03      	add	r2, sp, #12
 80060a4:	4621      	mov	r1, r4
 80060a6:	4640      	mov	r0, r8
 80060a8:	f7ff fee6 	bl	8005e78 <_printf_common>
 80060ac:	3001      	adds	r0, #1
 80060ae:	d14a      	bne.n	8006146 <_printf_i+0x1f2>
 80060b0:	f04f 30ff 	mov.w	r0, #4294967295
 80060b4:	b004      	add	sp, #16
 80060b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	f043 0320 	orr.w	r3, r3, #32
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	4833      	ldr	r0, [pc, #204]	@ (8006190 <_printf_i+0x23c>)
 80060c4:	2778      	movs	r7, #120	@ 0x78
 80060c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	6831      	ldr	r1, [r6, #0]
 80060ce:	061f      	lsls	r7, r3, #24
 80060d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80060d4:	d402      	bmi.n	80060dc <_printf_i+0x188>
 80060d6:	065f      	lsls	r7, r3, #25
 80060d8:	bf48      	it	mi
 80060da:	b2ad      	uxthmi	r5, r5
 80060dc:	6031      	str	r1, [r6, #0]
 80060de:	07d9      	lsls	r1, r3, #31
 80060e0:	bf44      	itt	mi
 80060e2:	f043 0320 	orrmi.w	r3, r3, #32
 80060e6:	6023      	strmi	r3, [r4, #0]
 80060e8:	b11d      	cbz	r5, 80060f2 <_printf_i+0x19e>
 80060ea:	2310      	movs	r3, #16
 80060ec:	e7ac      	b.n	8006048 <_printf_i+0xf4>
 80060ee:	4827      	ldr	r0, [pc, #156]	@ (800618c <_printf_i+0x238>)
 80060f0:	e7e9      	b.n	80060c6 <_printf_i+0x172>
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	f023 0320 	bic.w	r3, r3, #32
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	e7f6      	b.n	80060ea <_printf_i+0x196>
 80060fc:	4616      	mov	r6, r2
 80060fe:	e7bd      	b.n	800607c <_printf_i+0x128>
 8006100:	6833      	ldr	r3, [r6, #0]
 8006102:	6825      	ldr	r5, [r4, #0]
 8006104:	6961      	ldr	r1, [r4, #20]
 8006106:	1d18      	adds	r0, r3, #4
 8006108:	6030      	str	r0, [r6, #0]
 800610a:	062e      	lsls	r6, r5, #24
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	d501      	bpl.n	8006114 <_printf_i+0x1c0>
 8006110:	6019      	str	r1, [r3, #0]
 8006112:	e002      	b.n	800611a <_printf_i+0x1c6>
 8006114:	0668      	lsls	r0, r5, #25
 8006116:	d5fb      	bpl.n	8006110 <_printf_i+0x1bc>
 8006118:	8019      	strh	r1, [r3, #0]
 800611a:	2300      	movs	r3, #0
 800611c:	6123      	str	r3, [r4, #16]
 800611e:	4616      	mov	r6, r2
 8006120:	e7bc      	b.n	800609c <_printf_i+0x148>
 8006122:	6833      	ldr	r3, [r6, #0]
 8006124:	1d1a      	adds	r2, r3, #4
 8006126:	6032      	str	r2, [r6, #0]
 8006128:	681e      	ldr	r6, [r3, #0]
 800612a:	6862      	ldr	r2, [r4, #4]
 800612c:	2100      	movs	r1, #0
 800612e:	4630      	mov	r0, r6
 8006130:	f7fa f866 	bl	8000200 <memchr>
 8006134:	b108      	cbz	r0, 800613a <_printf_i+0x1e6>
 8006136:	1b80      	subs	r0, r0, r6
 8006138:	6060      	str	r0, [r4, #4]
 800613a:	6863      	ldr	r3, [r4, #4]
 800613c:	6123      	str	r3, [r4, #16]
 800613e:	2300      	movs	r3, #0
 8006140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006144:	e7aa      	b.n	800609c <_printf_i+0x148>
 8006146:	6923      	ldr	r3, [r4, #16]
 8006148:	4632      	mov	r2, r6
 800614a:	4649      	mov	r1, r9
 800614c:	4640      	mov	r0, r8
 800614e:	47d0      	blx	sl
 8006150:	3001      	adds	r0, #1
 8006152:	d0ad      	beq.n	80060b0 <_printf_i+0x15c>
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	079b      	lsls	r3, r3, #30
 8006158:	d413      	bmi.n	8006182 <_printf_i+0x22e>
 800615a:	68e0      	ldr	r0, [r4, #12]
 800615c:	9b03      	ldr	r3, [sp, #12]
 800615e:	4298      	cmp	r0, r3
 8006160:	bfb8      	it	lt
 8006162:	4618      	movlt	r0, r3
 8006164:	e7a6      	b.n	80060b4 <_printf_i+0x160>
 8006166:	2301      	movs	r3, #1
 8006168:	4632      	mov	r2, r6
 800616a:	4649      	mov	r1, r9
 800616c:	4640      	mov	r0, r8
 800616e:	47d0      	blx	sl
 8006170:	3001      	adds	r0, #1
 8006172:	d09d      	beq.n	80060b0 <_printf_i+0x15c>
 8006174:	3501      	adds	r5, #1
 8006176:	68e3      	ldr	r3, [r4, #12]
 8006178:	9903      	ldr	r1, [sp, #12]
 800617a:	1a5b      	subs	r3, r3, r1
 800617c:	42ab      	cmp	r3, r5
 800617e:	dcf2      	bgt.n	8006166 <_printf_i+0x212>
 8006180:	e7eb      	b.n	800615a <_printf_i+0x206>
 8006182:	2500      	movs	r5, #0
 8006184:	f104 0619 	add.w	r6, r4, #25
 8006188:	e7f5      	b.n	8006176 <_printf_i+0x222>
 800618a:	bf00      	nop
 800618c:	08006b85 	.word	0x08006b85
 8006190:	08006b96 	.word	0x08006b96

08006194 <__swbuf_r>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	460e      	mov	r6, r1
 8006198:	4614      	mov	r4, r2
 800619a:	4605      	mov	r5, r0
 800619c:	b118      	cbz	r0, 80061a6 <__swbuf_r+0x12>
 800619e:	6a03      	ldr	r3, [r0, #32]
 80061a0:	b90b      	cbnz	r3, 80061a6 <__swbuf_r+0x12>
 80061a2:	f7ff f98d 	bl	80054c0 <__sinit>
 80061a6:	69a3      	ldr	r3, [r4, #24]
 80061a8:	60a3      	str	r3, [r4, #8]
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	071a      	lsls	r2, r3, #28
 80061ae:	d501      	bpl.n	80061b4 <__swbuf_r+0x20>
 80061b0:	6923      	ldr	r3, [r4, #16]
 80061b2:	b943      	cbnz	r3, 80061c6 <__swbuf_r+0x32>
 80061b4:	4621      	mov	r1, r4
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 f82a 	bl	8006210 <__swsetup_r>
 80061bc:	b118      	cbz	r0, 80061c6 <__swbuf_r+0x32>
 80061be:	f04f 37ff 	mov.w	r7, #4294967295
 80061c2:	4638      	mov	r0, r7
 80061c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	6922      	ldr	r2, [r4, #16]
 80061ca:	1a98      	subs	r0, r3, r2
 80061cc:	6963      	ldr	r3, [r4, #20]
 80061ce:	b2f6      	uxtb	r6, r6
 80061d0:	4283      	cmp	r3, r0
 80061d2:	4637      	mov	r7, r6
 80061d4:	dc05      	bgt.n	80061e2 <__swbuf_r+0x4e>
 80061d6:	4621      	mov	r1, r4
 80061d8:	4628      	mov	r0, r5
 80061da:	f7ff f8a9 	bl	8005330 <_fflush_r>
 80061de:	2800      	cmp	r0, #0
 80061e0:	d1ed      	bne.n	80061be <__swbuf_r+0x2a>
 80061e2:	68a3      	ldr	r3, [r4, #8]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	60a3      	str	r3, [r4, #8]
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	6022      	str	r2, [r4, #0]
 80061ee:	701e      	strb	r6, [r3, #0]
 80061f0:	6962      	ldr	r2, [r4, #20]
 80061f2:	1c43      	adds	r3, r0, #1
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d004      	beq.n	8006202 <__swbuf_r+0x6e>
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	07db      	lsls	r3, r3, #31
 80061fc:	d5e1      	bpl.n	80061c2 <__swbuf_r+0x2e>
 80061fe:	2e0a      	cmp	r6, #10
 8006200:	d1df      	bne.n	80061c2 <__swbuf_r+0x2e>
 8006202:	4621      	mov	r1, r4
 8006204:	4628      	mov	r0, r5
 8006206:	f7ff f893 	bl	8005330 <_fflush_r>
 800620a:	2800      	cmp	r0, #0
 800620c:	d0d9      	beq.n	80061c2 <__swbuf_r+0x2e>
 800620e:	e7d6      	b.n	80061be <__swbuf_r+0x2a>

08006210 <__swsetup_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4b29      	ldr	r3, [pc, #164]	@ (80062b8 <__swsetup_r+0xa8>)
 8006214:	4605      	mov	r5, r0
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	460c      	mov	r4, r1
 800621a:	b118      	cbz	r0, 8006224 <__swsetup_r+0x14>
 800621c:	6a03      	ldr	r3, [r0, #32]
 800621e:	b90b      	cbnz	r3, 8006224 <__swsetup_r+0x14>
 8006220:	f7ff f94e 	bl	80054c0 <__sinit>
 8006224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006228:	0719      	lsls	r1, r3, #28
 800622a:	d422      	bmi.n	8006272 <__swsetup_r+0x62>
 800622c:	06da      	lsls	r2, r3, #27
 800622e:	d407      	bmi.n	8006240 <__swsetup_r+0x30>
 8006230:	2209      	movs	r2, #9
 8006232:	602a      	str	r2, [r5, #0]
 8006234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006238:	81a3      	strh	r3, [r4, #12]
 800623a:	f04f 30ff 	mov.w	r0, #4294967295
 800623e:	e033      	b.n	80062a8 <__swsetup_r+0x98>
 8006240:	0758      	lsls	r0, r3, #29
 8006242:	d512      	bpl.n	800626a <__swsetup_r+0x5a>
 8006244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006246:	b141      	cbz	r1, 800625a <__swsetup_r+0x4a>
 8006248:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800624c:	4299      	cmp	r1, r3
 800624e:	d002      	beq.n	8006256 <__swsetup_r+0x46>
 8006250:	4628      	mov	r0, r5
 8006252:	f7ff fa7f 	bl	8005754 <_free_r>
 8006256:	2300      	movs	r3, #0
 8006258:	6363      	str	r3, [r4, #52]	@ 0x34
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006260:	81a3      	strh	r3, [r4, #12]
 8006262:	2300      	movs	r3, #0
 8006264:	6063      	str	r3, [r4, #4]
 8006266:	6923      	ldr	r3, [r4, #16]
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	89a3      	ldrh	r3, [r4, #12]
 800626c:	f043 0308 	orr.w	r3, r3, #8
 8006270:	81a3      	strh	r3, [r4, #12]
 8006272:	6923      	ldr	r3, [r4, #16]
 8006274:	b94b      	cbnz	r3, 800628a <__swsetup_r+0x7a>
 8006276:	89a3      	ldrh	r3, [r4, #12]
 8006278:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800627c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006280:	d003      	beq.n	800628a <__swsetup_r+0x7a>
 8006282:	4621      	mov	r1, r4
 8006284:	4628      	mov	r0, r5
 8006286:	f000 f897 	bl	80063b8 <__smakebuf_r>
 800628a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800628e:	f013 0201 	ands.w	r2, r3, #1
 8006292:	d00a      	beq.n	80062aa <__swsetup_r+0x9a>
 8006294:	2200      	movs	r2, #0
 8006296:	60a2      	str	r2, [r4, #8]
 8006298:	6962      	ldr	r2, [r4, #20]
 800629a:	4252      	negs	r2, r2
 800629c:	61a2      	str	r2, [r4, #24]
 800629e:	6922      	ldr	r2, [r4, #16]
 80062a0:	b942      	cbnz	r2, 80062b4 <__swsetup_r+0xa4>
 80062a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80062a6:	d1c5      	bne.n	8006234 <__swsetup_r+0x24>
 80062a8:	bd38      	pop	{r3, r4, r5, pc}
 80062aa:	0799      	lsls	r1, r3, #30
 80062ac:	bf58      	it	pl
 80062ae:	6962      	ldrpl	r2, [r4, #20]
 80062b0:	60a2      	str	r2, [r4, #8]
 80062b2:	e7f4      	b.n	800629e <__swsetup_r+0x8e>
 80062b4:	2000      	movs	r0, #0
 80062b6:	e7f7      	b.n	80062a8 <__swsetup_r+0x98>
 80062b8:	20000078 	.word	0x20000078

080062bc <memmove>:
 80062bc:	4288      	cmp	r0, r1
 80062be:	b510      	push	{r4, lr}
 80062c0:	eb01 0402 	add.w	r4, r1, r2
 80062c4:	d902      	bls.n	80062cc <memmove+0x10>
 80062c6:	4284      	cmp	r4, r0
 80062c8:	4623      	mov	r3, r4
 80062ca:	d807      	bhi.n	80062dc <memmove+0x20>
 80062cc:	1e43      	subs	r3, r0, #1
 80062ce:	42a1      	cmp	r1, r4
 80062d0:	d008      	beq.n	80062e4 <memmove+0x28>
 80062d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062da:	e7f8      	b.n	80062ce <memmove+0x12>
 80062dc:	4402      	add	r2, r0
 80062de:	4601      	mov	r1, r0
 80062e0:	428a      	cmp	r2, r1
 80062e2:	d100      	bne.n	80062e6 <memmove+0x2a>
 80062e4:	bd10      	pop	{r4, pc}
 80062e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062ee:	e7f7      	b.n	80062e0 <memmove+0x24>

080062f0 <_sbrk_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4d06      	ldr	r5, [pc, #24]	@ (800630c <_sbrk_r+0x1c>)
 80062f4:	2300      	movs	r3, #0
 80062f6:	4604      	mov	r4, r0
 80062f8:	4608      	mov	r0, r1
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	f7fa fe2a 	bl	8000f54 <_sbrk>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d102      	bne.n	800630a <_sbrk_r+0x1a>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b103      	cbz	r3, 800630a <_sbrk_r+0x1a>
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	200047d0 	.word	0x200047d0

08006310 <_realloc_r>:
 8006310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006314:	4680      	mov	r8, r0
 8006316:	4615      	mov	r5, r2
 8006318:	460c      	mov	r4, r1
 800631a:	b921      	cbnz	r1, 8006326 <_realloc_r+0x16>
 800631c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006320:	4611      	mov	r1, r2
 8006322:	f7ff ba83 	b.w	800582c <_malloc_r>
 8006326:	b92a      	cbnz	r2, 8006334 <_realloc_r+0x24>
 8006328:	f7ff fa14 	bl	8005754 <_free_r>
 800632c:	2400      	movs	r4, #0
 800632e:	4620      	mov	r0, r4
 8006330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006334:	f000 f89e 	bl	8006474 <_malloc_usable_size_r>
 8006338:	4285      	cmp	r5, r0
 800633a:	4606      	mov	r6, r0
 800633c:	d802      	bhi.n	8006344 <_realloc_r+0x34>
 800633e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006342:	d8f4      	bhi.n	800632e <_realloc_r+0x1e>
 8006344:	4629      	mov	r1, r5
 8006346:	4640      	mov	r0, r8
 8006348:	f7ff fa70 	bl	800582c <_malloc_r>
 800634c:	4607      	mov	r7, r0
 800634e:	2800      	cmp	r0, #0
 8006350:	d0ec      	beq.n	800632c <_realloc_r+0x1c>
 8006352:	42b5      	cmp	r5, r6
 8006354:	462a      	mov	r2, r5
 8006356:	4621      	mov	r1, r4
 8006358:	bf28      	it	cs
 800635a:	4632      	movcs	r2, r6
 800635c:	f7ff f9eb 	bl	8005736 <memcpy>
 8006360:	4621      	mov	r1, r4
 8006362:	4640      	mov	r0, r8
 8006364:	f7ff f9f6 	bl	8005754 <_free_r>
 8006368:	463c      	mov	r4, r7
 800636a:	e7e0      	b.n	800632e <_realloc_r+0x1e>

0800636c <__swhatbuf_r>:
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	460c      	mov	r4, r1
 8006370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006374:	2900      	cmp	r1, #0
 8006376:	b096      	sub	sp, #88	@ 0x58
 8006378:	4615      	mov	r5, r2
 800637a:	461e      	mov	r6, r3
 800637c:	da0d      	bge.n	800639a <__swhatbuf_r+0x2e>
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006384:	f04f 0100 	mov.w	r1, #0
 8006388:	bf14      	ite	ne
 800638a:	2340      	movne	r3, #64	@ 0x40
 800638c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006390:	2000      	movs	r0, #0
 8006392:	6031      	str	r1, [r6, #0]
 8006394:	602b      	str	r3, [r5, #0]
 8006396:	b016      	add	sp, #88	@ 0x58
 8006398:	bd70      	pop	{r4, r5, r6, pc}
 800639a:	466a      	mov	r2, sp
 800639c:	f000 f848 	bl	8006430 <_fstat_r>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	dbec      	blt.n	800637e <__swhatbuf_r+0x12>
 80063a4:	9901      	ldr	r1, [sp, #4]
 80063a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80063aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80063ae:	4259      	negs	r1, r3
 80063b0:	4159      	adcs	r1, r3
 80063b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063b6:	e7eb      	b.n	8006390 <__swhatbuf_r+0x24>

080063b8 <__smakebuf_r>:
 80063b8:	898b      	ldrh	r3, [r1, #12]
 80063ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063bc:	079d      	lsls	r5, r3, #30
 80063be:	4606      	mov	r6, r0
 80063c0:	460c      	mov	r4, r1
 80063c2:	d507      	bpl.n	80063d4 <__smakebuf_r+0x1c>
 80063c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	6123      	str	r3, [r4, #16]
 80063cc:	2301      	movs	r3, #1
 80063ce:	6163      	str	r3, [r4, #20]
 80063d0:	b003      	add	sp, #12
 80063d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063d4:	ab01      	add	r3, sp, #4
 80063d6:	466a      	mov	r2, sp
 80063d8:	f7ff ffc8 	bl	800636c <__swhatbuf_r>
 80063dc:	9f00      	ldr	r7, [sp, #0]
 80063de:	4605      	mov	r5, r0
 80063e0:	4639      	mov	r1, r7
 80063e2:	4630      	mov	r0, r6
 80063e4:	f7ff fa22 	bl	800582c <_malloc_r>
 80063e8:	b948      	cbnz	r0, 80063fe <__smakebuf_r+0x46>
 80063ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ee:	059a      	lsls	r2, r3, #22
 80063f0:	d4ee      	bmi.n	80063d0 <__smakebuf_r+0x18>
 80063f2:	f023 0303 	bic.w	r3, r3, #3
 80063f6:	f043 0302 	orr.w	r3, r3, #2
 80063fa:	81a3      	strh	r3, [r4, #12]
 80063fc:	e7e2      	b.n	80063c4 <__smakebuf_r+0xc>
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	6020      	str	r0, [r4, #0]
 8006402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006406:	81a3      	strh	r3, [r4, #12]
 8006408:	9b01      	ldr	r3, [sp, #4]
 800640a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800640e:	b15b      	cbz	r3, 8006428 <__smakebuf_r+0x70>
 8006410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006414:	4630      	mov	r0, r6
 8006416:	f000 f81d 	bl	8006454 <_isatty_r>
 800641a:	b128      	cbz	r0, 8006428 <__smakebuf_r+0x70>
 800641c:	89a3      	ldrh	r3, [r4, #12]
 800641e:	f023 0303 	bic.w	r3, r3, #3
 8006422:	f043 0301 	orr.w	r3, r3, #1
 8006426:	81a3      	strh	r3, [r4, #12]
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	431d      	orrs	r5, r3
 800642c:	81a5      	strh	r5, [r4, #12]
 800642e:	e7cf      	b.n	80063d0 <__smakebuf_r+0x18>

08006430 <_fstat_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	4d07      	ldr	r5, [pc, #28]	@ (8006450 <_fstat_r+0x20>)
 8006434:	2300      	movs	r3, #0
 8006436:	4604      	mov	r4, r0
 8006438:	4608      	mov	r0, r1
 800643a:	4611      	mov	r1, r2
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	f000 f936 	bl	80066ae <_fstat>
 8006442:	1c43      	adds	r3, r0, #1
 8006444:	d102      	bne.n	800644c <_fstat_r+0x1c>
 8006446:	682b      	ldr	r3, [r5, #0]
 8006448:	b103      	cbz	r3, 800644c <_fstat_r+0x1c>
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	bd38      	pop	{r3, r4, r5, pc}
 800644e:	bf00      	nop
 8006450:	200047d0 	.word	0x200047d0

08006454 <_isatty_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4d06      	ldr	r5, [pc, #24]	@ (8006470 <_isatty_r+0x1c>)
 8006458:	2300      	movs	r3, #0
 800645a:	4604      	mov	r4, r0
 800645c:	4608      	mov	r0, r1
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	f000 fa88 	bl	8006974 <_isatty>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d102      	bne.n	800646e <_isatty_r+0x1a>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	b103      	cbz	r3, 800646e <_isatty_r+0x1a>
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	bd38      	pop	{r3, r4, r5, pc}
 8006470:	200047d0 	.word	0x200047d0

08006474 <_malloc_usable_size_r>:
 8006474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006478:	1f18      	subs	r0, r3, #4
 800647a:	2b00      	cmp	r3, #0
 800647c:	bfbc      	itt	lt
 800647e:	580b      	ldrlt	r3, [r1, r0]
 8006480:	18c0      	addlt	r0, r0, r3
 8006482:	4770      	bx	lr

08006484 <findslot>:
 8006484:	4b0a      	ldr	r3, [pc, #40]	@ (80064b0 <findslot+0x2c>)
 8006486:	b510      	push	{r4, lr}
 8006488:	4604      	mov	r4, r0
 800648a:	6818      	ldr	r0, [r3, #0]
 800648c:	b118      	cbz	r0, 8006496 <findslot+0x12>
 800648e:	6a03      	ldr	r3, [r0, #32]
 8006490:	b90b      	cbnz	r3, 8006496 <findslot+0x12>
 8006492:	f7ff f815 	bl	80054c0 <__sinit>
 8006496:	2c13      	cmp	r4, #19
 8006498:	d807      	bhi.n	80064aa <findslot+0x26>
 800649a:	4806      	ldr	r0, [pc, #24]	@ (80064b4 <findslot+0x30>)
 800649c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80064a0:	3201      	adds	r2, #1
 80064a2:	d002      	beq.n	80064aa <findslot+0x26>
 80064a4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80064a8:	bd10      	pop	{r4, pc}
 80064aa:	2000      	movs	r0, #0
 80064ac:	e7fc      	b.n	80064a8 <findslot+0x24>
 80064ae:	bf00      	nop
 80064b0:	20000078 	.word	0x20000078
 80064b4:	200047ec 	.word	0x200047ec

080064b8 <error>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	4604      	mov	r4, r0
 80064bc:	f7ff f90e 	bl	80056dc <__errno>
 80064c0:	2613      	movs	r6, #19
 80064c2:	4605      	mov	r5, r0
 80064c4:	2700      	movs	r7, #0
 80064c6:	4630      	mov	r0, r6
 80064c8:	4639      	mov	r1, r7
 80064ca:	beab      	bkpt	0x00ab
 80064cc:	4606      	mov	r6, r0
 80064ce:	602e      	str	r6, [r5, #0]
 80064d0:	4620      	mov	r0, r4
 80064d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080064d4 <checkerror>:
 80064d4:	1c43      	adds	r3, r0, #1
 80064d6:	d101      	bne.n	80064dc <checkerror+0x8>
 80064d8:	f7ff bfee 	b.w	80064b8 <error>
 80064dc:	4770      	bx	lr

080064de <_swiread>:
 80064de:	b530      	push	{r4, r5, lr}
 80064e0:	b085      	sub	sp, #20
 80064e2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80064e6:	9203      	str	r2, [sp, #12]
 80064e8:	2406      	movs	r4, #6
 80064ea:	ad01      	add	r5, sp, #4
 80064ec:	4620      	mov	r0, r4
 80064ee:	4629      	mov	r1, r5
 80064f0:	beab      	bkpt	0x00ab
 80064f2:	4604      	mov	r4, r0
 80064f4:	4620      	mov	r0, r4
 80064f6:	f7ff ffed 	bl	80064d4 <checkerror>
 80064fa:	b005      	add	sp, #20
 80064fc:	bd30      	pop	{r4, r5, pc}

080064fe <_read>:
 80064fe:	b570      	push	{r4, r5, r6, lr}
 8006500:	460e      	mov	r6, r1
 8006502:	4614      	mov	r4, r2
 8006504:	f7ff ffbe 	bl	8006484 <findslot>
 8006508:	4605      	mov	r5, r0
 800650a:	b930      	cbnz	r0, 800651a <_read+0x1c>
 800650c:	f7ff f8e6 	bl	80056dc <__errno>
 8006510:	2309      	movs	r3, #9
 8006512:	6003      	str	r3, [r0, #0]
 8006514:	f04f 30ff 	mov.w	r0, #4294967295
 8006518:	bd70      	pop	{r4, r5, r6, pc}
 800651a:	6800      	ldr	r0, [r0, #0]
 800651c:	4622      	mov	r2, r4
 800651e:	4631      	mov	r1, r6
 8006520:	f7ff ffdd 	bl	80064de <_swiread>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	d0f5      	beq.n	8006514 <_read+0x16>
 8006528:	686b      	ldr	r3, [r5, #4]
 800652a:	1a20      	subs	r0, r4, r0
 800652c:	4403      	add	r3, r0
 800652e:	606b      	str	r3, [r5, #4]
 8006530:	e7f2      	b.n	8006518 <_read+0x1a>

08006532 <_swilseek>:
 8006532:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006534:	460c      	mov	r4, r1
 8006536:	4616      	mov	r6, r2
 8006538:	f7ff ffa4 	bl	8006484 <findslot>
 800653c:	4605      	mov	r5, r0
 800653e:	b940      	cbnz	r0, 8006552 <_swilseek+0x20>
 8006540:	f7ff f8cc 	bl	80056dc <__errno>
 8006544:	2309      	movs	r3, #9
 8006546:	6003      	str	r3, [r0, #0]
 8006548:	f04f 34ff 	mov.w	r4, #4294967295
 800654c:	4620      	mov	r0, r4
 800654e:	b003      	add	sp, #12
 8006550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006552:	2e02      	cmp	r6, #2
 8006554:	d903      	bls.n	800655e <_swilseek+0x2c>
 8006556:	f7ff f8c1 	bl	80056dc <__errno>
 800655a:	2316      	movs	r3, #22
 800655c:	e7f3      	b.n	8006546 <_swilseek+0x14>
 800655e:	2e01      	cmp	r6, #1
 8006560:	d112      	bne.n	8006588 <_swilseek+0x56>
 8006562:	6843      	ldr	r3, [r0, #4]
 8006564:	18e4      	adds	r4, r4, r3
 8006566:	d4f6      	bmi.n	8006556 <_swilseek+0x24>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	260a      	movs	r6, #10
 800656c:	e9cd 3400 	strd	r3, r4, [sp]
 8006570:	466f      	mov	r7, sp
 8006572:	4630      	mov	r0, r6
 8006574:	4639      	mov	r1, r7
 8006576:	beab      	bkpt	0x00ab
 8006578:	4606      	mov	r6, r0
 800657a:	4630      	mov	r0, r6
 800657c:	f7ff ffaa 	bl	80064d4 <checkerror>
 8006580:	2800      	cmp	r0, #0
 8006582:	dbe1      	blt.n	8006548 <_swilseek+0x16>
 8006584:	606c      	str	r4, [r5, #4]
 8006586:	e7e1      	b.n	800654c <_swilseek+0x1a>
 8006588:	2e02      	cmp	r6, #2
 800658a:	6803      	ldr	r3, [r0, #0]
 800658c:	d1ec      	bne.n	8006568 <_swilseek+0x36>
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	260c      	movs	r6, #12
 8006592:	466f      	mov	r7, sp
 8006594:	4630      	mov	r0, r6
 8006596:	4639      	mov	r1, r7
 8006598:	beab      	bkpt	0x00ab
 800659a:	4606      	mov	r6, r0
 800659c:	4630      	mov	r0, r6
 800659e:	f7ff ff99 	bl	80064d4 <checkerror>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	d0d0      	beq.n	8006548 <_swilseek+0x16>
 80065a6:	4404      	add	r4, r0
 80065a8:	e7de      	b.n	8006568 <_swilseek+0x36>

080065aa <_lseek>:
 80065aa:	f7ff bfc2 	b.w	8006532 <_swilseek>

080065ae <_swiwrite>:
 80065ae:	b530      	push	{r4, r5, lr}
 80065b0:	b085      	sub	sp, #20
 80065b2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80065b6:	9203      	str	r2, [sp, #12]
 80065b8:	2405      	movs	r4, #5
 80065ba:	ad01      	add	r5, sp, #4
 80065bc:	4620      	mov	r0, r4
 80065be:	4629      	mov	r1, r5
 80065c0:	beab      	bkpt	0x00ab
 80065c2:	4604      	mov	r4, r0
 80065c4:	4620      	mov	r0, r4
 80065c6:	f7ff ff85 	bl	80064d4 <checkerror>
 80065ca:	b005      	add	sp, #20
 80065cc:	bd30      	pop	{r4, r5, pc}

080065ce <_write>:
 80065ce:	b570      	push	{r4, r5, r6, lr}
 80065d0:	460e      	mov	r6, r1
 80065d2:	4615      	mov	r5, r2
 80065d4:	f7ff ff56 	bl	8006484 <findslot>
 80065d8:	4604      	mov	r4, r0
 80065da:	b930      	cbnz	r0, 80065ea <_write+0x1c>
 80065dc:	f7ff f87e 	bl	80056dc <__errno>
 80065e0:	2309      	movs	r3, #9
 80065e2:	6003      	str	r3, [r0, #0]
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	bd70      	pop	{r4, r5, r6, pc}
 80065ea:	6800      	ldr	r0, [r0, #0]
 80065ec:	462a      	mov	r2, r5
 80065ee:	4631      	mov	r1, r6
 80065f0:	f7ff ffdd 	bl	80065ae <_swiwrite>
 80065f4:	1e03      	subs	r3, r0, #0
 80065f6:	dbf5      	blt.n	80065e4 <_write+0x16>
 80065f8:	6862      	ldr	r2, [r4, #4]
 80065fa:	1ae8      	subs	r0, r5, r3
 80065fc:	4402      	add	r2, r0
 80065fe:	42ab      	cmp	r3, r5
 8006600:	6062      	str	r2, [r4, #4]
 8006602:	d1f1      	bne.n	80065e8 <_write+0x1a>
 8006604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006608:	2000      	movs	r0, #0
 800660a:	f7ff bf55 	b.w	80064b8 <error>

0800660e <_swiclose>:
 800660e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006610:	2402      	movs	r4, #2
 8006612:	9001      	str	r0, [sp, #4]
 8006614:	ad01      	add	r5, sp, #4
 8006616:	4620      	mov	r0, r4
 8006618:	4629      	mov	r1, r5
 800661a:	beab      	bkpt	0x00ab
 800661c:	4604      	mov	r4, r0
 800661e:	4620      	mov	r0, r4
 8006620:	f7ff ff58 	bl	80064d4 <checkerror>
 8006624:	b003      	add	sp, #12
 8006626:	bd30      	pop	{r4, r5, pc}

08006628 <_close>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4605      	mov	r5, r0
 800662c:	f7ff ff2a 	bl	8006484 <findslot>
 8006630:	4604      	mov	r4, r0
 8006632:	b930      	cbnz	r0, 8006642 <_close+0x1a>
 8006634:	f7ff f852 	bl	80056dc <__errno>
 8006638:	2309      	movs	r3, #9
 800663a:	6003      	str	r3, [r0, #0]
 800663c:	f04f 30ff 	mov.w	r0, #4294967295
 8006640:	bd38      	pop	{r3, r4, r5, pc}
 8006642:	3d01      	subs	r5, #1
 8006644:	2d01      	cmp	r5, #1
 8006646:	d809      	bhi.n	800665c <_close+0x34>
 8006648:	4b07      	ldr	r3, [pc, #28]	@ (8006668 <_close+0x40>)
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	429a      	cmp	r2, r3
 8006650:	d104      	bne.n	800665c <_close+0x34>
 8006652:	f04f 33ff 	mov.w	r3, #4294967295
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	2000      	movs	r0, #0
 800665a:	e7f1      	b.n	8006640 <_close+0x18>
 800665c:	6820      	ldr	r0, [r4, #0]
 800665e:	f7ff ffd6 	bl	800660e <_swiclose>
 8006662:	2800      	cmp	r0, #0
 8006664:	d0f5      	beq.n	8006652 <_close+0x2a>
 8006666:	e7eb      	b.n	8006640 <_close+0x18>
 8006668:	200047ec 	.word	0x200047ec

0800666c <_swistat>:
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	460c      	mov	r4, r1
 8006670:	f7ff ff08 	bl	8006484 <findslot>
 8006674:	4605      	mov	r5, r0
 8006676:	b930      	cbnz	r0, 8006686 <_swistat+0x1a>
 8006678:	f7ff f830 	bl	80056dc <__errno>
 800667c:	2309      	movs	r3, #9
 800667e:	6003      	str	r3, [r0, #0]
 8006680:	f04f 30ff 	mov.w	r0, #4294967295
 8006684:	bd70      	pop	{r4, r5, r6, pc}
 8006686:	6863      	ldr	r3, [r4, #4]
 8006688:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800668c:	6063      	str	r3, [r4, #4]
 800668e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006692:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006694:	260c      	movs	r6, #12
 8006696:	4630      	mov	r0, r6
 8006698:	4629      	mov	r1, r5
 800669a:	beab      	bkpt	0x00ab
 800669c:	4605      	mov	r5, r0
 800669e:	4628      	mov	r0, r5
 80066a0:	f7ff ff18 	bl	80064d4 <checkerror>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d0eb      	beq.n	8006680 <_swistat+0x14>
 80066a8:	6120      	str	r0, [r4, #16]
 80066aa:	2000      	movs	r0, #0
 80066ac:	e7ea      	b.n	8006684 <_swistat+0x18>

080066ae <_fstat>:
 80066ae:	460b      	mov	r3, r1
 80066b0:	b510      	push	{r4, lr}
 80066b2:	2100      	movs	r1, #0
 80066b4:	4604      	mov	r4, r0
 80066b6:	2258      	movs	r2, #88	@ 0x58
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fe ffc0 	bl	800563e <memset>
 80066be:	4601      	mov	r1, r0
 80066c0:	4620      	mov	r0, r4
 80066c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066c6:	f7ff bfd1 	b.w	800666c <_swistat>

080066ca <_stat>:
 80066ca:	b538      	push	{r3, r4, r5, lr}
 80066cc:	460d      	mov	r5, r1
 80066ce:	4604      	mov	r4, r0
 80066d0:	2258      	movs	r2, #88	@ 0x58
 80066d2:	2100      	movs	r1, #0
 80066d4:	4628      	mov	r0, r5
 80066d6:	f7fe ffb2 	bl	800563e <memset>
 80066da:	4620      	mov	r0, r4
 80066dc:	2100      	movs	r1, #0
 80066de:	f000 f811 	bl	8006704 <_swiopen>
 80066e2:	1c43      	adds	r3, r0, #1
 80066e4:	4604      	mov	r4, r0
 80066e6:	d00b      	beq.n	8006700 <_stat+0x36>
 80066e8:	686b      	ldr	r3, [r5, #4]
 80066ea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80066ee:	606b      	str	r3, [r5, #4]
 80066f0:	4629      	mov	r1, r5
 80066f2:	f7ff ffbb 	bl	800666c <_swistat>
 80066f6:	4605      	mov	r5, r0
 80066f8:	4620      	mov	r0, r4
 80066fa:	f7ff ff95 	bl	8006628 <_close>
 80066fe:	462c      	mov	r4, r5
 8006700:	4620      	mov	r0, r4
 8006702:	bd38      	pop	{r3, r4, r5, pc}

08006704 <_swiopen>:
 8006704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006708:	4f29      	ldr	r7, [pc, #164]	@ (80067b0 <_swiopen+0xac>)
 800670a:	b096      	sub	sp, #88	@ 0x58
 800670c:	4682      	mov	sl, r0
 800670e:	460e      	mov	r6, r1
 8006710:	2400      	movs	r4, #0
 8006712:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8006716:	3301      	adds	r3, #1
 8006718:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800671c:	d00c      	beq.n	8006738 <_swiopen+0x34>
 800671e:	3401      	adds	r4, #1
 8006720:	2c14      	cmp	r4, #20
 8006722:	d1f6      	bne.n	8006712 <_swiopen+0xe>
 8006724:	f7fe ffda 	bl	80056dc <__errno>
 8006728:	2318      	movs	r3, #24
 800672a:	6003      	str	r3, [r0, #0]
 800672c:	f04f 34ff 	mov.w	r4, #4294967295
 8006730:	4620      	mov	r0, r4
 8006732:	b016      	add	sp, #88	@ 0x58
 8006734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006738:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800673c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006740:	46e9      	mov	r9, sp
 8006742:	d109      	bne.n	8006758 <_swiopen+0x54>
 8006744:	4649      	mov	r1, r9
 8006746:	4650      	mov	r0, sl
 8006748:	f7ff ffbf 	bl	80066ca <_stat>
 800674c:	3001      	adds	r0, #1
 800674e:	d003      	beq.n	8006758 <_swiopen+0x54>
 8006750:	f7fe ffc4 	bl	80056dc <__errno>
 8006754:	2311      	movs	r3, #17
 8006756:	e7e8      	b.n	800672a <_swiopen+0x26>
 8006758:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800675c:	f240 6301 	movw	r3, #1537	@ 0x601
 8006760:	07b2      	lsls	r2, r6, #30
 8006762:	bf48      	it	mi
 8006764:	f045 0502 	orrmi.w	r5, r5, #2
 8006768:	421e      	tst	r6, r3
 800676a:	bf18      	it	ne
 800676c:	f045 0504 	orrne.w	r5, r5, #4
 8006770:	0733      	lsls	r3, r6, #28
 8006772:	bf48      	it	mi
 8006774:	f025 0504 	bicmi.w	r5, r5, #4
 8006778:	4650      	mov	r0, sl
 800677a:	bf48      	it	mi
 800677c:	f045 0508 	orrmi.w	r5, r5, #8
 8006780:	f8cd a000 	str.w	sl, [sp]
 8006784:	f7f9 fd34 	bl	80001f0 <strlen>
 8006788:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800678c:	2501      	movs	r5, #1
 800678e:	4628      	mov	r0, r5
 8006790:	4649      	mov	r1, r9
 8006792:	beab      	bkpt	0x00ab
 8006794:	4605      	mov	r5, r0
 8006796:	2d00      	cmp	r5, #0
 8006798:	db05      	blt.n	80067a6 <_swiopen+0xa2>
 800679a:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800679e:	4447      	add	r7, r8
 80067a0:	2300      	movs	r3, #0
 80067a2:	607b      	str	r3, [r7, #4]
 80067a4:	e7c4      	b.n	8006730 <_swiopen+0x2c>
 80067a6:	4628      	mov	r0, r5
 80067a8:	f7ff fe86 	bl	80064b8 <error>
 80067ac:	4604      	mov	r4, r0
 80067ae:	e7bf      	b.n	8006730 <_swiopen+0x2c>
 80067b0:	200047ec 	.word	0x200047ec

080067b4 <_get_semihosting_exts>:
 80067b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067b8:	4606      	mov	r6, r0
 80067ba:	460f      	mov	r7, r1
 80067bc:	4829      	ldr	r0, [pc, #164]	@ (8006864 <_get_semihosting_exts+0xb0>)
 80067be:	2100      	movs	r1, #0
 80067c0:	4615      	mov	r5, r2
 80067c2:	f7ff ff9f 	bl	8006704 <_swiopen>
 80067c6:	462a      	mov	r2, r5
 80067c8:	4604      	mov	r4, r0
 80067ca:	2100      	movs	r1, #0
 80067cc:	4630      	mov	r0, r6
 80067ce:	f7fe ff36 	bl	800563e <memset>
 80067d2:	1c63      	adds	r3, r4, #1
 80067d4:	d014      	beq.n	8006800 <_get_semihosting_exts+0x4c>
 80067d6:	4620      	mov	r0, r4
 80067d8:	f7ff fe54 	bl	8006484 <findslot>
 80067dc:	f04f 080c 	mov.w	r8, #12
 80067e0:	4681      	mov	r9, r0
 80067e2:	4640      	mov	r0, r8
 80067e4:	4649      	mov	r1, r9
 80067e6:	beab      	bkpt	0x00ab
 80067e8:	4680      	mov	r8, r0
 80067ea:	4640      	mov	r0, r8
 80067ec:	f7ff fe72 	bl	80064d4 <checkerror>
 80067f0:	2803      	cmp	r0, #3
 80067f2:	dd02      	ble.n	80067fa <_get_semihosting_exts+0x46>
 80067f4:	1ec3      	subs	r3, r0, #3
 80067f6:	42ab      	cmp	r3, r5
 80067f8:	dc07      	bgt.n	800680a <_get_semihosting_exts+0x56>
 80067fa:	4620      	mov	r0, r4
 80067fc:	f7ff ff14 	bl	8006628 <_close>
 8006800:	f04f 30ff 	mov.w	r0, #4294967295
 8006804:	b003      	add	sp, #12
 8006806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800680a:	2204      	movs	r2, #4
 800680c:	eb0d 0102 	add.w	r1, sp, r2
 8006810:	4620      	mov	r0, r4
 8006812:	f7ff fe74 	bl	80064fe <_read>
 8006816:	2803      	cmp	r0, #3
 8006818:	ddef      	ble.n	80067fa <_get_semihosting_exts+0x46>
 800681a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800681e:	2b53      	cmp	r3, #83	@ 0x53
 8006820:	d1eb      	bne.n	80067fa <_get_semihosting_exts+0x46>
 8006822:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006826:	2b48      	cmp	r3, #72	@ 0x48
 8006828:	d1e7      	bne.n	80067fa <_get_semihosting_exts+0x46>
 800682a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800682e:	2b46      	cmp	r3, #70	@ 0x46
 8006830:	d1e3      	bne.n	80067fa <_get_semihosting_exts+0x46>
 8006832:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006836:	2b42      	cmp	r3, #66	@ 0x42
 8006838:	d1df      	bne.n	80067fa <_get_semihosting_exts+0x46>
 800683a:	2201      	movs	r2, #1
 800683c:	4639      	mov	r1, r7
 800683e:	4620      	mov	r0, r4
 8006840:	f7ff fe77 	bl	8006532 <_swilseek>
 8006844:	2800      	cmp	r0, #0
 8006846:	dbd8      	blt.n	80067fa <_get_semihosting_exts+0x46>
 8006848:	462a      	mov	r2, r5
 800684a:	4631      	mov	r1, r6
 800684c:	4620      	mov	r0, r4
 800684e:	f7ff fe56 	bl	80064fe <_read>
 8006852:	4605      	mov	r5, r0
 8006854:	4620      	mov	r0, r4
 8006856:	f7ff fee7 	bl	8006628 <_close>
 800685a:	4628      	mov	r0, r5
 800685c:	f7ff fe3a 	bl	80064d4 <checkerror>
 8006860:	e7d0      	b.n	8006804 <_get_semihosting_exts+0x50>
 8006862:	bf00      	nop
 8006864:	08006ba7 	.word	0x08006ba7

08006868 <initialise_semihosting_exts>:
 8006868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800686a:	4d0a      	ldr	r5, [pc, #40]	@ (8006894 <initialise_semihosting_exts+0x2c>)
 800686c:	4c0a      	ldr	r4, [pc, #40]	@ (8006898 <initialise_semihosting_exts+0x30>)
 800686e:	2100      	movs	r1, #0
 8006870:	2201      	movs	r2, #1
 8006872:	a801      	add	r0, sp, #4
 8006874:	6029      	str	r1, [r5, #0]
 8006876:	6022      	str	r2, [r4, #0]
 8006878:	f7ff ff9c 	bl	80067b4 <_get_semihosting_exts>
 800687c:	2800      	cmp	r0, #0
 800687e:	dd07      	ble.n	8006890 <initialise_semihosting_exts+0x28>
 8006880:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006884:	f003 0201 	and.w	r2, r3, #1
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	602a      	str	r2, [r5, #0]
 800688e:	6023      	str	r3, [r4, #0]
 8006890:	b003      	add	sp, #12
 8006892:	bd30      	pop	{r4, r5, pc}
 8006894:	200000cc 	.word	0x200000cc
 8006898:	200000c8 	.word	0x200000c8

0800689c <_has_ext_stdout_stderr>:
 800689c:	b510      	push	{r4, lr}
 800689e:	4c04      	ldr	r4, [pc, #16]	@ (80068b0 <_has_ext_stdout_stderr+0x14>)
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	da01      	bge.n	80068aa <_has_ext_stdout_stderr+0xe>
 80068a6:	f7ff ffdf 	bl	8006868 <initialise_semihosting_exts>
 80068aa:	6820      	ldr	r0, [r4, #0]
 80068ac:	bd10      	pop	{r4, pc}
 80068ae:	bf00      	nop
 80068b0:	200000c8 	.word	0x200000c8

080068b4 <initialise_monitor_handles>:
 80068b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b8:	b085      	sub	sp, #20
 80068ba:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800696c <initialise_monitor_handles+0xb8>
 80068be:	f8cd 9004 	str.w	r9, [sp, #4]
 80068c2:	2303      	movs	r3, #3
 80068c4:	2400      	movs	r4, #0
 80068c6:	9303      	str	r3, [sp, #12]
 80068c8:	af01      	add	r7, sp, #4
 80068ca:	9402      	str	r4, [sp, #8]
 80068cc:	2501      	movs	r5, #1
 80068ce:	4628      	mov	r0, r5
 80068d0:	4639      	mov	r1, r7
 80068d2:	beab      	bkpt	0x00ab
 80068d4:	4605      	mov	r5, r0
 80068d6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006970 <initialise_monitor_handles+0xbc>
 80068da:	4623      	mov	r3, r4
 80068dc:	4c20      	ldr	r4, [pc, #128]	@ (8006960 <initialise_monitor_handles+0xac>)
 80068de:	f8c8 5000 	str.w	r5, [r8]
 80068e2:	f04f 32ff 	mov.w	r2, #4294967295
 80068e6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80068ea:	3301      	adds	r3, #1
 80068ec:	2b14      	cmp	r3, #20
 80068ee:	d1fa      	bne.n	80068e6 <initialise_monitor_handles+0x32>
 80068f0:	f7ff ffd4 	bl	800689c <_has_ext_stdout_stderr>
 80068f4:	4d1b      	ldr	r5, [pc, #108]	@ (8006964 <initialise_monitor_handles+0xb0>)
 80068f6:	b1d0      	cbz	r0, 800692e <initialise_monitor_handles+0x7a>
 80068f8:	f04f 0a03 	mov.w	sl, #3
 80068fc:	2304      	movs	r3, #4
 80068fe:	f8cd 9004 	str.w	r9, [sp, #4]
 8006902:	2601      	movs	r6, #1
 8006904:	f8cd a00c 	str.w	sl, [sp, #12]
 8006908:	9302      	str	r3, [sp, #8]
 800690a:	4630      	mov	r0, r6
 800690c:	4639      	mov	r1, r7
 800690e:	beab      	bkpt	0x00ab
 8006910:	4683      	mov	fp, r0
 8006912:	4b15      	ldr	r3, [pc, #84]	@ (8006968 <initialise_monitor_handles+0xb4>)
 8006914:	f8cd 9004 	str.w	r9, [sp, #4]
 8006918:	f8c3 b000 	str.w	fp, [r3]
 800691c:	2308      	movs	r3, #8
 800691e:	f8cd a00c 	str.w	sl, [sp, #12]
 8006922:	9302      	str	r3, [sp, #8]
 8006924:	4630      	mov	r0, r6
 8006926:	4639      	mov	r1, r7
 8006928:	beab      	bkpt	0x00ab
 800692a:	4606      	mov	r6, r0
 800692c:	602e      	str	r6, [r5, #0]
 800692e:	682b      	ldr	r3, [r5, #0]
 8006930:	3301      	adds	r3, #1
 8006932:	bf02      	ittt	eq
 8006934:	4b0c      	ldreq	r3, [pc, #48]	@ (8006968 <initialise_monitor_handles+0xb4>)
 8006936:	681b      	ldreq	r3, [r3, #0]
 8006938:	602b      	streq	r3, [r5, #0]
 800693a:	2600      	movs	r6, #0
 800693c:	f8d8 3000 	ldr.w	r3, [r8]
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	6066      	str	r6, [r4, #4]
 8006944:	f7ff ffaa 	bl	800689c <_has_ext_stdout_stderr>
 8006948:	b130      	cbz	r0, 8006958 <initialise_monitor_handles+0xa4>
 800694a:	4b07      	ldr	r3, [pc, #28]	@ (8006968 <initialise_monitor_handles+0xb4>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006952:	682b      	ldr	r3, [r5, #0]
 8006954:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006958:	b005      	add	sp, #20
 800695a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695e:	bf00      	nop
 8006960:	200047ec 	.word	0x200047ec
 8006964:	200047e0 	.word	0x200047e0
 8006968:	200047e4 	.word	0x200047e4
 800696c:	08006bbd 	.word	0x08006bbd
 8006970:	200047e8 	.word	0x200047e8

08006974 <_isatty>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	f7ff fd85 	bl	8006484 <findslot>
 800697a:	2409      	movs	r4, #9
 800697c:	4605      	mov	r5, r0
 800697e:	b920      	cbnz	r0, 800698a <_isatty+0x16>
 8006980:	f7fe feac 	bl	80056dc <__errno>
 8006984:	6004      	str	r4, [r0, #0]
 8006986:	2000      	movs	r0, #0
 8006988:	bd70      	pop	{r4, r5, r6, pc}
 800698a:	4620      	mov	r0, r4
 800698c:	4629      	mov	r1, r5
 800698e:	beab      	bkpt	0x00ab
 8006990:	4604      	mov	r4, r0
 8006992:	2c01      	cmp	r4, #1
 8006994:	4620      	mov	r0, r4
 8006996:	d0f7      	beq.n	8006988 <_isatty+0x14>
 8006998:	f7fe fea0 	bl	80056dc <__errno>
 800699c:	2513      	movs	r5, #19
 800699e:	4604      	mov	r4, r0
 80069a0:	2600      	movs	r6, #0
 80069a2:	4628      	mov	r0, r5
 80069a4:	4631      	mov	r1, r6
 80069a6:	beab      	bkpt	0x00ab
 80069a8:	4605      	mov	r5, r0
 80069aa:	6025      	str	r5, [r4, #0]
 80069ac:	e7eb      	b.n	8006986 <_isatty+0x12>
	...

080069b0 <_init>:
 80069b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b2:	bf00      	nop
 80069b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069b6:	bc08      	pop	{r3}
 80069b8:	469e      	mov	lr, r3
 80069ba:	4770      	bx	lr

080069bc <_fini>:
 80069bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069be:	bf00      	nop
 80069c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c2:	bc08      	pop	{r3}
 80069c4:	469e      	mov	lr, r3
 80069c6:	4770      	bx	lr
