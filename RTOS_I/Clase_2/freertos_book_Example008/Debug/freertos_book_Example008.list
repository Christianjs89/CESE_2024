
freertos_book_Example008.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080062a0  080062a0  000072a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800641c  0800641c  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  0800641c  0800641c  0000741c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006424  08006424  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006424  08006424  00007424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006428  08006428  00007428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800642c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008074  2**0
                  CONTENTS
 10 .bss          0000471c  20000074  20000074  00008074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004790  20004790  00008074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c1e  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003521  00000000  00000000  00020cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  000241e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c6  00000000  00000000  00025778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003e24  00000000  00000000  0002683e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182f7  00000000  00000000  0002a662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb5b2  00000000  00000000  00042959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012df0b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066b4  00000000  00000000  0012df50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  00134604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006288 	.word	0x08006288

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006288 	.word	0x08006288

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b08c      	sub	sp, #48	@ 0x30
 8000594:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000596:	f005 fdf9 	bl	800618c <initialise_monitor_handles>
	const char *pcTextForMain = "freertos_book_Example008 is running: Changing task priorities\r\n\n";
 800059a:	4b2d      	ldr	r3, [pc, #180]	@ (8000650 <main+0xc0>)
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fd41 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f865 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f973 	bl	8000890 <MX_GPIO_Init>
  MX_ETH_Init();
 80005aa:	f000 f8cb 	bl	8000744 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005ae:	f000 f917 	bl	80007e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b2:	f000 f93f 	bl	8000834 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
	/* Print out the name of this Example. */
	vPrintString( pcTextForMain );
 80005b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80005b8:	f000 fca8 	bl	8000f0c <vPrintString>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005bc:	4b25      	ldr	r3, [pc, #148]	@ (8000654 <main+0xc4>)
 80005be:	1d3c      	adds	r4, r7, #4
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	682b      	ldr	r3, [r5, #0]
 80005c8:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 f9ba 	bl	8003948 <osThreadCreate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a20      	ldr	r2, [pc, #128]	@ (8000658 <main+0xc8>)
 80005d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	BaseType_t ret;

	/* Task 1 thread at priority 2 */
	ret = xTaskCreate( vTask1,						/* Pointer to the function thats implement the task. */
 80005da:	2300      	movs	r3, #0
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2302      	movs	r3, #2
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005e8:	491c      	ldr	r1, [pc, #112]	@ (800065c <main+0xcc>)
 80005ea:	481d      	ldr	r0, [pc, #116]	@ (8000660 <main+0xd0>)
 80005ec:	f003 faa2 	bl	8003b34 <xTaskCreate>
 80005f0:	6238      	str	r0, [r7, #32]
					   NULL,						/* We are not using the task parameter.		*/
					   (tskIDLE_PRIORITY + 2UL),	/* This task will run at priority 2. 		*/
		               NULL );          	        /* We are not using the task handle. */

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 80005f2:	6a3b      	ldr	r3, [r7, #32]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d00b      	beq.n	8000610 <main+0x80>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80005f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <main+0x7c>

	/* Task 2 thread at priority 1 */
	ret = xTaskCreate( vTask2,						/* Pointer to the function thats implement the task. */
 8000610:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <main+0xd4>)
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	2301      	movs	r3, #1
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800061e:	4912      	ldr	r1, [pc, #72]	@ (8000668 <main+0xd8>)
 8000620:	4812      	ldr	r0, [pc, #72]	@ (800066c <main+0xdc>)
 8000622:	f003 fa87 	bl	8003b34 <xTaskCreate>
 8000626:	6238      	str	r0, [r7, #32]
					   NULL,						/* We are not using the task parameter.		*/
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 		*/
					   &xTask2Handle );				/* We are using a variable as task handle.	*/

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 8000628:	6a3b      	ldr	r3, [r7, #32]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d00b      	beq.n	8000646 <main+0xb6>
	__asm volatile
 800062e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000632:	f383 8811 	msr	BASEPRI, r3
 8000636:	f3bf 8f6f 	isb	sy
 800063a:	f3bf 8f4f 	dsb	sy
 800063e:	61bb      	str	r3, [r7, #24]
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <main+0xb2>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000646:	f003 f978 	bl	800393a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064a:	bf00      	nop
 800064c:	e7fd      	b.n	800064a <main+0xba>
 800064e:	bf00      	nop
 8000650:	080062a0 	.word	0x080062a0
 8000654:	08006300 	.word	0x08006300
 8000658:	200007e4 	.word	0x200007e4
 800065c:	080062e4 	.word	0x080062e4
 8000660:	080009ed 	.word	0x080009ed
 8000664:	200007e8 	.word	0x200007e8
 8000668:	080062ec 	.word	0x080062ec
 800066c:	08000a29 	.word	0x08000a29

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	@ 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	2230      	movs	r2, #48	@ 0x30
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f004 fda9 	bl	80051d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	4b28      	ldr	r3, [pc, #160]	@ (800073c <SystemClock_Config+0xcc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	4a27      	ldr	r2, [pc, #156]	@ (800073c <SystemClock_Config+0xcc>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a4:	4b25      	ldr	r3, [pc, #148]	@ (800073c <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b22      	ldr	r3, [pc, #136]	@ (8000740 <SystemClock_Config+0xd0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a21      	ldr	r2, [pc, #132]	@ (8000740 <SystemClock_Config+0xd0>)
 80006ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006e4:	23a8      	movs	r3, #168	@ 0xa8
 80006e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ec:	2307      	movs	r3, #7
 80006ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fbd9 	bl	8001eac <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000700:	f000 f9c8 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2302      	movs	r3, #2
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000710:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2105      	movs	r1, #5
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fe3a 	bl	800239c <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800072e:	f000 f9b1 	bl	8000a94 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3750      	adds	r7, #80	@ 0x50
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000748:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <MX_ETH_Init+0x84>)
 800074a:	4a20      	ldr	r2, [pc, #128]	@ (80007cc <MX_ETH_Init+0x88>)
 800074c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800074e:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <MX_ETH_Init+0x8c>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000754:	4b1e      	ldr	r3, [pc, #120]	@ (80007d0 <MX_ETH_Init+0x8c>)
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800075a:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <MX_ETH_Init+0x8c>)
 800075c:	22e1      	movs	r2, #225	@ 0xe1
 800075e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000760:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <MX_ETH_Init+0x8c>)
 8000762:	2200      	movs	r2, #0
 8000764:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000766:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <MX_ETH_Init+0x8c>)
 8000768:	2200      	movs	r2, #0
 800076a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <MX_ETH_Init+0x8c>)
 800076e:	2200      	movs	r2, #0
 8000770:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <MX_ETH_Init+0x84>)
 8000774:	4a16      	ldr	r2, [pc, #88]	@ (80007d0 <MX_ETH_Init+0x8c>)
 8000776:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <MX_ETH_Init+0x84>)
 800077a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800077e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_ETH_Init+0x84>)
 8000782:	4a14      	ldr	r2, [pc, #80]	@ (80007d4 <MX_ETH_Init+0x90>)
 8000784:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_ETH_Init+0x84>)
 8000788:	4a13      	ldr	r2, [pc, #76]	@ (80007d8 <MX_ETH_Init+0x94>)
 800078a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800078c:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_ETH_Init+0x84>)
 800078e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000792:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000794:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <MX_ETH_Init+0x84>)
 8000796:	f000 fd8d 	bl	80012b4 <HAL_ETH_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f978 	bl	8000a94 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007a4:	2238      	movs	r2, #56	@ 0x38
 80007a6:	2100      	movs	r1, #0
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <MX_ETH_Init+0x98>)
 80007aa:	f004 fd14 	bl	80051d6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_ETH_Init+0x98>)
 80007b0:	2221      	movs	r2, #33	@ 0x21
 80007b2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_ETH_Init+0x98>)
 80007b6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80007ba:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <MX_ETH_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000208 	.word	0x20000208
 80007cc:	40028000 	.word	0x40028000
 80007d0:	200007ec 	.word	0x200007ec
 80007d4:	20000168 	.word	0x20000168
 80007d8:	200000c8 	.word	0x200000c8
 80007dc:	20000090 	.word	0x20000090

080007e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <MX_USART3_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 8000818:	f002 fab4 	bl	8002d84 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f937 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200002b8 	.word	0x200002b8
 8000830:	40004800 	.word	0x40004800

08000834 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800083e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000842:	2204      	movs	r2, #4
 8000844:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000848:	2202      	movs	r2, #2
 800084a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000854:	2202      	movs	r2, #2
 8000856:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085a:	2201      	movs	r2, #1
 800085c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086c:	2201      	movs	r2, #1
 800086e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000878:	f001 fa09 	bl	8001c8e <HAL_PCD_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f907 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000300 	.word	0x20000300

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	@ 0x30
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	4b4c      	ldr	r3, [pc, #304]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a4b      	ldr	r2, [pc, #300]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b49      	ldr	r3, [pc, #292]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	4b45      	ldr	r3, [pc, #276]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a44      	ldr	r2, [pc, #272]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b42      	ldr	r3, [pc, #264]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b3e      	ldr	r3, [pc, #248]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a3d      	ldr	r2, [pc, #244]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b3b      	ldr	r3, [pc, #236]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b37      	ldr	r3, [pc, #220]	@ (80009dc <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a36      	ldr	r2, [pc, #216]	@ (80009dc <MX_GPIO_Init+0x14c>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b34      	ldr	r3, [pc, #208]	@ (80009dc <MX_GPIO_Init+0x14c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b30      	ldr	r3, [pc, #192]	@ (80009dc <MX_GPIO_Init+0x14c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a2f      	ldr	r2, [pc, #188]	@ (80009dc <MX_GPIO_Init+0x14c>)
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <MX_GPIO_Init+0x14c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <MX_GPIO_Init+0x14c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a28      	ldr	r2, [pc, #160]	@ (80009dc <MX_GPIO_Init+0x14c>)
 800093c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <MX_GPIO_Init+0x14c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000954:	4822      	ldr	r0, [pc, #136]	@ (80009e0 <MX_GPIO_Init+0x150>)
 8000956:	f001 f981 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2140      	movs	r1, #64	@ 0x40
 800095e:	4821      	ldr	r0, [pc, #132]	@ (80009e4 <MX_GPIO_Init+0x154>)
 8000960:	f001 f97c 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	481b      	ldr	r0, [pc, #108]	@ (80009e8 <MX_GPIO_Init+0x158>)
 800097c:	f000 ffc2 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000980:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4811      	ldr	r0, [pc, #68]	@ (80009e0 <MX_GPIO_Init+0x150>)
 800099a:	f000 ffb3 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800099e:	2340      	movs	r3, #64	@ 0x40
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	480b      	ldr	r0, [pc, #44]	@ (80009e4 <MX_GPIO_Init+0x154>)
 80009b6:	f000 ffa5 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ba:	2380      	movs	r3, #128	@ 0x80
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_GPIO_Init+0x154>)
 80009ce:	f000 ff99 	bl	8001904 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d2:	bf00      	nop
 80009d4:	3730      	adds	r7, #48	@ 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020400 	.word	0x40020400
 80009e4:	40021800 	.word	0x40021800
 80009e8:	40020800 	.word	0x40020800

080009ec <vTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vTask1 */
void vTask1( void *pvParameters )
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	   Neither Task1 nor Task2 ever block so both will always be in either the
	   Running or the Ready state.

	   Query the priority at which this task is running - passing in NULL means
	   "return our own priority". */
	uxPriority = uxTaskPriorityGet( NULL );
 80009f4:	2000      	movs	r0, #0
 80009f6:	f003 fa1f 	bl	8003e38 <uxTaskPriorityGet>
 80009fa:	60f8      	str	r0, [r7, #12]

	for( ;; )
	{
		/* Print out the name of this task. */
		vPrintString( "Task1 is running\r\n" );
 80009fc:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <vTask1+0x30>)
 80009fe:	f000 fa85 	bl	8000f0c <vPrintString>

		/* Setting the Task2 priority above the Task1 priority will cause
	       Task2 to immediately start running (as then Task2 will have the higher
	       priority of the two created tasks). */
		vPrintString( "About to raise the Task2 priority\r\n" );
 8000a02:	4807      	ldr	r0, [pc, #28]	@ (8000a20 <vTask1+0x34>)
 8000a04:	f000 fa82 	bl	8000f0c <vPrintString>
		vTaskPrioritySet( xTask2Handle, ( uxPriority + 1 ) );
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <vTask1+0x38>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4610      	mov	r0, r2
 8000a14:	f003 fa2a 	bl	8003e6c <vTaskPrioritySet>
		vPrintString( "Task1 is running\r\n" );
 8000a18:	bf00      	nop
 8000a1a:	e7ef      	b.n	80009fc <vTask1+0x10>
 8000a1c:	08006314 	.word	0x08006314
 8000a20:	08006328 	.word	0x08006328
 8000a24:	200007e8 	.word	0x200007e8

08000a28 <vTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTask2 */
void vTask2( void *pvParameters )
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	   Neither Task1 nor Task2 ever block so will always be in either the
	   Running or the Ready state.

	   Query the priority at which this task is running - passing in NULL means
	   "return our own priority". */
	uxPriority = uxTaskPriorityGet( NULL );
 8000a30:	2000      	movs	r0, #0
 8000a32:	f003 fa01 	bl	8003e38 <uxTaskPriorityGet>
 8000a36:	60f8      	str	r0, [r7, #12]
	{
		/* For this task to reach this point Task1 must have already run and
	       set the priority of this task higher than its own.

	       Print out the name of this task. */
		vPrintString( "Task2 is running\r\n" );
 8000a38:	4806      	ldr	r0, [pc, #24]	@ (8000a54 <vTask2+0x2c>)
 8000a3a:	f000 fa67 	bl	8000f0c <vPrintString>

		/* Set our priority back down to its original value.  Passing in NULL
	       as the task handle means "change our own priority".  Setting the
	       priority below that of Task1 will cause Task1 to immediately start
	       running again. */
		vPrintString( "About to lower the Task2 priority\r\n" );
 8000a3e:	4806      	ldr	r0, [pc, #24]	@ (8000a58 <vTask2+0x30>)
 8000a40:	f000 fa64 	bl	8000f0c <vPrintString>
      	vTaskPrioritySet( NULL, ( uxPriority - 2 ) );
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3b02      	subs	r3, #2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f003 fa0e 	bl	8003e6c <vTaskPrioritySet>
		vPrintString( "Task2 is running\r\n" );
 8000a50:	bf00      	nop
 8000a52:	e7f1      	b.n	8000a38 <vTask2+0x10>
 8000a54:	0800634c 	.word	0x0800634c
 8000a58:	08006360 	.word	0x08006360

08000a5c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50000);
 8000a64:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000a68:	f002 ff96 	bl	8003998 <osDelay>
 8000a6c:	e7fa      	b.n	8000a64 <StartDefaultTask+0x8>
	...

08000a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d101      	bne.n	8000a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a82:	f000 faf1 	bl	8001068 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40001400 	.word	0x40001400

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <Error_Handler+0x8>

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <HAL_MspInit+0x54>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	4a11      	ldr	r2, [pc, #68]	@ (8000af4 <HAL_MspInit+0x54>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <HAL_MspInit+0x54>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <HAL_MspInit+0x54>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <HAL_MspInit+0x54>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <HAL_MspInit+0x54>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	f06f 0001 	mvn.w	r0, #1
 8000ae6:	f000 fbbb 	bl	8001260 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	@ 0x38
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a55      	ldr	r2, [pc, #340]	@ (8000c6c <HAL_ETH_MspInit+0x174>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	f040 80a4 	bne.w	8000c64 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
 8000b20:	4b53      	ldr	r3, [pc, #332]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b24:	4a52      	ldr	r2, [pc, #328]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2c:	4b50      	ldr	r3, [pc, #320]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b34:	623b      	str	r3, [r7, #32]
 8000b36:	6a3b      	ldr	r3, [r7, #32]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	4b4c      	ldr	r3, [pc, #304]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b40:	4a4b      	ldr	r2, [pc, #300]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b48:	4b49      	ldr	r3, [pc, #292]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b50:	61fb      	str	r3, [r7, #28]
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
 8000b58:	4b45      	ldr	r3, [pc, #276]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5c:	4a44      	ldr	r2, [pc, #272]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b64:	4b42      	ldr	r3, [pc, #264]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b6c:	61bb      	str	r3, [r7, #24]
 8000b6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	4b3e      	ldr	r3, [pc, #248]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b78:	4a3d      	ldr	r2, [pc, #244]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b80:	4b3b      	ldr	r3, [pc, #236]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	4b37      	ldr	r3, [pc, #220]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b94:	4a36      	ldr	r2, [pc, #216]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9c:	4b34      	ldr	r3, [pc, #208]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b30      	ldr	r3, [pc, #192]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb0:	4a2f      	ldr	r2, [pc, #188]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	4a28      	ldr	r2, [pc, #160]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd4:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <HAL_ETH_MspInit+0x178>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000be0:	2332      	movs	r3, #50	@ 0x32
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf0:	230b      	movs	r3, #11
 8000bf2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	481e      	ldr	r0, [pc, #120]	@ (8000c74 <HAL_ETH_MspInit+0x17c>)
 8000bfc:	f000 fe82 	bl	8001904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c00:	2386      	movs	r3, #134	@ 0x86
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c10:	230b      	movs	r3, #11
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4817      	ldr	r0, [pc, #92]	@ (8000c78 <HAL_ETH_MspInit+0x180>)
 8000c1c:	f000 fe72 	bl	8001904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c32:	230b      	movs	r3, #11
 8000c34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480f      	ldr	r0, [pc, #60]	@ (8000c7c <HAL_ETH_MspInit+0x184>)
 8000c3e:	f000 fe61 	bl	8001904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c42:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c54:	230b      	movs	r3, #11
 8000c56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4808      	ldr	r0, [pc, #32]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000c60:	f000 fe50 	bl	8001904 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c64:	bf00      	nop
 8000c66:	3738      	adds	r7, #56	@ 0x38
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40028000 	.word	0x40028000
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020800 	.word	0x40020800
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	40021800 	.word	0x40021800

08000c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	@ 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	@ (8000d08 <HAL_UART_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12c      	bne.n	8000d00 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <HAL_UART_MspInit+0x88>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	4a17      	ldr	r2, [pc, #92]	@ (8000d0c <HAL_UART_MspInit+0x88>)
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb6:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <HAL_UART_MspInit+0x88>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_UART_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a10      	ldr	r2, [pc, #64]	@ (8000d0c <HAL_UART_MspInit+0x88>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <HAL_UART_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <HAL_UART_MspInit+0x8c>)
 8000cfc:	f000 fe02 	bl	8001904 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	@ 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40004800 	.word	0x40004800
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020c00 	.word	0x40020c00

08000d14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d34:	d13f      	bne.n	8000db6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b21      	ldr	r3, [pc, #132]	@ (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a20      	ldr	r2, [pc, #128]	@ (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d52:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d64:	230a      	movs	r3, #10
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4815      	ldr	r0, [pc, #84]	@ (8000dc4 <HAL_PCD_MspInit+0xb0>)
 8000d70:	f000 fdc8 	bl	8001904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	480e      	ldr	r0, [pc, #56]	@ (8000dc4 <HAL_PCD_MspInit+0xb0>)
 8000d8a:	f000 fdbb 	bl	8001904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d92:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d98:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	4a07      	ldr	r2, [pc, #28]	@ (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000daa:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <HAL_PCD_MspInit+0xac>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	@ 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08e      	sub	sp, #56	@ 0x38
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4b33      	ldr	r3, [pc, #204]	@ (8000eac <HAL_InitTick+0xe4>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de0:	4a32      	ldr	r2, [pc, #200]	@ (8000eac <HAL_InitTick+0xe4>)
 8000de2:	f043 0320 	orr.w	r3, r3, #32
 8000de6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de8:	4b30      	ldr	r3, [pc, #192]	@ (8000eac <HAL_InitTick+0xe4>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dec:	f003 0320 	and.w	r3, r3, #32
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000df4:	f107 0210 	add.w	r2, r7, #16
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 fcec 	bl	80027dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e04:	6a3b      	ldr	r3, [r7, #32]
 8000e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d103      	bne.n	8000e16 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e0e:	f001 fcbd 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8000e12:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e14:	e004      	b.n	8000e20 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e16:	f001 fcb9 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e22:	4a23      	ldr	r2, [pc, #140]	@ (8000eb0 <HAL_InitTick+0xe8>)
 8000e24:	fba2 2303 	umull	r2, r3, r2, r3
 8000e28:	0c9b      	lsrs	r3, r3, #18
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000e2e:	4b21      	ldr	r3, [pc, #132]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e30:	4a21      	ldr	r2, [pc, #132]	@ (8000eb8 <HAL_InitTick+0xf0>)
 8000e32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000e34:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e36:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e3a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e40:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e48:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4e:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000e54:	4817      	ldr	r0, [pc, #92]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e56:	f001 fcf3 	bl	8002840 <HAL_TIM_Base_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d11b      	bne.n	8000ea0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000e68:	4812      	ldr	r0, [pc, #72]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e6a:	f001 fd43 	bl	80028f4 <HAL_TIM_Base_Start_IT>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d111      	bne.n	8000ea0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e7c:	2037      	movs	r0, #55	@ 0x37
 8000e7e:	f000 fa0b 	bl	8001298 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d808      	bhi.n	8000e9a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	2037      	movs	r0, #55	@ 0x37
 8000e8e:	f000 f9e7 	bl	8001260 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <HAL_InitTick+0xf4>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e002      	b.n	8000ea0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ea0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3738      	adds	r7, #56	@ 0x38
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	431bde83 	.word	0x431bde83
 8000eb4:	200007f4 	.word	0x200007f4
 8000eb8:	40001400 	.word	0x40001400
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <TIM7_IRQHandler+0x10>)
 8000efe:	f001 fd69 	bl	80029d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200007f4 	.word	0x200007f4

08000f0c <vPrintString>:
}

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 8000f14:	f003 fcc0 	bl	8004898 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <vPrintString+0x2c>)
 8000f1c:	f004 f906 	bl	800512c <iprintf>
		fflush( stdout );
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <vPrintString+0x30>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f004 f82a 	bl	8004f80 <fflush>
	}
	taskEXIT_CRITICAL();
 8000f2c:	f003 fce6 	bl	80048fc <vPortExitCritical>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	08006384 	.word	0x08006384
 8000f3c:	2000001c 	.word	0x2000001c

08000f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	@ (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f70:	f004 f9d6 	bl	8005320 <__errno>
 8000f74:	4603      	mov	r3, r0
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <_sbrk+0x64>)
 8000f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20030000 	.word	0x20030000
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	2000083c 	.word	0x2000083c
 8000fa8:	20004790 	.word	0x20004790

08000fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	@ (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001008 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd4:	480d      	ldr	r0, [pc, #52]	@ (800100c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fd6:	490e      	ldr	r1, [pc, #56]	@ (8001010 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	@ (8001014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0b      	ldr	r2, [pc, #44]	@ (8001018 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fec:	4c0b      	ldr	r4, [pc, #44]	@ (800101c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ffa:	f7ff ffd7 	bl	8000fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f004 f995 	bl	800532c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fac5 	bl	8000590 <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001008:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001014:	0800642c 	.word	0x0800642c
  ldr r2, =_sbss
 8001018:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800101c:	20004790 	.word	0x20004790

08001020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001028:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <HAL_Init+0x40>)
 800102e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001034:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <HAL_Init+0x40>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800103e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	@ (8001064 <HAL_Init+0x40>)
 8001046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800104a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f8fc 	bl	800124a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	200f      	movs	r0, #15
 8001054:	f7ff feb8 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fd22 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023c00 	.word	0x40023c00

08001068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_IncTick+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_IncTick+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	@ (800108c <HAL_IncTick+0x24>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008
 800108c:	20000840 	.word	0x20000840

08001090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000840 	.word	0x20000840

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff ffee 	bl	8001090 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c0:	d005      	beq.n	80010ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <HAL_Delay+0x44>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ce:	bf00      	nop
 80010d0:	f7ff ffde 	bl	8001090 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8f7      	bhi.n	80010d0 <HAL_Delay+0x28>
  {
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4907      	ldr	r1, [pc, #28]	@ (800118c <__NVIC_EnableIRQ+0x38>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	@ (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	@ (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	@ 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	@ 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff4c 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001272:	f7ff ff61 	bl	8001138 <__NVIC_GetPriorityGrouping>
 8001276:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	6978      	ldr	r0, [r7, #20]
 800127e:	f7ff ffb1 	bl	80011e4 <NVIC_EncodePriority>
 8001282:	4602      	mov	r2, r0
 8001284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff80 	bl	8001190 <__NVIC_SetPriority>
}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff54 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e06c      	b.n	80013a0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d106      	bne.n	80012de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2223      	movs	r2, #35	@ 0x23
 80012d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff fc0d 	bl	8000af8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b31      	ldr	r3, [pc, #196]	@ (80013a8 <HAL_ETH_Init+0xf4>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	4a30      	ldr	r2, [pc, #192]	@ (80013a8 <HAL_ETH_Init+0xf4>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ee:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <HAL_ETH_Init+0xf4>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012fa:	4b2c      	ldr	r3, [pc, #176]	@ (80013ac <HAL_ETH_Init+0xf8>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4a2b      	ldr	r2, [pc, #172]	@ (80013ac <HAL_ETH_Init+0xf8>)
 8001300:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001304:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001306:	4b29      	ldr	r3, [pc, #164]	@ (80013ac <HAL_ETH_Init+0xf8>)
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	4927      	ldr	r1, [pc, #156]	@ (80013ac <HAL_ETH_Init+0xf8>)
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001314:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <HAL_ETH_Init+0xf8>)
 8001316:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800132e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001330:	f7ff feae 	bl	8001090 <HAL_GetTick>
 8001334:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001336:	e011      	b.n	800135c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001338:	f7ff feaa 	bl	8001090 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001346:	d909      	bls.n	800135c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2204      	movs	r2, #4
 800134c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	22e0      	movs	r2, #224	@ 0xe0
 8001354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e021      	b.n	80013a0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1e4      	bne.n	8001338 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f958 	bl	8001624 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f9ff 	bl	8001778 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fa55 	bl	800182a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	461a      	mov	r2, r3
 8001386:	2100      	movs	r1, #0
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f9bd 	bl	8001708 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2210      	movs	r2, #16
 800139a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40013800 	.word	0x40013800

080013b0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	4b51      	ldr	r3, [pc, #324]	@ (800150c <ETH_SetMACConfig+0x15c>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	7c1b      	ldrb	r3, [r3, #16]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d102      	bne.n	80013d8 <ETH_SetMACConfig+0x28>
 80013d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013d6:	e000      	b.n	80013da <ETH_SetMACConfig+0x2a>
 80013d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	7c5b      	ldrb	r3, [r3, #17]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <ETH_SetMACConfig+0x38>
 80013e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013e6:	e000      	b.n	80013ea <ETH_SetMACConfig+0x3a>
 80013e8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013ea:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	7fdb      	ldrb	r3, [r3, #31]
 80013f6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013f8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	7f92      	ldrb	r2, [r2, #30]
 8001404:	2a00      	cmp	r2, #0
 8001406:	d102      	bne.n	800140e <ETH_SetMACConfig+0x5e>
 8001408:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800140c:	e000      	b.n	8001410 <ETH_SetMACConfig+0x60>
 800140e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001410:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	7f1b      	ldrb	r3, [r3, #28]
 8001416:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001418:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800141e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	791b      	ldrb	r3, [r3, #4]
 8001424:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001426:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800142e:	2a00      	cmp	r2, #0
 8001430:	d102      	bne.n	8001438 <ETH_SetMACConfig+0x88>
 8001432:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001436:	e000      	b.n	800143a <ETH_SetMACConfig+0x8a>
 8001438:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800143a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	7bdb      	ldrb	r3, [r3, #15]
 8001440:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001442:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001448:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001450:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001452:	4313      	orrs	r3, r2
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff fe1c 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001486:	4013      	ands	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001496:	2a00      	cmp	r2, #0
 8001498:	d101      	bne.n	800149e <ETH_SetMACConfig+0xee>
 800149a:	2280      	movs	r2, #128	@ 0x80
 800149c:	e000      	b.n	80014a0 <ETH_SetMACConfig+0xf0>
 800149e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014a0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80014ae:	2a01      	cmp	r2, #1
 80014b0:	d101      	bne.n	80014b6 <ETH_SetMACConfig+0x106>
 80014b2:	2208      	movs	r2, #8
 80014b4:	e000      	b.n	80014b8 <ETH_SetMACConfig+0x108>
 80014b6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014b8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80014c0:	2a01      	cmp	r2, #1
 80014c2:	d101      	bne.n	80014c8 <ETH_SetMACConfig+0x118>
 80014c4:	2204      	movs	r2, #4
 80014c6:	e000      	b.n	80014ca <ETH_SetMACConfig+0x11a>
 80014c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80014d2:	2a01      	cmp	r2, #1
 80014d4:	d101      	bne.n	80014da <ETH_SetMACConfig+0x12a>
 80014d6:	2202      	movs	r2, #2
 80014d8:	e000      	b.n	80014dc <ETH_SetMACConfig+0x12c>
 80014da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014dc:	4313      	orrs	r3, r2
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff fdd7 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	619a      	str	r2, [r3, #24]
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	ff20810f 	.word	0xff20810f

08001510 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	4b3d      	ldr	r3, [pc, #244]	@ (8001620 <ETH_SetDMAConfig+0x110>)
 800152a:	4013      	ands	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	7b1b      	ldrb	r3, [r3, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <ETH_SetDMAConfig+0x2c>
 8001536:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800153a:	e000      	b.n	800153e <ETH_SetDMAConfig+0x2e>
 800153c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	7b5b      	ldrb	r3, [r3, #13]
 8001542:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001544:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	7f52      	ldrb	r2, [r2, #29]
 800154a:	2a00      	cmp	r2, #0
 800154c:	d102      	bne.n	8001554 <ETH_SetDMAConfig+0x44>
 800154e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001552:	e000      	b.n	8001556 <ETH_SetDMAConfig+0x46>
 8001554:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001556:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	7b9b      	ldrb	r3, [r3, #14]
 800155c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800155e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001564:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	7f1b      	ldrb	r3, [r3, #28]
 800156a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800156c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	7f9b      	ldrb	r3, [r3, #30]
 8001572:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001574:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800157a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001582:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001584:	4313      	orrs	r3, r2
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	4313      	orrs	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015a6:	2001      	movs	r0, #1
 80015a8:	f7ff fd7e 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015b4:	461a      	mov	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	791b      	ldrb	r3, [r3, #4]
 80015be:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015c4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015ca:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015d0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015d8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015da:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015e2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015e8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015f6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001604:	2001      	movs	r0, #1
 8001606:	f7ff fd4f 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001612:	461a      	mov	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	f8de3f23 	.word	0xf8de3f23

08001624 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b0a6      	sub	sp, #152	@ 0x98
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800162c:	2301      	movs	r3, #1
 800162e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001632:	2301      	movs	r3, #1
 8001634:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001638:	2300      	movs	r3, #0
 800163a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001642:	2301      	movs	r3, #1
 8001644:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800164e:	2301      	movs	r3, #1
 8001650:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001660:	2300      	movs	r3, #0
 8001662:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800166a:	2300      	movs	r3, #0
 800166c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001686:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800168a:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800168c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001698:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fe86 	bl	80013b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016a4:	2301      	movs	r3, #1
 80016a6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016a8:	2301      	movs	r3, #1
 80016aa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016ac:	2301      	movs	r3, #1
 80016ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016d0:	2301      	movs	r3, #1
 80016d2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016d8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016e6:	2301      	movs	r3, #1
 80016e8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016f4:	f107 0308 	add.w	r3, r7, #8
 80016f8:	4619      	mov	r1, r3
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ff08 	bl	8001510 <ETH_SetDMAConfig>
}
 8001700:	bf00      	nop
 8001702:	3798      	adds	r7, #152	@ 0x98
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3305      	adds	r3, #5
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	3204      	adds	r2, #4
 8001720:	7812      	ldrb	r2, [r2, #0]
 8001722:	4313      	orrs	r3, r2
 8001724:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <ETH_MACAddressConfig+0x68>)
 800172a:	4413      	add	r3, r2
 800172c:	461a      	mov	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3303      	adds	r3, #3
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	061a      	lsls	r2, r3, #24
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3302      	adds	r3, #2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	041b      	lsls	r3, r3, #16
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3301      	adds	r3, #1
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	4313      	orrs	r3, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	7812      	ldrb	r2, [r2, #0]
 8001752:	4313      	orrs	r3, r2
 8001754:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <ETH_MACAddressConfig+0x6c>)
 800175a:	4413      	add	r3, r2
 800175c:	461a      	mov	r2, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	6013      	str	r3, [r2, #0]
}
 8001762:	bf00      	nop
 8001764:	371c      	adds	r7, #28
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40028040 	.word	0x40028040
 8001774:	40028044 	.word	0x40028044

08001778 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e03e      	b.n	8001804 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68d9      	ldr	r1, [r3, #12]
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	440b      	add	r3, r1
 8001796:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2200      	movs	r2, #0
 80017a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	3206      	adds	r2, #6
 80017b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d80c      	bhi.n	80017e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68d9      	ldr	r1, [r3, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	440b      	add	r3, r1
 80017e0:	461a      	mov	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	e004      	b.n	80017f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	461a      	mov	r2, r3
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3301      	adds	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d9bd      	bls.n	8001786 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800181c:	611a      	str	r2, [r3, #16]
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800182a:	b480      	push	{r7}
 800182c:	b085      	sub	sp, #20
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e046      	b.n	80018c6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6919      	ldr	r1, [r3, #16]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2200      	movs	r2, #0
 8001854:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001874:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 800187c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	3212      	adds	r2, #18
 8001892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d80c      	bhi.n	80018b6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6919      	ldr	r1, [r3, #16]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	461a      	mov	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	e004      	b.n	80018c0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	461a      	mov	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3301      	adds	r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d9b5      	bls.n	8001838 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691a      	ldr	r2, [r3, #16]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f6:	60da      	str	r2, [r3, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	@ 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	e177      	b.n	8001c10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 8166 	bne.w	8001c0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d005      	beq.n	8001956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001952:	2b02      	cmp	r3, #2
 8001954:	d130      	bne.n	80019b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 0201 	and.w	r2, r3, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d017      	beq.n	80019f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d123      	bne.n	8001a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	69b9      	ldr	r1, [r7, #24]
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80c0 	beq.w	8001c0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b66      	ldr	r3, [pc, #408]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	4a65      	ldr	r2, [pc, #404]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9a:	4b63      	ldr	r3, [pc, #396]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa6:	4a61      	ldr	r2, [pc, #388]	@ (8001c2c <HAL_GPIO_Init+0x328>)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a58      	ldr	r2, [pc, #352]	@ (8001c30 <HAL_GPIO_Init+0x32c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d037      	beq.n	8001b42 <HAL_GPIO_Init+0x23e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a57      	ldr	r2, [pc, #348]	@ (8001c34 <HAL_GPIO_Init+0x330>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d031      	beq.n	8001b3e <HAL_GPIO_Init+0x23a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a56      	ldr	r2, [pc, #344]	@ (8001c38 <HAL_GPIO_Init+0x334>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d02b      	beq.n	8001b3a <HAL_GPIO_Init+0x236>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a55      	ldr	r2, [pc, #340]	@ (8001c3c <HAL_GPIO_Init+0x338>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d025      	beq.n	8001b36 <HAL_GPIO_Init+0x232>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a54      	ldr	r2, [pc, #336]	@ (8001c40 <HAL_GPIO_Init+0x33c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01f      	beq.n	8001b32 <HAL_GPIO_Init+0x22e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a53      	ldr	r2, [pc, #332]	@ (8001c44 <HAL_GPIO_Init+0x340>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d019      	beq.n	8001b2e <HAL_GPIO_Init+0x22a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a52      	ldr	r2, [pc, #328]	@ (8001c48 <HAL_GPIO_Init+0x344>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0x226>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a51      	ldr	r2, [pc, #324]	@ (8001c4c <HAL_GPIO_Init+0x348>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00d      	beq.n	8001b26 <HAL_GPIO_Init+0x222>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a50      	ldr	r2, [pc, #320]	@ (8001c50 <HAL_GPIO_Init+0x34c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <HAL_GPIO_Init+0x21e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4f      	ldr	r2, [pc, #316]	@ (8001c54 <HAL_GPIO_Init+0x350>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_GPIO_Init+0x21a>
 8001b1a:	2309      	movs	r3, #9
 8001b1c:	e012      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b1e:	230a      	movs	r3, #10
 8001b20:	e010      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b22:	2308      	movs	r3, #8
 8001b24:	e00e      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b26:	2307      	movs	r3, #7
 8001b28:	e00c      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b2a:	2306      	movs	r3, #6
 8001b2c:	e00a      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b2e:	2305      	movs	r3, #5
 8001b30:	e008      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b32:	2304      	movs	r3, #4
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b36:	2303      	movs	r3, #3
 8001b38:	e004      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b42:	2300      	movs	r3, #0
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	f002 0203 	and.w	r2, r2, #3
 8001b4a:	0092      	lsls	r2, r2, #2
 8001b4c:	4093      	lsls	r3, r2
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b54:	4935      	ldr	r1, [pc, #212]	@ (8001c2c <HAL_GPIO_Init+0x328>)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b62:	4b3d      	ldr	r3, [pc, #244]	@ (8001c58 <HAL_GPIO_Init+0x354>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b86:	4a34      	ldr	r2, [pc, #208]	@ (8001c58 <HAL_GPIO_Init+0x354>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b8c:	4b32      	ldr	r3, [pc, #200]	@ (8001c58 <HAL_GPIO_Init+0x354>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bb0:	4a29      	ldr	r2, [pc, #164]	@ (8001c58 <HAL_GPIO_Init+0x354>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bb6:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <HAL_GPIO_Init+0x354>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bda:	4a1f      	ldr	r2, [pc, #124]	@ (8001c58 <HAL_GPIO_Init+0x354>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <HAL_GPIO_Init+0x354>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c04:	4a14      	ldr	r2, [pc, #80]	@ (8001c58 <HAL_GPIO_Init+0x354>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2b0f      	cmp	r3, #15
 8001c14:	f67f ae84 	bls.w	8001920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3724      	adds	r7, #36	@ 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40013800 	.word	0x40013800
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40020400 	.word	0x40020400
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	40020c00 	.word	0x40020c00
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40021400 	.word	0x40021400
 8001c48:	40021800 	.word	0x40021800
 8001c4c:	40021c00 	.word	0x40021c00
 8001c50:	40022000 	.word	0x40022000
 8001c54:	40022400 	.word	0x40022400
 8001c58:	40013c00 	.word	0x40013c00

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c78:	e003      	b.n	8001c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	041a      	lsls	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	619a      	str	r2, [r3, #24]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af02      	add	r7, sp, #8
 8001c94:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e101      	b.n	8001ea4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff f82a 	bl	8000d14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cce:	d102      	bne.n	8001cd6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 fb7a 	bl	80033d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7c1a      	ldrb	r2, [r3, #16]
 8001ce8:	f88d 2000 	strb.w	r2, [sp]
 8001cec:	3304      	adds	r3, #4
 8001cee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf0:	f001 fb0c 	bl	800330c <USB_CoreInit>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0ce      	b.n	8001ea4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 fb72 	bl	80033f6 <USB_SetCurrentMode>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0bf      	b.n	8001ea4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e04a      	b.n	8001dc0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3315      	adds	r3, #21
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3314      	adds	r3, #20
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	b298      	uxth	r0, r3
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	332e      	adds	r3, #46	@ 0x2e
 8001d66:	4602      	mov	r2, r0
 8001d68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	3318      	adds	r3, #24
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	331c      	adds	r3, #28
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	3320      	adds	r3, #32
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	3324      	adds	r3, #36	@ 0x24
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	791b      	ldrb	r3, [r3, #4]
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d3af      	bcc.n	8001d2a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]
 8001dce:	e044      	b.n	8001e5a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	3301      	adds	r3, #1
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	791b      	ldrb	r3, [r3, #4]
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d3b5      	bcc.n	8001dd0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7c1a      	ldrb	r2, [r3, #16]
 8001e6c:	f88d 2000 	strb.w	r2, [sp]
 8001e70:	3304      	adds	r3, #4
 8001e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e74:	f001 fb0c 	bl	8003490 <USB_DevInit>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d005      	beq.n	8001e8a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2202      	movs	r2, #2
 8001e82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00c      	b.n	8001ea4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 fcd4 	bl	800384a <USB_DevDisconnect>

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e267      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d075      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eca:	4b88      	ldr	r3, [pc, #544]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d00c      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed6:	4b85      	ldr	r3, [pc, #532]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d112      	bne.n	8001f08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee2:	4b82      	ldr	r3, [pc, #520]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eee:	d10b      	bne.n	8001f08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef0:	4b7e      	ldr	r3, [pc, #504]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d05b      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x108>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d157      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e242      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f10:	d106      	bne.n	8001f20 <HAL_RCC_OscConfig+0x74>
 8001f12:	4b76      	ldr	r3, [pc, #472]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a75      	ldr	r2, [pc, #468]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e01d      	b.n	8001f5c <HAL_RCC_OscConfig+0xb0>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x98>
 8001f2a:	4b70      	ldr	r3, [pc, #448]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a6f      	ldr	r2, [pc, #444]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b6d      	ldr	r3, [pc, #436]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a6c      	ldr	r2, [pc, #432]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e00b      	b.n	8001f5c <HAL_RCC_OscConfig+0xb0>
 8001f44:	4b69      	ldr	r3, [pc, #420]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a68      	ldr	r2, [pc, #416]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	4b66      	ldr	r3, [pc, #408]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a65      	ldr	r2, [pc, #404]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d013      	beq.n	8001f8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff f894 	bl	8001090 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff f890 	bl	8001090 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	@ 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e207      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	4b5b      	ldr	r3, [pc, #364]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0xc0>
 8001f8a:	e014      	b.n	8001fb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff f880 	bl	8001090 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f94:	f7ff f87c 	bl	8001090 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	@ 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e1f3      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	4b51      	ldr	r3, [pc, #324]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0xe8>
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d063      	beq.n	800208a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00b      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fce:	4b47      	ldr	r3, [pc, #284]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d11c      	bne.n	8002014 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fda:	4b44      	ldr	r3, [pc, #272]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d116      	bne.n	8002014 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	4b41      	ldr	r3, [pc, #260]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <HAL_RCC_OscConfig+0x152>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e1c7      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4937      	ldr	r1, [pc, #220]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002012:	e03a      	b.n	800208a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800201c:	4b34      	ldr	r3, [pc, #208]	@ (80020f0 <HAL_RCC_OscConfig+0x244>)
 800201e:	2201      	movs	r2, #1
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002022:	f7ff f835 	bl	8001090 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800202a:	f7ff f831 	bl	8001090 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e1a8      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	4b2b      	ldr	r3, [pc, #172]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002048:	4b28      	ldr	r3, [pc, #160]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4925      	ldr	r1, [pc, #148]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]
 800205c:	e015      	b.n	800208a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205e:	4b24      	ldr	r3, [pc, #144]	@ (80020f0 <HAL_RCC_OscConfig+0x244>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7ff f814 	bl	8001090 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800206c:	f7ff f810 	bl	8001090 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e187      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207e:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d036      	beq.n	8002104 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d016      	beq.n	80020cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209e:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <HAL_RCC_OscConfig+0x248>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a4:	f7fe fff4 	bl	8001090 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ac:	f7fe fff0 	bl	8001090 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e167      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <HAL_RCC_OscConfig+0x240>)
 80020c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x200>
 80020ca:	e01b      	b.n	8002104 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020cc:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <HAL_RCC_OscConfig+0x248>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d2:	f7fe ffdd 	bl	8001090 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d8:	e00e      	b.n	80020f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020da:	f7fe ffd9 	bl	8001090 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d907      	bls.n	80020f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e150      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
 80020ec:	40023800 	.word	0x40023800
 80020f0:	42470000 	.word	0x42470000
 80020f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f8:	4b88      	ldr	r3, [pc, #544]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 80020fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1ea      	bne.n	80020da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 8097 	beq.w	8002240 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002116:	4b81      	ldr	r3, [pc, #516]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10f      	bne.n	8002142 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	4b7d      	ldr	r3, [pc, #500]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	4a7c      	ldr	r2, [pc, #496]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002130:	6413      	str	r3, [r2, #64]	@ 0x40
 8002132:	4b7a      	ldr	r3, [pc, #488]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213e:	2301      	movs	r3, #1
 8002140:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002142:	4b77      	ldr	r3, [pc, #476]	@ (8002320 <HAL_RCC_OscConfig+0x474>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214a:	2b00      	cmp	r3, #0
 800214c:	d118      	bne.n	8002180 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214e:	4b74      	ldr	r3, [pc, #464]	@ (8002320 <HAL_RCC_OscConfig+0x474>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a73      	ldr	r2, [pc, #460]	@ (8002320 <HAL_RCC_OscConfig+0x474>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215a:	f7fe ff99 	bl	8001090 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002162:	f7fe ff95 	bl	8001090 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e10c      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	4b6a      	ldr	r3, [pc, #424]	@ (8002320 <HAL_RCC_OscConfig+0x474>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x2ea>
 8002188:	4b64      	ldr	r3, [pc, #400]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218c:	4a63      	ldr	r2, [pc, #396]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6713      	str	r3, [r2, #112]	@ 0x70
 8002194:	e01c      	b.n	80021d0 <HAL_RCC_OscConfig+0x324>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b05      	cmp	r3, #5
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x30c>
 800219e:	4b5f      	ldr	r3, [pc, #380]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a2:	4a5e      	ldr	r2, [pc, #376]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 80021a4:	f043 0304 	orr.w	r3, r3, #4
 80021a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021aa:	4b5c      	ldr	r3, [pc, #368]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ae:	4a5b      	ldr	r2, [pc, #364]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b6:	e00b      	b.n	80021d0 <HAL_RCC_OscConfig+0x324>
 80021b8:	4b58      	ldr	r3, [pc, #352]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021bc:	4a57      	ldr	r2, [pc, #348]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021c4:	4b55      	ldr	r3, [pc, #340]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c8:	4a54      	ldr	r2, [pc, #336]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 80021ca:	f023 0304 	bic.w	r3, r3, #4
 80021ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d015      	beq.n	8002204 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d8:	f7fe ff5a 	bl	8001090 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7fe ff56 	bl	8001090 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0cb      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f6:	4b49      	ldr	r3, [pc, #292]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0ee      	beq.n	80021e0 <HAL_RCC_OscConfig+0x334>
 8002202:	e014      	b.n	800222e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002204:	f7fe ff44 	bl	8001090 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220a:	e00a      	b.n	8002222 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220c:	f7fe ff40 	bl	8001090 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e0b5      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002222:	4b3e      	ldr	r3, [pc, #248]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1ee      	bne.n	800220c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800222e:	7dfb      	ldrb	r3, [r7, #23]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d105      	bne.n	8002240 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002234:	4b39      	ldr	r3, [pc, #228]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 8002236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002238:	4a38      	ldr	r2, [pc, #224]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 800223a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800223e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80a1 	beq.w	800238c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800224a:	4b34      	ldr	r3, [pc, #208]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b08      	cmp	r3, #8
 8002254:	d05c      	beq.n	8002310 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d141      	bne.n	80022e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	4b31      	ldr	r3, [pc, #196]	@ (8002324 <HAL_RCC_OscConfig+0x478>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe ff14 	bl	8001090 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226c:	f7fe ff10 	bl	8001090 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e087      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	4b27      	ldr	r3, [pc, #156]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69da      	ldr	r2, [r3, #28]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002298:	019b      	lsls	r3, r3, #6
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a0:	085b      	lsrs	r3, r3, #1
 80022a2:	3b01      	subs	r3, #1
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ac:	061b      	lsls	r3, r3, #24
 80022ae:	491b      	ldr	r1, [pc, #108]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002324 <HAL_RCC_OscConfig+0x478>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7fe fee9 	bl	8001090 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c2:	f7fe fee5 	bl	8001090 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e05c      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d4:	4b11      	ldr	r3, [pc, #68]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x416>
 80022e0:	e054      	b.n	800238c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <HAL_RCC_OscConfig+0x478>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7fe fed2 	bl	8001090 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fece 	bl	8001090 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e045      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_RCC_OscConfig+0x470>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x444>
 800230e:	e03d      	b.n	800238c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d107      	bne.n	8002328 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e038      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
 800231c:	40023800 	.word	0x40023800
 8002320:	40007000 	.word	0x40007000
 8002324:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002328:	4b1b      	ldr	r3, [pc, #108]	@ (8002398 <HAL_RCC_OscConfig+0x4ec>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d028      	beq.n	8002388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002340:	429a      	cmp	r2, r3
 8002342:	d121      	bne.n	8002388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d11a      	bne.n	8002388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002358:	4013      	ands	r3, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800235e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002360:	4293      	cmp	r3, r2
 8002362:	d111      	bne.n	8002388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236e:	085b      	lsrs	r3, r3, #1
 8002370:	3b01      	subs	r3, #1
 8002372:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d107      	bne.n	8002388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002382:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800

0800239c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0cc      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b0:	4b68      	ldr	r3, [pc, #416]	@ (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d90c      	bls.n	80023d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b65      	ldr	r3, [pc, #404]	@ (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b63      	ldr	r3, [pc, #396]	@ (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0b8      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f0:	4b59      	ldr	r3, [pc, #356]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	4a58      	ldr	r2, [pc, #352]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002408:	4b53      	ldr	r3, [pc, #332]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a52      	ldr	r2, [pc, #328]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002414:	4b50      	ldr	r3, [pc, #320]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	494d      	ldr	r1, [pc, #308]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d044      	beq.n	80024bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	4b47      	ldr	r3, [pc, #284]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d119      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e07f      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d003      	beq.n	800245a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002456:	2b03      	cmp	r3, #3
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	4b3f      	ldr	r3, [pc, #252]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e06f      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246a:	4b3b      	ldr	r3, [pc, #236]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e067      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247a:	4b37      	ldr	r3, [pc, #220]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f023 0203 	bic.w	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4934      	ldr	r1, [pc, #208]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	4313      	orrs	r3, r2
 800248a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800248c:	f7fe fe00 	bl	8001090 <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	e00a      	b.n	80024aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002494:	f7fe fdfc 	bl	8001090 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e04f      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 020c 	and.w	r2, r3, #12
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1eb      	bne.n	8002494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024bc:	4b25      	ldr	r3, [pc, #148]	@ (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d20c      	bcs.n	80024e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b22      	ldr	r3, [pc, #136]	@ (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b20      	ldr	r3, [pc, #128]	@ (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e032      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f0:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4916      	ldr	r1, [pc, #88]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250e:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	490e      	ldr	r1, [pc, #56]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	4313      	orrs	r3, r2
 8002520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002522:	f000 f821 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8002526:	4602      	mov	r2, r0
 8002528:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	490a      	ldr	r1, [pc, #40]	@ (800255c <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	5ccb      	ldrb	r3, [r1, r3]
 8002536:	fa22 f303 	lsr.w	r3, r2, r3
 800253a:	4a09      	ldr	r2, [pc, #36]	@ (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800253e:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fc40 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023c00 	.word	0x40023c00
 8002558:	40023800 	.word	0x40023800
 800255c:	080063b4 	.word	0x080063b4
 8002560:	20000000 	.word	0x20000000
 8002564:	20000004 	.word	0x20000004

08002568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800256c:	b094      	sub	sp, #80	@ 0x50
 800256e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	647b      	str	r3, [r7, #68]	@ 0x44
 8002574:	2300      	movs	r3, #0
 8002576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002578:	2300      	movs	r3, #0
 800257a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002580:	4b79      	ldr	r3, [pc, #484]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x200>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d00d      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x40>
 800258c:	2b08      	cmp	r3, #8
 800258e:	f200 80e1 	bhi.w	8002754 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x34>
 8002596:	2b04      	cmp	r3, #4
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800259a:	e0db      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800259c:	4b73      	ldr	r3, [pc, #460]	@ (800276c <HAL_RCC_GetSysClockFreq+0x204>)
 800259e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80025a0:	e0db      	b.n	800275a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025a2:	4b73      	ldr	r3, [pc, #460]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x208>)
 80025a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025a6:	e0d8      	b.n	800275a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x200>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d063      	beq.n	8002686 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025be:	4b6a      	ldr	r3, [pc, #424]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	099b      	lsrs	r3, r3, #6
 80025c4:	2200      	movs	r2, #0
 80025c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80025d2:	2300      	movs	r3, #0
 80025d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80025d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025da:	4622      	mov	r2, r4
 80025dc:	462b      	mov	r3, r5
 80025de:	f04f 0000 	mov.w	r0, #0
 80025e2:	f04f 0100 	mov.w	r1, #0
 80025e6:	0159      	lsls	r1, r3, #5
 80025e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ec:	0150      	lsls	r0, r2, #5
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4621      	mov	r1, r4
 80025f4:	1a51      	subs	r1, r2, r1
 80025f6:	6139      	str	r1, [r7, #16]
 80025f8:	4629      	mov	r1, r5
 80025fa:	eb63 0301 	sbc.w	r3, r3, r1
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800260c:	4659      	mov	r1, fp
 800260e:	018b      	lsls	r3, r1, #6
 8002610:	4651      	mov	r1, sl
 8002612:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002616:	4651      	mov	r1, sl
 8002618:	018a      	lsls	r2, r1, #6
 800261a:	4651      	mov	r1, sl
 800261c:	ebb2 0801 	subs.w	r8, r2, r1
 8002620:	4659      	mov	r1, fp
 8002622:	eb63 0901 	sbc.w	r9, r3, r1
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800263a:	4690      	mov	r8, r2
 800263c:	4699      	mov	r9, r3
 800263e:	4623      	mov	r3, r4
 8002640:	eb18 0303 	adds.w	r3, r8, r3
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	462b      	mov	r3, r5
 8002648:	eb49 0303 	adc.w	r3, r9, r3
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800265a:	4629      	mov	r1, r5
 800265c:	024b      	lsls	r3, r1, #9
 800265e:	4621      	mov	r1, r4
 8002660:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002664:	4621      	mov	r1, r4
 8002666:	024a      	lsls	r2, r1, #9
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800266e:	2200      	movs	r2, #0
 8002670:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002674:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002678:	f7fd fe12 	bl	80002a0 <__aeabi_uldivmod>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4613      	mov	r3, r2
 8002682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002684:	e058      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002686:	4b38      	ldr	r3, [pc, #224]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x200>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	099b      	lsrs	r3, r3, #6
 800268c:	2200      	movs	r2, #0
 800268e:	4618      	mov	r0, r3
 8002690:	4611      	mov	r1, r2
 8002692:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002696:	623b      	str	r3, [r7, #32]
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
 800269c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026a0:	4642      	mov	r2, r8
 80026a2:	464b      	mov	r3, r9
 80026a4:	f04f 0000 	mov.w	r0, #0
 80026a8:	f04f 0100 	mov.w	r1, #0
 80026ac:	0159      	lsls	r1, r3, #5
 80026ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b2:	0150      	lsls	r0, r2, #5
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4641      	mov	r1, r8
 80026ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80026be:	4649      	mov	r1, r9
 80026c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026d8:	ebb2 040a 	subs.w	r4, r2, sl
 80026dc:	eb63 050b 	sbc.w	r5, r3, fp
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	00eb      	lsls	r3, r5, #3
 80026ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ee:	00e2      	lsls	r2, r4, #3
 80026f0:	4614      	mov	r4, r2
 80026f2:	461d      	mov	r5, r3
 80026f4:	4643      	mov	r3, r8
 80026f6:	18e3      	adds	r3, r4, r3
 80026f8:	603b      	str	r3, [r7, #0]
 80026fa:	464b      	mov	r3, r9
 80026fc:	eb45 0303 	adc.w	r3, r5, r3
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800270e:	4629      	mov	r1, r5
 8002710:	028b      	lsls	r3, r1, #10
 8002712:	4621      	mov	r1, r4
 8002714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002718:	4621      	mov	r1, r4
 800271a:	028a      	lsls	r2, r1, #10
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002722:	2200      	movs	r2, #0
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	61fa      	str	r2, [r7, #28]
 8002728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800272c:	f7fd fdb8 	bl	80002a0 <__aeabi_uldivmod>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4613      	mov	r3, r2
 8002736:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002738:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x200>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	0c1b      	lsrs	r3, r3, #16
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	3301      	adds	r3, #1
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002748:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800274a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800274c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002750:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002752:	e002      	b.n	800275a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002754:	4b05      	ldr	r3, [pc, #20]	@ (800276c <HAL_RCC_GetSysClockFreq+0x204>)
 8002756:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800275a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800275c:	4618      	mov	r0, r3
 800275e:	3750      	adds	r7, #80	@ 0x50
 8002760:	46bd      	mov	sp, r7
 8002762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	00f42400 	.word	0x00f42400
 8002770:	007a1200 	.word	0x007a1200

08002774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002778:	4b03      	ldr	r3, [pc, #12]	@ (8002788 <HAL_RCC_GetHCLKFreq+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000000 	.word	0x20000000

0800278c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002790:	f7ff fff0 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0a9b      	lsrs	r3, r3, #10
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4903      	ldr	r1, [pc, #12]	@ (80027b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	080063c4 	.word	0x080063c4

080027b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027b8:	f7ff ffdc 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0b5b      	lsrs	r3, r3, #13
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4903      	ldr	r1, [pc, #12]	@ (80027d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	080063c4 	.word	0x080063c4

080027dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	220f      	movs	r2, #15
 80027ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027ec:	4b12      	ldr	r3, [pc, #72]	@ (8002838 <HAL_RCC_GetClockConfig+0x5c>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 0203 	and.w	r2, r3, #3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002838 <HAL_RCC_GetClockConfig+0x5c>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002804:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <HAL_RCC_GetClockConfig+0x5c>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002810:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HAL_RCC_GetClockConfig+0x5c>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	08db      	lsrs	r3, r3, #3
 8002816:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800281e:	4b07      	ldr	r3, [pc, #28]	@ (800283c <HAL_RCC_GetClockConfig+0x60>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 020f 	and.w	r2, r3, #15
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	601a      	str	r2, [r3, #0]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800
 800283c:	40023c00 	.word	0x40023c00

08002840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e041      	b.n	80028d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f839 	bl	80028de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3304      	adds	r3, #4
 800287c:	4619      	mov	r1, r3
 800287e:	4610      	mov	r0, r2
 8002880:	f000 f9c0 	bl	8002c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d001      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e04e      	b.n	80029aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a23      	ldr	r2, [pc, #140]	@ (80029b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d022      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x80>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002936:	d01d      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x80>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1f      	ldr	r2, [pc, #124]	@ (80029bc <HAL_TIM_Base_Start_IT+0xc8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d018      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x80>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1e      	ldr	r2, [pc, #120]	@ (80029c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x80>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1c      	ldr	r2, [pc, #112]	@ (80029c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00e      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x80>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1b      	ldr	r2, [pc, #108]	@ (80029c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x80>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a19      	ldr	r2, [pc, #100]	@ (80029cc <HAL_TIM_Base_Start_IT+0xd8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x80>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a18      	ldr	r2, [pc, #96]	@ (80029d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d111      	bne.n	8002998 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b06      	cmp	r3, #6
 8002984:	d010      	beq.n	80029a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002996:	e007      	b.n	80029a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40010000 	.word	0x40010000
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40000800 	.word	0x40000800
 80029c4:	40000c00 	.word	0x40000c00
 80029c8:	40010400 	.word	0x40010400
 80029cc:	40014000 	.word	0x40014000
 80029d0:	40001800 	.word	0x40001800

080029d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d020      	beq.n	8002a38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01b      	beq.n	8002a38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0202 	mvn.w	r2, #2
 8002a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f8d2 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 8002a24:	e005      	b.n	8002a32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f8c4 	bl	8002bb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f8d5 	bl	8002bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d020      	beq.n	8002a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01b      	beq.n	8002a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0204 	mvn.w	r2, #4
 8002a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8ac 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 8002a70:	e005      	b.n	8002a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f89e 	bl	8002bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f8af 	bl	8002bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d020      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01b      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0208 	mvn.w	r2, #8
 8002aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f886 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 8002abc:	e005      	b.n	8002aca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f878 	bl	8002bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f889 	bl	8002bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d020      	beq.n	8002b1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01b      	beq.n	8002b1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0210 	mvn.w	r2, #16
 8002aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2208      	movs	r2, #8
 8002af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f860 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 8002b08:	e005      	b.n	8002b16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f852 	bl	8002bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f863 	bl	8002bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00c      	beq.n	8002b40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0201 	mvn.w	r2, #1
 8002b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fd ff98 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00c      	beq.n	8002b64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f906 	bl	8002d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00c      	beq.n	8002b88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f834 	bl	8002bf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00c      	beq.n	8002bac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0220 	mvn.w	r2, #32
 8002ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8d8 	bl	8002d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a46      	ldr	r2, [pc, #280]	@ (8002d30 <TIM_Base_SetConfig+0x12c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d013      	beq.n	8002c44 <TIM_Base_SetConfig+0x40>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c22:	d00f      	beq.n	8002c44 <TIM_Base_SetConfig+0x40>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a43      	ldr	r2, [pc, #268]	@ (8002d34 <TIM_Base_SetConfig+0x130>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <TIM_Base_SetConfig+0x40>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a42      	ldr	r2, [pc, #264]	@ (8002d38 <TIM_Base_SetConfig+0x134>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d007      	beq.n	8002c44 <TIM_Base_SetConfig+0x40>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a41      	ldr	r2, [pc, #260]	@ (8002d3c <TIM_Base_SetConfig+0x138>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_Base_SetConfig+0x40>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a40      	ldr	r2, [pc, #256]	@ (8002d40 <TIM_Base_SetConfig+0x13c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d108      	bne.n	8002c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a35      	ldr	r2, [pc, #212]	@ (8002d30 <TIM_Base_SetConfig+0x12c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d02b      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c64:	d027      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a32      	ldr	r2, [pc, #200]	@ (8002d34 <TIM_Base_SetConfig+0x130>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d023      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a31      	ldr	r2, [pc, #196]	@ (8002d38 <TIM_Base_SetConfig+0x134>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01f      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a30      	ldr	r2, [pc, #192]	@ (8002d3c <TIM_Base_SetConfig+0x138>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01b      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a2f      	ldr	r2, [pc, #188]	@ (8002d40 <TIM_Base_SetConfig+0x13c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d017      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a2e      	ldr	r2, [pc, #184]	@ (8002d44 <TIM_Base_SetConfig+0x140>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a2d      	ldr	r2, [pc, #180]	@ (8002d48 <TIM_Base_SetConfig+0x144>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00f      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a2c      	ldr	r2, [pc, #176]	@ (8002d4c <TIM_Base_SetConfig+0x148>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00b      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d50 <TIM_Base_SetConfig+0x14c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8002d54 <TIM_Base_SetConfig+0x150>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d003      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a29      	ldr	r2, [pc, #164]	@ (8002d58 <TIM_Base_SetConfig+0x154>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d108      	bne.n	8002cc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a10      	ldr	r2, [pc, #64]	@ (8002d30 <TIM_Base_SetConfig+0x12c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d003      	beq.n	8002cfc <TIM_Base_SetConfig+0xf8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a12      	ldr	r2, [pc, #72]	@ (8002d40 <TIM_Base_SetConfig+0x13c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d103      	bne.n	8002d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d105      	bne.n	8002d22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f023 0201 	bic.w	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	611a      	str	r2, [r3, #16]
  }
}
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40010000 	.word	0x40010000
 8002d34:	40000400 	.word	0x40000400
 8002d38:	40000800 	.word	0x40000800
 8002d3c:	40000c00 	.word	0x40000c00
 8002d40:	40010400 	.word	0x40010400
 8002d44:	40014000 	.word	0x40014000
 8002d48:	40014400 	.word	0x40014400
 8002d4c:	40014800 	.word	0x40014800
 8002d50:	40001800 	.word	0x40001800
 8002d54:	40001c00 	.word	0x40001c00
 8002d58:	40002000 	.word	0x40002000

08002d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e042      	b.n	8002e1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fd ff6a 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	@ 0x24
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f82b 	bl	8002e24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e28:	b0c0      	sub	sp, #256	@ 0x100
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e40:	68d9      	ldr	r1, [r3, #12]
 8002e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	ea40 0301 	orr.w	r3, r0, r1
 8002e4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e7c:	f021 010c 	bic.w	r1, r1, #12
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9e:	6999      	ldr	r1, [r3, #24]
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	ea40 0301 	orr.w	r3, r0, r1
 8002eaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b8f      	ldr	r3, [pc, #572]	@ (80030f0 <UART_SetConfig+0x2cc>)
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d005      	beq.n	8002ec4 <UART_SetConfig+0xa0>
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	4b8d      	ldr	r3, [pc, #564]	@ (80030f4 <UART_SetConfig+0x2d0>)
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d104      	bne.n	8002ece <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ec4:	f7ff fc76 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 8002ec8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ecc:	e003      	b.n	8002ed6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ece:	f7ff fc5d 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8002ed2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ee0:	f040 810c 	bne.w	80030fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002eee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ef2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ef6:	4622      	mov	r2, r4
 8002ef8:	462b      	mov	r3, r5
 8002efa:	1891      	adds	r1, r2, r2
 8002efc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002efe:	415b      	adcs	r3, r3
 8002f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f06:	4621      	mov	r1, r4
 8002f08:	eb12 0801 	adds.w	r8, r2, r1
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	eb43 0901 	adc.w	r9, r3, r1
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f26:	4690      	mov	r8, r2
 8002f28:	4699      	mov	r9, r3
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	eb18 0303 	adds.w	r3, r8, r3
 8002f30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f34:	462b      	mov	r3, r5
 8002f36:	eb49 0303 	adc.w	r3, r9, r3
 8002f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f52:	460b      	mov	r3, r1
 8002f54:	18db      	adds	r3, r3, r3
 8002f56:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f58:	4613      	mov	r3, r2
 8002f5a:	eb42 0303 	adc.w	r3, r2, r3
 8002f5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f68:	f7fd f99a 	bl	80002a0 <__aeabi_uldivmod>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4b61      	ldr	r3, [pc, #388]	@ (80030f8 <UART_SetConfig+0x2d4>)
 8002f72:	fba3 2302 	umull	r2, r3, r3, r2
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	011c      	lsls	r4, r3, #4
 8002f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f8c:	4642      	mov	r2, r8
 8002f8e:	464b      	mov	r3, r9
 8002f90:	1891      	adds	r1, r2, r2
 8002f92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f94:	415b      	adcs	r3, r3
 8002f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f9c:	4641      	mov	r1, r8
 8002f9e:	eb12 0a01 	adds.w	sl, r2, r1
 8002fa2:	4649      	mov	r1, r9
 8002fa4:	eb43 0b01 	adc.w	fp, r3, r1
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fbc:	4692      	mov	sl, r2
 8002fbe:	469b      	mov	fp, r3
 8002fc0:	4643      	mov	r3, r8
 8002fc2:	eb1a 0303 	adds.w	r3, sl, r3
 8002fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	eb4b 0303 	adc.w	r3, fp, r3
 8002fd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fe0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fe4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	18db      	adds	r3, r3, r3
 8002fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fee:	4613      	mov	r3, r2
 8002ff0:	eb42 0303 	adc.w	r3, r2, r3
 8002ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ff6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ffa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002ffe:	f7fd f94f 	bl	80002a0 <__aeabi_uldivmod>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4611      	mov	r1, r2
 8003008:	4b3b      	ldr	r3, [pc, #236]	@ (80030f8 <UART_SetConfig+0x2d4>)
 800300a:	fba3 2301 	umull	r2, r3, r3, r1
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2264      	movs	r2, #100	@ 0x64
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	1acb      	subs	r3, r1, r3
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800301e:	4b36      	ldr	r3, [pc, #216]	@ (80030f8 <UART_SetConfig+0x2d4>)
 8003020:	fba3 2302 	umull	r2, r3, r3, r2
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800302c:	441c      	add	r4, r3
 800302e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003032:	2200      	movs	r2, #0
 8003034:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003038:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800303c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003040:	4642      	mov	r2, r8
 8003042:	464b      	mov	r3, r9
 8003044:	1891      	adds	r1, r2, r2
 8003046:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003048:	415b      	adcs	r3, r3
 800304a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800304c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003050:	4641      	mov	r1, r8
 8003052:	1851      	adds	r1, r2, r1
 8003054:	6339      	str	r1, [r7, #48]	@ 0x30
 8003056:	4649      	mov	r1, r9
 8003058:	414b      	adcs	r3, r1
 800305a:	637b      	str	r3, [r7, #52]	@ 0x34
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003068:	4659      	mov	r1, fp
 800306a:	00cb      	lsls	r3, r1, #3
 800306c:	4651      	mov	r1, sl
 800306e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003072:	4651      	mov	r1, sl
 8003074:	00ca      	lsls	r2, r1, #3
 8003076:	4610      	mov	r0, r2
 8003078:	4619      	mov	r1, r3
 800307a:	4603      	mov	r3, r0
 800307c:	4642      	mov	r2, r8
 800307e:	189b      	adds	r3, r3, r2
 8003080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003084:	464b      	mov	r3, r9
 8003086:	460a      	mov	r2, r1
 8003088:	eb42 0303 	adc.w	r3, r2, r3
 800308c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800309c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030a4:	460b      	mov	r3, r1
 80030a6:	18db      	adds	r3, r3, r3
 80030a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030aa:	4613      	mov	r3, r2
 80030ac:	eb42 0303 	adc.w	r3, r2, r3
 80030b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80030ba:	f7fd f8f1 	bl	80002a0 <__aeabi_uldivmod>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4b0d      	ldr	r3, [pc, #52]	@ (80030f8 <UART_SetConfig+0x2d4>)
 80030c4:	fba3 1302 	umull	r1, r3, r3, r2
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	2164      	movs	r1, #100	@ 0x64
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	3332      	adds	r3, #50	@ 0x32
 80030d6:	4a08      	ldr	r2, [pc, #32]	@ (80030f8 <UART_SetConfig+0x2d4>)
 80030d8:	fba2 2303 	umull	r2, r3, r2, r3
 80030dc:	095b      	lsrs	r3, r3, #5
 80030de:	f003 0207 	and.w	r2, r3, #7
 80030e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4422      	add	r2, r4
 80030ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030ec:	e106      	b.n	80032fc <UART_SetConfig+0x4d8>
 80030ee:	bf00      	nop
 80030f0:	40011000 	.word	0x40011000
 80030f4:	40011400 	.word	0x40011400
 80030f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003100:	2200      	movs	r2, #0
 8003102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003106:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800310a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800310e:	4642      	mov	r2, r8
 8003110:	464b      	mov	r3, r9
 8003112:	1891      	adds	r1, r2, r2
 8003114:	6239      	str	r1, [r7, #32]
 8003116:	415b      	adcs	r3, r3
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
 800311a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800311e:	4641      	mov	r1, r8
 8003120:	1854      	adds	r4, r2, r1
 8003122:	4649      	mov	r1, r9
 8003124:	eb43 0501 	adc.w	r5, r3, r1
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	00eb      	lsls	r3, r5, #3
 8003132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003136:	00e2      	lsls	r2, r4, #3
 8003138:	4614      	mov	r4, r2
 800313a:	461d      	mov	r5, r3
 800313c:	4643      	mov	r3, r8
 800313e:	18e3      	adds	r3, r4, r3
 8003140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003144:	464b      	mov	r3, r9
 8003146:	eb45 0303 	adc.w	r3, r5, r3
 800314a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800314e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800315a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800316a:	4629      	mov	r1, r5
 800316c:	008b      	lsls	r3, r1, #2
 800316e:	4621      	mov	r1, r4
 8003170:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003174:	4621      	mov	r1, r4
 8003176:	008a      	lsls	r2, r1, #2
 8003178:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800317c:	f7fd f890 	bl	80002a0 <__aeabi_uldivmod>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4b60      	ldr	r3, [pc, #384]	@ (8003308 <UART_SetConfig+0x4e4>)
 8003186:	fba3 2302 	umull	r2, r3, r3, r2
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	011c      	lsls	r4, r3, #4
 800318e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003192:	2200      	movs	r2, #0
 8003194:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003198:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800319c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031a0:	4642      	mov	r2, r8
 80031a2:	464b      	mov	r3, r9
 80031a4:	1891      	adds	r1, r2, r2
 80031a6:	61b9      	str	r1, [r7, #24]
 80031a8:	415b      	adcs	r3, r3
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b0:	4641      	mov	r1, r8
 80031b2:	1851      	adds	r1, r2, r1
 80031b4:	6139      	str	r1, [r7, #16]
 80031b6:	4649      	mov	r1, r9
 80031b8:	414b      	adcs	r3, r1
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031c8:	4659      	mov	r1, fp
 80031ca:	00cb      	lsls	r3, r1, #3
 80031cc:	4651      	mov	r1, sl
 80031ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031d2:	4651      	mov	r1, sl
 80031d4:	00ca      	lsls	r2, r1, #3
 80031d6:	4610      	mov	r0, r2
 80031d8:	4619      	mov	r1, r3
 80031da:	4603      	mov	r3, r0
 80031dc:	4642      	mov	r2, r8
 80031de:	189b      	adds	r3, r3, r2
 80031e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031e4:	464b      	mov	r3, r9
 80031e6:	460a      	mov	r2, r1
 80031e8:	eb42 0303 	adc.w	r3, r2, r3
 80031ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003208:	4649      	mov	r1, r9
 800320a:	008b      	lsls	r3, r1, #2
 800320c:	4641      	mov	r1, r8
 800320e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003212:	4641      	mov	r1, r8
 8003214:	008a      	lsls	r2, r1, #2
 8003216:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800321a:	f7fd f841 	bl	80002a0 <__aeabi_uldivmod>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4611      	mov	r1, r2
 8003224:	4b38      	ldr	r3, [pc, #224]	@ (8003308 <UART_SetConfig+0x4e4>)
 8003226:	fba3 2301 	umull	r2, r3, r3, r1
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2264      	movs	r2, #100	@ 0x64
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	1acb      	subs	r3, r1, r3
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	3332      	adds	r3, #50	@ 0x32
 8003238:	4a33      	ldr	r2, [pc, #204]	@ (8003308 <UART_SetConfig+0x4e4>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003244:	441c      	add	r4, r3
 8003246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800324a:	2200      	movs	r2, #0
 800324c:	673b      	str	r3, [r7, #112]	@ 0x70
 800324e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003250:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003254:	4642      	mov	r2, r8
 8003256:	464b      	mov	r3, r9
 8003258:	1891      	adds	r1, r2, r2
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	415b      	adcs	r3, r3
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003264:	4641      	mov	r1, r8
 8003266:	1851      	adds	r1, r2, r1
 8003268:	6039      	str	r1, [r7, #0]
 800326a:	4649      	mov	r1, r9
 800326c:	414b      	adcs	r3, r1
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800327c:	4659      	mov	r1, fp
 800327e:	00cb      	lsls	r3, r1, #3
 8003280:	4651      	mov	r1, sl
 8003282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003286:	4651      	mov	r1, sl
 8003288:	00ca      	lsls	r2, r1, #3
 800328a:	4610      	mov	r0, r2
 800328c:	4619      	mov	r1, r3
 800328e:	4603      	mov	r3, r0
 8003290:	4642      	mov	r2, r8
 8003292:	189b      	adds	r3, r3, r2
 8003294:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003296:	464b      	mov	r3, r9
 8003298:	460a      	mov	r2, r1
 800329a:	eb42 0303 	adc.w	r3, r2, r3
 800329e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80032aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80032b8:	4649      	mov	r1, r9
 80032ba:	008b      	lsls	r3, r1, #2
 80032bc:	4641      	mov	r1, r8
 80032be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c2:	4641      	mov	r1, r8
 80032c4:	008a      	lsls	r2, r1, #2
 80032c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80032ca:	f7fc ffe9 	bl	80002a0 <__aeabi_uldivmod>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <UART_SetConfig+0x4e4>)
 80032d4:	fba3 1302 	umull	r1, r3, r3, r2
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	2164      	movs	r1, #100	@ 0x64
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	3332      	adds	r3, #50	@ 0x32
 80032e6:	4a08      	ldr	r2, [pc, #32]	@ (8003308 <UART_SetConfig+0x4e4>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	f003 020f 	and.w	r2, r3, #15
 80032f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4422      	add	r2, r4
 80032fa:	609a      	str	r2, [r3, #8]
}
 80032fc:	bf00      	nop
 80032fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003302:	46bd      	mov	sp, r7
 8003304:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003308:	51eb851f 	.word	0x51eb851f

0800330c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800330c:	b084      	sub	sp, #16
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	f107 001c 	add.w	r0, r7, #28
 800331a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800331e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003322:	2b01      	cmp	r3, #1
 8003324:	d123      	bne.n	800336e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800333a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800334e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003352:	2b01      	cmp	r3, #1
 8003354:	d105      	bne.n	8003362 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 faa0 	bl	80038a8 <USB_CoreReset>
 8003368:	4603      	mov	r3, r0
 800336a:	73fb      	strb	r3, [r7, #15]
 800336c:	e01b      	b.n	80033a6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fa94 	bl	80038a8 <USB_CoreReset>
 8003380:	4603      	mov	r3, r0
 8003382:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003384:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003388:	2b00      	cmp	r3, #0
 800338a:	d106      	bne.n	800339a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003390:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	639a      	str	r2, [r3, #56]	@ 0x38
 8003398:	e005      	b.n	80033a6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80033a6:	7fbb      	ldrb	r3, [r7, #30]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d10b      	bne.n	80033c4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f043 0206 	orr.w	r2, r3, #6
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033d0:	b004      	add	sp, #16
 80033d2:	4770      	bx	lr

080033d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f023 0201 	bic.w	r2, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d115      	bne.n	8003444 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003424:	200a      	movs	r0, #10
 8003426:	f7fd fe3f 	bl	80010a8 <HAL_Delay>
      ms += 10U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	330a      	adds	r3, #10
 800342e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fa2b 	bl	800388c <USB_GetMode>
 8003436:	4603      	mov	r3, r0
 8003438:	2b01      	cmp	r3, #1
 800343a:	d01e      	beq.n	800347a <USB_SetCurrentMode+0x84>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003440:	d9f0      	bls.n	8003424 <USB_SetCurrentMode+0x2e>
 8003442:	e01a      	b.n	800347a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d115      	bne.n	8003476 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003456:	200a      	movs	r0, #10
 8003458:	f7fd fe26 	bl	80010a8 <HAL_Delay>
      ms += 10U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	330a      	adds	r3, #10
 8003460:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fa12 	bl	800388c <USB_GetMode>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <USB_SetCurrentMode+0x84>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2bc7      	cmp	r3, #199	@ 0xc7
 8003472:	d9f0      	bls.n	8003456 <USB_SetCurrentMode+0x60>
 8003474:	e001      	b.n	800347a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e005      	b.n	8003486 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2bc8      	cmp	r3, #200	@ 0xc8
 800347e:	d101      	bne.n	8003484 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003490:	b084      	sub	sp, #16
 8003492:	b580      	push	{r7, lr}
 8003494:	b086      	sub	sp, #24
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800349e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	e009      	b.n	80034c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	3340      	adds	r3, #64	@ 0x40
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	2200      	movs	r2, #0
 80034bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	3301      	adds	r3, #1
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b0e      	cmp	r3, #14
 80034c8:	d9f2      	bls.n	80034b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80034ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d11c      	bne.n	800350c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034e0:	f043 0302 	orr.w	r3, r3, #2
 80034e4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003502:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	639a      	str	r2, [r3, #56]	@ 0x38
 800350a:	e00b      	b.n	8003524 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003510:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800352a:	461a      	mov	r2, r3
 800352c:	2300      	movs	r3, #0
 800352e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003530:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003534:	2b01      	cmp	r3, #1
 8003536:	d10d      	bne.n	8003554 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800353c:	2b00      	cmp	r3, #0
 800353e:	d104      	bne.n	800354a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003540:	2100      	movs	r1, #0
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f968 	bl	8003818 <USB_SetDevSpeed>
 8003548:	e008      	b.n	800355c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800354a:	2101      	movs	r1, #1
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f963 	bl	8003818 <USB_SetDevSpeed>
 8003552:	e003      	b.n	800355c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003554:	2103      	movs	r1, #3
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f95e 	bl	8003818 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800355c:	2110      	movs	r1, #16
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f8fa 	bl	8003758 <USB_FlushTxFifo>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f924 	bl	80037bc <USB_FlushRxFifo>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003584:	461a      	mov	r2, r3
 8003586:	2300      	movs	r3, #0
 8003588:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003590:	461a      	mov	r2, r3
 8003592:	2300      	movs	r3, #0
 8003594:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800359c:	461a      	mov	r2, r3
 800359e:	2300      	movs	r3, #0
 80035a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	e043      	b.n	8003630 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035be:	d118      	bne.n	80035f2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d2:	461a      	mov	r2, r3
 80035d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e013      	b.n	8003604 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e8:	461a      	mov	r2, r3
 80035ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	e008      	b.n	8003604 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035fe:	461a      	mov	r2, r3
 8003600:	2300      	movs	r3, #0
 8003602:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003610:	461a      	mov	r2, r3
 8003612:	2300      	movs	r3, #0
 8003614:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003622:	461a      	mov	r2, r3
 8003624:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003628:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	3301      	adds	r3, #1
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003634:	461a      	mov	r2, r3
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4293      	cmp	r3, r2
 800363a:	d3b5      	bcc.n	80035a8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800363c:	2300      	movs	r3, #0
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	e043      	b.n	80036ca <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003654:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003658:	d118      	bne.n	800368c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800366c:	461a      	mov	r2, r3
 800366e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e013      	b.n	800369e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4413      	add	r3, r2
 800367e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003682:	461a      	mov	r2, r3
 8003684:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	e008      	b.n	800369e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003698:	461a      	mov	r2, r3
 800369a:	2300      	movs	r3, #0
 800369c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036aa:	461a      	mov	r2, r3
 80036ac:	2300      	movs	r3, #0
 80036ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036bc:	461a      	mov	r2, r3
 80036be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80036c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	3301      	adds	r3, #1
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80036ce:	461a      	mov	r2, r3
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d3b5      	bcc.n	8003642 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036e8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80036f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80036f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d105      	bne.n	800370c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f043 0210 	orr.w	r2, r3, #16
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699a      	ldr	r2, [r3, #24]
 8003710:	4b10      	ldr	r3, [pc, #64]	@ (8003754 <USB_DevInit+0x2c4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003718:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f043 0208 	orr.w	r2, r3, #8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800372c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003730:	2b01      	cmp	r3, #1
 8003732:	d107      	bne.n	8003744 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800373c:	f043 0304 	orr.w	r3, r3, #4
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003744:	7dfb      	ldrb	r3, [r7, #23]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003750:	b004      	add	sp, #16
 8003752:	4770      	bx	lr
 8003754:	803c3800 	.word	0x803c3800

08003758 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3301      	adds	r3, #1
 800376a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003772:	d901      	bls.n	8003778 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e01b      	b.n	80037b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	daf2      	bge.n	8003766 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	019b      	lsls	r3, r3, #6
 8003788:	f043 0220 	orr.w	r2, r3, #32
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3301      	adds	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800379c:	d901      	bls.n	80037a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e006      	b.n	80037b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d0f0      	beq.n	8003790 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	3301      	adds	r3, #1
 80037cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037d4:	d901      	bls.n	80037da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e018      	b.n	800380c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	daf2      	bge.n	80037c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2210      	movs	r2, #16
 80037ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3301      	adds	r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037f8:	d901      	bls.n	80037fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e006      	b.n	800380c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b10      	cmp	r3, #16
 8003808:	d0f0      	beq.n	80037ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	68f9      	ldr	r1, [r7, #12]
 8003834:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003838:	4313      	orrs	r3, r2
 800383a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800384a:	b480      	push	{r7}
 800384c:	b085      	sub	sp, #20
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003864:	f023 0303 	bic.w	r3, r3, #3
 8003868:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003878:	f043 0302 	orr.w	r3, r3, #2
 800387c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f003 0301 	and.w	r3, r3, #1
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3301      	adds	r3, #1
 80038b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80038c0:	d901      	bls.n	80038c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e01b      	b.n	80038fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	daf2      	bge.n	80038b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f043 0201 	orr.w	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3301      	adds	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80038ea:	d901      	bls.n	80038f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e006      	b.n	80038fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d0f0      	beq.n	80038de <USB_CoreReset+0x36>

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800390a:	b480      	push	{r7}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800391c:	2b84      	cmp	r3, #132	@ 0x84
 800391e:	d005      	beq.n	800392c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003920:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	3303      	adds	r3, #3
 800392a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800392c:	68fb      	ldr	r3, [r7, #12]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800393e:	f000 fb3f 	bl	8003fc0 <vTaskStartScheduler>
  
  return osOK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}

08003948 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394a:	b087      	sub	sp, #28
 800394c:	af02      	add	r7, sp, #8
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685c      	ldr	r4, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800395e:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff ffcf 	bl	800390a <makeFreeRtosPriority>
 800396c:	4602      	mov	r2, r0
 800396e:	f107 030c 	add.w	r3, r7, #12
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	9200      	str	r2, [sp, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	4632      	mov	r2, r6
 800397a:	4629      	mov	r1, r5
 800397c:	4620      	mov	r0, r4
 800397e:	f000 f8d9 	bl	8003b34 <xTaskCreate>
 8003982:	4603      	mov	r3, r0
 8003984:	2b01      	cmp	r3, #1
 8003986:	d001      	beq.n	800398c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003988:	2300      	movs	r3, #0
 800398a:	e000      	b.n	800398e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800398c:	68fb      	ldr	r3, [r7, #12]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003998 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a09      	ldr	r2, [pc, #36]	@ (80039c8 <osDelay+0x30>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	099b      	lsrs	r3, r3, #6
 80039aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <osDelay+0x1e>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	e000      	b.n	80039b8 <osDelay+0x20>
 80039b6:	2301      	movs	r3, #1
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fa07 	bl	8003dcc <vTaskDelay>
  
  return osOK;
 80039be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	10624dd3 	.word	0x10624dd3

080039cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f103 0208 	add.w	r2, r3, #8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295
 80039e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f103 0208 	add.w	r2, r3, #8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f103 0208 	add.w	r2, r3, #8
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a26:	b480      	push	{r7}
 8003a28:	b085      	sub	sp, #20
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	601a      	str	r2, [r3, #0]
}
 8003a62:	bf00      	nop
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d103      	bne.n	8003a8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	e00c      	b.n	8003aa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3308      	adds	r3, #8
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	e002      	b.n	8003a9c <vListInsert+0x2e>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d2f6      	bcs.n	8003a96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	601a      	str	r2, [r3, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6892      	ldr	r2, [r2, #8]
 8003af6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6852      	ldr	r2, [r2, #4]
 8003b00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d103      	bne.n	8003b14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	1e5a      	subs	r2, r3, #1
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08c      	sub	sp, #48	@ 0x30
 8003b38:	af04      	add	r7, sp, #16
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 ff7f 	bl	8004a4c <pvPortMalloc>
 8003b4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00e      	beq.n	8003b74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b56:	20a0      	movs	r0, #160	@ 0xa0
 8003b58:	f000 ff78 	bl	8004a4c <pvPortMalloc>
 8003b5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b6a:	e005      	b.n	8003b78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b6c:	6978      	ldr	r0, [r7, #20]
 8003b6e:	f001 f83b 	bl	8004be8 <vPortFree>
 8003b72:	e001      	b.n	8003b78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d013      	beq.n	8003ba6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b7e:	88fa      	ldrh	r2, [r7, #6]
 8003b80:	2300      	movs	r3, #0
 8003b82:	9303      	str	r3, [sp, #12]
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	9302      	str	r3, [sp, #8]
 8003b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f80f 	bl	8003bb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b9a:	69f8      	ldr	r0, [r7, #28]
 8003b9c:	f000 f8ac 	bl	8003cf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	e002      	b.n	8003bac <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8003baa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bac:	69bb      	ldr	r3, [r7, #24]
	}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	f023 0307 	bic.w	r3, r3, #7
 8003bde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	617b      	str	r3, [r7, #20]
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	e7fd      	b.n	8003bfe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01f      	beq.n	8003c48 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	e012      	b.n	8003c34 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	4413      	add	r3, r2
 8003c14:	7819      	ldrb	r1, [r3, #0]
 8003c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3334      	adds	r3, #52	@ 0x34
 8003c1e:	460a      	mov	r2, r1
 8003c20:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d006      	beq.n	8003c3c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3301      	adds	r3, #1
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	2b0f      	cmp	r3, #15
 8003c38:	d9e9      	bls.n	8003c0e <prvInitialiseNewTask+0x56>
 8003c3a:	e000      	b.n	8003c3e <prvInitialiseNewTask+0x86>
			{
				break;
 8003c3c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c46:	e003      	b.n	8003c50 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c52:	2b06      	cmp	r3, #6
 8003c54:	d901      	bls.n	8003c5a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c56:	2306      	movs	r3, #6
 8003c58:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c64:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c68:	2200      	movs	r2, #0
 8003c6a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff fecb 	bl	8003a0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c78:	3318      	adds	r3, #24
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff fec6 	bl	8003a0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c84:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c88:	f1c3 0207 	rsb	r2, r3, #7
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c94:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	334c      	adds	r3, #76	@ 0x4c
 8003caa:	224c      	movs	r2, #76	@ 0x4c
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f001 fa91 	bl	80051d6 <memset>
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8003cec <prvInitialiseNewTask+0x134>)
 8003cb8:	651a      	str	r2, [r3, #80]	@ 0x50
 8003cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8003cf0 <prvInitialiseNewTask+0x138>)
 8003cbe:	655a      	str	r2, [r3, #84]	@ 0x54
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8003cf4 <prvInitialiseNewTask+0x13c>)
 8003cc4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	68f9      	ldr	r1, [r7, #12]
 8003cca:	69b8      	ldr	r0, [r7, #24]
 8003ccc:	f000 fcb6 	bl	800463c <pxPortInitialiseStack>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ce0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ce2:	bf00      	nop
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20004598 	.word	0x20004598
 8003cf0:	20004600 	.word	0x20004600
 8003cf4:	20004668 	.word	0x20004668

08003cf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d00:	f000 fdca 	bl	8004898 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d04:	4b2a      	ldr	r3, [pc, #168]	@ (8003db0 <prvAddNewTaskToReadyList+0xb8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	4a29      	ldr	r2, [pc, #164]	@ (8003db0 <prvAddNewTaskToReadyList+0xb8>)
 8003d0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d0e:	4b29      	ldr	r3, [pc, #164]	@ (8003db4 <prvAddNewTaskToReadyList+0xbc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d109      	bne.n	8003d2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d16:	4a27      	ldr	r2, [pc, #156]	@ (8003db4 <prvAddNewTaskToReadyList+0xbc>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d1c:	4b24      	ldr	r3, [pc, #144]	@ (8003db0 <prvAddNewTaskToReadyList+0xb8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d110      	bne.n	8003d46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d24:	f000 fb80 	bl	8004428 <prvInitialiseTaskLists>
 8003d28:	e00d      	b.n	8003d46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d2a:	4b23      	ldr	r3, [pc, #140]	@ (8003db8 <prvAddNewTaskToReadyList+0xc0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d32:	4b20      	ldr	r3, [pc, #128]	@ (8003db4 <prvAddNewTaskToReadyList+0xbc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d802      	bhi.n	8003d46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d40:	4a1c      	ldr	r2, [pc, #112]	@ (8003db4 <prvAddNewTaskToReadyList+0xbc>)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d46:	4b1d      	ldr	r3, [pc, #116]	@ (8003dbc <prvAddNewTaskToReadyList+0xc4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003dbc <prvAddNewTaskToReadyList+0xc4>)
 8003d4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d54:	2201      	movs	r2, #1
 8003d56:	409a      	lsls	r2, r3
 8003d58:	4b19      	ldr	r3, [pc, #100]	@ (8003dc0 <prvAddNewTaskToReadyList+0xc8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	4a18      	ldr	r2, [pc, #96]	@ (8003dc0 <prvAddNewTaskToReadyList+0xc8>)
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4a15      	ldr	r2, [pc, #84]	@ (8003dc4 <prvAddNewTaskToReadyList+0xcc>)
 8003d70:	441a      	add	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3304      	adds	r3, #4
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f7ff fe54 	bl	8003a26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d7e:	f000 fdbd 	bl	80048fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d82:	4b0d      	ldr	r3, [pc, #52]	@ (8003db8 <prvAddNewTaskToReadyList+0xc0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00e      	beq.n	8003da8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003db4 <prvAddNewTaskToReadyList+0xbc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d207      	bcs.n	8003da8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d98:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <prvAddNewTaskToReadyList+0xd0>)
 8003d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20000944 	.word	0x20000944
 8003db4:	20000844 	.word	0x20000844
 8003db8:	20000950 	.word	0x20000950
 8003dbc:	20000960 	.word	0x20000960
 8003dc0:	2000094c 	.word	0x2000094c
 8003dc4:	20000848 	.word	0x20000848
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d018      	beq.n	8003e10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003dde:	4b14      	ldr	r3, [pc, #80]	@ (8003e30 <vTaskDelay+0x64>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <vTaskDelay+0x32>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	60bb      	str	r3, [r7, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	e7fd      	b.n	8003dfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003dfe:	f000 f931 	bl	8004064 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e02:	2100      	movs	r1, #0
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fbb3 	bl	8004570 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e0a:	f000 f939 	bl	8004080 <xTaskResumeAll>
 8003e0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d107      	bne.n	8003e26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003e16:	4b07      	ldr	r3, [pc, #28]	@ (8003e34 <vTaskDelay+0x68>)
 8003e18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e26:	bf00      	nop
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	2000096c 	.word	0x2000096c
 8003e34:	e000ed04 	.word	0xe000ed04

08003e38 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8003e40:	f000 fd2a 	bl	8004898 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <uxTaskPriorityGet+0x18>
 8003e4a:	4b07      	ldr	r3, [pc, #28]	@ (8003e68 <uxTaskPriorityGet+0x30>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	e000      	b.n	8003e52 <uxTaskPriorityGet+0x1a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e58:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8003e5a:	f000 fd4f 	bl	80048fc <vPortExitCritical>

		return uxReturn;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
	}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20000844 	.word	0x20000844

08003e6c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b06      	cmp	r3, #6
 8003e7e:	d90b      	bls.n	8003e98 <vTaskPrioritySet+0x2c>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	60fb      	str	r3, [r7, #12]
}
 8003e92:	bf00      	nop
 8003e94:	bf00      	nop
 8003e96:	e7fd      	b.n	8003e94 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b06      	cmp	r3, #6
 8003e9c:	d901      	bls.n	8003ea2 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e9e:	2306      	movs	r3, #6
 8003ea0:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8003ea2:	f000 fcf9 	bl	8004898 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <vTaskPrioritySet+0x46>
 8003eac:	4b40      	ldr	r3, [pc, #256]	@ (8003fb0 <vTaskPrioritySet+0x144>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	e000      	b.n	8003eb4 <vTaskPrioritySet+0x48>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eba:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d06f      	beq.n	8003fa4 <vTaskPrioritySet+0x138>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d90d      	bls.n	8003ee8 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8003ecc:	4b38      	ldr	r3, [pc, #224]	@ (8003fb0 <vTaskPrioritySet+0x144>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d00f      	beq.n	8003ef6 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003ed6:	4b36      	ldr	r3, [pc, #216]	@ (8003fb0 <vTaskPrioritySet+0x144>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d309      	bcc.n	8003ef6 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	e006      	b.n	8003ef6 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8003ee8:	4b31      	ldr	r3, [pc, #196]	@ (8003fb0 <vTaskPrioritySet+0x144>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d101      	bne.n	8003ef6 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efa:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d102      	bne.n	8003f0e <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	645a      	str	r2, [r3, #68]	@ 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	db04      	blt.n	8003f26 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	f1c3 0207 	rsb	r2, r3, #7
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	6959      	ldr	r1, [r3, #20]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb4 <vTaskPrioritySet+0x148>)
 8003f36:	4413      	add	r3, r2
 8003f38:	4299      	cmp	r1, r3
 8003f3a:	d128      	bne.n	8003f8e <vTaskPrioritySet+0x122>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff fdcd 	bl	8003ae0 <uxListRemove>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d109      	bne.n	8003f60 <vTaskPrioritySet+0xf4>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43da      	mvns	r2, r3
 8003f56:	4b18      	ldr	r3, [pc, #96]	@ (8003fb8 <vTaskPrioritySet+0x14c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	4a16      	ldr	r2, [pc, #88]	@ (8003fb8 <vTaskPrioritySet+0x14c>)
 8003f5e:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f64:	2201      	movs	r2, #1
 8003f66:	409a      	lsls	r2, r3
 8003f68:	4b13      	ldr	r3, [pc, #76]	@ (8003fb8 <vTaskPrioritySet+0x14c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	4a12      	ldr	r2, [pc, #72]	@ (8003fb8 <vTaskPrioritySet+0x14c>)
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb4 <vTaskPrioritySet+0x148>)
 8003f80:	441a      	add	r2, r3
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	3304      	adds	r3, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	4610      	mov	r0, r2
 8003f8a:	f7ff fd4c 	bl	8003a26 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <vTaskPrioritySet+0x138>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8003f94:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <vTaskPrioritySet+0x150>)
 8003f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8003fa4:	f000 fcaa 	bl	80048fc <vPortExitCritical>
	}
 8003fa8:	bf00      	nop
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000844 	.word	0x20000844
 8003fb4:	20000848 	.word	0x20000848
 8003fb8:	2000094c 	.word	0x2000094c
 8003fbc:	e000ed04 	.word	0xe000ed04

08003fc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8004044 <vTaskStartScheduler+0x84>)
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	2280      	movs	r2, #128	@ 0x80
 8003fd2:	491d      	ldr	r1, [pc, #116]	@ (8004048 <vTaskStartScheduler+0x88>)
 8003fd4:	481d      	ldr	r0, [pc, #116]	@ (800404c <vTaskStartScheduler+0x8c>)
 8003fd6:	f7ff fdad 	bl	8003b34 <xTaskCreate>
 8003fda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d11b      	bne.n	800401a <vTaskStartScheduler+0x5a>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	60bb      	str	r3, [r7, #8]
}
 8003ff4:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ff6:	4b16      	ldr	r3, [pc, #88]	@ (8004050 <vTaskStartScheduler+0x90>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	334c      	adds	r3, #76	@ 0x4c
 8003ffc:	4a15      	ldr	r2, [pc, #84]	@ (8004054 <vTaskStartScheduler+0x94>)
 8003ffe:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004000:	4b15      	ldr	r3, [pc, #84]	@ (8004058 <vTaskStartScheduler+0x98>)
 8004002:	f04f 32ff 	mov.w	r2, #4294967295
 8004006:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004008:	4b14      	ldr	r3, [pc, #80]	@ (800405c <vTaskStartScheduler+0x9c>)
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800400e:	4b14      	ldr	r3, [pc, #80]	@ (8004060 <vTaskStartScheduler+0xa0>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004014:	f000 fb9c 	bl	8004750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004018:	e00f      	b.n	800403a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d10b      	bne.n	800403a <vTaskStartScheduler+0x7a>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	607b      	str	r3, [r7, #4]
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	e7fd      	b.n	8004036 <vTaskStartScheduler+0x76>
}
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000968 	.word	0x20000968
 8004048:	080063ac 	.word	0x080063ac
 800404c:	080043f9 	.word	0x080043f9
 8004050:	20000844 	.word	0x20000844
 8004054:	2000001c 	.word	0x2000001c
 8004058:	20000964 	.word	0x20000964
 800405c:	20000950 	.word	0x20000950
 8004060:	20000948 	.word	0x20000948

08004064 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004068:	4b04      	ldr	r3, [pc, #16]	@ (800407c <vTaskSuspendAll+0x18>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3301      	adds	r3, #1
 800406e:	4a03      	ldr	r2, [pc, #12]	@ (800407c <vTaskSuspendAll+0x18>)
 8004070:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004072:	bf00      	nop
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	2000096c 	.word	0x2000096c

08004080 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800408e:	4b42      	ldr	r3, [pc, #264]	@ (8004198 <xTaskResumeAll+0x118>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10b      	bne.n	80040ae <xTaskResumeAll+0x2e>
	__asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	603b      	str	r3, [r7, #0]
}
 80040a8:	bf00      	nop
 80040aa:	bf00      	nop
 80040ac:	e7fd      	b.n	80040aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040ae:	f000 fbf3 	bl	8004898 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040b2:	4b39      	ldr	r3, [pc, #228]	@ (8004198 <xTaskResumeAll+0x118>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	4a37      	ldr	r2, [pc, #220]	@ (8004198 <xTaskResumeAll+0x118>)
 80040ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040bc:	4b36      	ldr	r3, [pc, #216]	@ (8004198 <xTaskResumeAll+0x118>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d161      	bne.n	8004188 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040c4:	4b35      	ldr	r3, [pc, #212]	@ (800419c <xTaskResumeAll+0x11c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d05d      	beq.n	8004188 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040cc:	e02e      	b.n	800412c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ce:	4b34      	ldr	r3, [pc, #208]	@ (80041a0 <xTaskResumeAll+0x120>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3318      	adds	r3, #24
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fd00 	bl	8003ae0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fcfb 	bl	8003ae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ee:	2201      	movs	r2, #1
 80040f0:	409a      	lsls	r2, r3
 80040f2:	4b2c      	ldr	r3, [pc, #176]	@ (80041a4 <xTaskResumeAll+0x124>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	4a2a      	ldr	r2, [pc, #168]	@ (80041a4 <xTaskResumeAll+0x124>)
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4a27      	ldr	r2, [pc, #156]	@ (80041a8 <xTaskResumeAll+0x128>)
 800410a:	441a      	add	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3304      	adds	r3, #4
 8004110:	4619      	mov	r1, r3
 8004112:	4610      	mov	r0, r2
 8004114:	f7ff fc87 	bl	8003a26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800411c:	4b23      	ldr	r3, [pc, #140]	@ (80041ac <xTaskResumeAll+0x12c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004126:	4b22      	ldr	r3, [pc, #136]	@ (80041b0 <xTaskResumeAll+0x130>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800412c:	4b1c      	ldr	r3, [pc, #112]	@ (80041a0 <xTaskResumeAll+0x120>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1cc      	bne.n	80040ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800413a:	f000 f9f9 	bl	8004530 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800413e:	4b1d      	ldr	r3, [pc, #116]	@ (80041b4 <xTaskResumeAll+0x134>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d010      	beq.n	800416c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800414a:	f000 f837 	bl	80041bc <xTaskIncrementTick>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004154:	4b16      	ldr	r3, [pc, #88]	@ (80041b0 <xTaskResumeAll+0x130>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3b01      	subs	r3, #1
 800415e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f1      	bne.n	800414a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004166:	4b13      	ldr	r3, [pc, #76]	@ (80041b4 <xTaskResumeAll+0x134>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800416c:	4b10      	ldr	r3, [pc, #64]	@ (80041b0 <xTaskResumeAll+0x130>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d009      	beq.n	8004188 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004174:	2301      	movs	r3, #1
 8004176:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004178:	4b0f      	ldr	r3, [pc, #60]	@ (80041b8 <xTaskResumeAll+0x138>)
 800417a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004188:	f000 fbb8 	bl	80048fc <vPortExitCritical>

	return xAlreadyYielded;
 800418c:	68bb      	ldr	r3, [r7, #8]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	2000096c 	.word	0x2000096c
 800419c:	20000944 	.word	0x20000944
 80041a0:	20000904 	.word	0x20000904
 80041a4:	2000094c 	.word	0x2000094c
 80041a8:	20000848 	.word	0x20000848
 80041ac:	20000844 	.word	0x20000844
 80041b0:	20000958 	.word	0x20000958
 80041b4:	20000954 	.word	0x20000954
 80041b8:	e000ed04 	.word	0xe000ed04

080041bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004304 <xTaskIncrementTick+0x148>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f040 808f 	bne.w	80042ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004308 <xTaskIncrementTick+0x14c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3301      	adds	r3, #1
 80041d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004308 <xTaskIncrementTick+0x14c>)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d121      	bne.n	8004228 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80041e4:	4b49      	ldr	r3, [pc, #292]	@ (800430c <xTaskIncrementTick+0x150>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <xTaskIncrementTick+0x4a>
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	603b      	str	r3, [r7, #0]
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop
 8004204:	e7fd      	b.n	8004202 <xTaskIncrementTick+0x46>
 8004206:	4b41      	ldr	r3, [pc, #260]	@ (800430c <xTaskIncrementTick+0x150>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	4b40      	ldr	r3, [pc, #256]	@ (8004310 <xTaskIncrementTick+0x154>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a3e      	ldr	r2, [pc, #248]	@ (800430c <xTaskIncrementTick+0x150>)
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	4a3e      	ldr	r2, [pc, #248]	@ (8004310 <xTaskIncrementTick+0x154>)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b3e      	ldr	r3, [pc, #248]	@ (8004314 <xTaskIncrementTick+0x158>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3301      	adds	r3, #1
 8004220:	4a3c      	ldr	r2, [pc, #240]	@ (8004314 <xTaskIncrementTick+0x158>)
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	f000 f984 	bl	8004530 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004228:	4b3b      	ldr	r3, [pc, #236]	@ (8004318 <xTaskIncrementTick+0x15c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	429a      	cmp	r2, r3
 8004230:	d348      	bcc.n	80042c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004232:	4b36      	ldr	r3, [pc, #216]	@ (800430c <xTaskIncrementTick+0x150>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800423c:	4b36      	ldr	r3, [pc, #216]	@ (8004318 <xTaskIncrementTick+0x15c>)
 800423e:	f04f 32ff 	mov.w	r2, #4294967295
 8004242:	601a      	str	r2, [r3, #0]
					break;
 8004244:	e03e      	b.n	80042c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004246:	4b31      	ldr	r3, [pc, #196]	@ (800430c <xTaskIncrementTick+0x150>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	429a      	cmp	r2, r3
 800425c:	d203      	bcs.n	8004266 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800425e:	4a2e      	ldr	r2, [pc, #184]	@ (8004318 <xTaskIncrementTick+0x15c>)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004264:	e02e      	b.n	80042c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	3304      	adds	r3, #4
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fc38 	bl	8003ae0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	3318      	adds	r3, #24
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fc2f 	bl	8003ae0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	2201      	movs	r2, #1
 8004288:	409a      	lsls	r2, r3
 800428a:	4b24      	ldr	r3, [pc, #144]	@ (800431c <xTaskIncrementTick+0x160>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4313      	orrs	r3, r2
 8004290:	4a22      	ldr	r2, [pc, #136]	@ (800431c <xTaskIncrementTick+0x160>)
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004320 <xTaskIncrementTick+0x164>)
 80042a2:	441a      	add	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f7ff fbbb 	bl	8003a26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004324 <xTaskIncrementTick+0x168>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d3b9      	bcc.n	8004232 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80042be:	2301      	movs	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042c2:	e7b6      	b.n	8004232 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042c4:	4b17      	ldr	r3, [pc, #92]	@ (8004324 <xTaskIncrementTick+0x168>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ca:	4915      	ldr	r1, [pc, #84]	@ (8004320 <xTaskIncrementTick+0x164>)
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d901      	bls.n	80042e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80042dc:	2301      	movs	r3, #1
 80042de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042e0:	4b11      	ldr	r3, [pc, #68]	@ (8004328 <xTaskIncrementTick+0x16c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80042e8:	2301      	movs	r3, #1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	e004      	b.n	80042f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80042ee:	4b0f      	ldr	r3, [pc, #60]	@ (800432c <xTaskIncrementTick+0x170>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3301      	adds	r3, #1
 80042f4:	4a0d      	ldr	r2, [pc, #52]	@ (800432c <xTaskIncrementTick+0x170>)
 80042f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80042f8:	697b      	ldr	r3, [r7, #20]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	2000096c 	.word	0x2000096c
 8004308:	20000948 	.word	0x20000948
 800430c:	200008fc 	.word	0x200008fc
 8004310:	20000900 	.word	0x20000900
 8004314:	2000095c 	.word	0x2000095c
 8004318:	20000964 	.word	0x20000964
 800431c:	2000094c 	.word	0x2000094c
 8004320:	20000848 	.word	0x20000848
 8004324:	20000844 	.word	0x20000844
 8004328:	20000958 	.word	0x20000958
 800432c:	20000954 	.word	0x20000954

08004330 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004336:	4b2a      	ldr	r3, [pc, #168]	@ (80043e0 <vTaskSwitchContext+0xb0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800433e:	4b29      	ldr	r3, [pc, #164]	@ (80043e4 <vTaskSwitchContext+0xb4>)
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004344:	e045      	b.n	80043d2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004346:	4b27      	ldr	r3, [pc, #156]	@ (80043e4 <vTaskSwitchContext+0xb4>)
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800434c:	4b26      	ldr	r3, [pc, #152]	@ (80043e8 <vTaskSwitchContext+0xb8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	fab3 f383 	clz	r3, r3
 8004358:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800435a:	7afb      	ldrb	r3, [r7, #11]
 800435c:	f1c3 031f 	rsb	r3, r3, #31
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	4922      	ldr	r1, [pc, #136]	@ (80043ec <vTaskSwitchContext+0xbc>)
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	607b      	str	r3, [r7, #4]
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	e7fd      	b.n	800438a <vTaskSwitchContext+0x5a>
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4a14      	ldr	r2, [pc, #80]	@ (80043ec <vTaskSwitchContext+0xbc>)
 800439a:	4413      	add	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	3308      	adds	r3, #8
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d104      	bne.n	80043be <vTaskSwitchContext+0x8e>
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a0a      	ldr	r2, [pc, #40]	@ (80043f0 <vTaskSwitchContext+0xc0>)
 80043c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043c8:	4b09      	ldr	r3, [pc, #36]	@ (80043f0 <vTaskSwitchContext+0xc0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	334c      	adds	r3, #76	@ 0x4c
 80043ce:	4a09      	ldr	r2, [pc, #36]	@ (80043f4 <vTaskSwitchContext+0xc4>)
 80043d0:	6013      	str	r3, [r2, #0]
}
 80043d2:	bf00      	nop
 80043d4:	371c      	adds	r7, #28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	2000096c 	.word	0x2000096c
 80043e4:	20000958 	.word	0x20000958
 80043e8:	2000094c 	.word	0x2000094c
 80043ec:	20000848 	.word	0x20000848
 80043f0:	20000844 	.word	0x20000844
 80043f4:	2000001c 	.word	0x2000001c

080043f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004400:	f000 f852 	bl	80044a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004404:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <prvIdleTask+0x28>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d9f9      	bls.n	8004400 <prvIdleTask+0x8>
			{
				taskYIELD();
 800440c:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <prvIdleTask+0x2c>)
 800440e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800441c:	e7f0      	b.n	8004400 <prvIdleTask+0x8>
 800441e:	bf00      	nop
 8004420:	20000848 	.word	0x20000848
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800442e:	2300      	movs	r3, #0
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	e00c      	b.n	800444e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4a12      	ldr	r2, [pc, #72]	@ (8004488 <prvInitialiseTaskLists+0x60>)
 8004440:	4413      	add	r3, r2
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fac2 	bl	80039cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3301      	adds	r3, #1
 800444c:	607b      	str	r3, [r7, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b06      	cmp	r3, #6
 8004452:	d9ef      	bls.n	8004434 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004454:	480d      	ldr	r0, [pc, #52]	@ (800448c <prvInitialiseTaskLists+0x64>)
 8004456:	f7ff fab9 	bl	80039cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800445a:	480d      	ldr	r0, [pc, #52]	@ (8004490 <prvInitialiseTaskLists+0x68>)
 800445c:	f7ff fab6 	bl	80039cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004460:	480c      	ldr	r0, [pc, #48]	@ (8004494 <prvInitialiseTaskLists+0x6c>)
 8004462:	f7ff fab3 	bl	80039cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004466:	480c      	ldr	r0, [pc, #48]	@ (8004498 <prvInitialiseTaskLists+0x70>)
 8004468:	f7ff fab0 	bl	80039cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800446c:	480b      	ldr	r0, [pc, #44]	@ (800449c <prvInitialiseTaskLists+0x74>)
 800446e:	f7ff faad 	bl	80039cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004472:	4b0b      	ldr	r3, [pc, #44]	@ (80044a0 <prvInitialiseTaskLists+0x78>)
 8004474:	4a05      	ldr	r2, [pc, #20]	@ (800448c <prvInitialiseTaskLists+0x64>)
 8004476:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004478:	4b0a      	ldr	r3, [pc, #40]	@ (80044a4 <prvInitialiseTaskLists+0x7c>)
 800447a:	4a05      	ldr	r2, [pc, #20]	@ (8004490 <prvInitialiseTaskLists+0x68>)
 800447c:	601a      	str	r2, [r3, #0]
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000848 	.word	0x20000848
 800448c:	200008d4 	.word	0x200008d4
 8004490:	200008e8 	.word	0x200008e8
 8004494:	20000904 	.word	0x20000904
 8004498:	20000918 	.word	0x20000918
 800449c:	20000930 	.word	0x20000930
 80044a0:	200008fc 	.word	0x200008fc
 80044a4:	20000900 	.word	0x20000900

080044a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ae:	e019      	b.n	80044e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044b0:	f000 f9f2 	bl	8004898 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b4:	4b10      	ldr	r3, [pc, #64]	@ (80044f8 <prvCheckTasksWaitingTermination+0x50>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3304      	adds	r3, #4
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff fb0d 	bl	8003ae0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044c6:	4b0d      	ldr	r3, [pc, #52]	@ (80044fc <prvCheckTasksWaitingTermination+0x54>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	4a0b      	ldr	r2, [pc, #44]	@ (80044fc <prvCheckTasksWaitingTermination+0x54>)
 80044ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004500 <prvCheckTasksWaitingTermination+0x58>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004500 <prvCheckTasksWaitingTermination+0x58>)
 80044d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044da:	f000 fa0f 	bl	80048fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f810 	bl	8004504 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044e4:	4b06      	ldr	r3, [pc, #24]	@ (8004500 <prvCheckTasksWaitingTermination+0x58>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e1      	bne.n	80044b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000918 	.word	0x20000918
 80044fc:	20000944 	.word	0x20000944
 8004500:	2000092c 	.word	0x2000092c

08004504 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	334c      	adds	r3, #76	@ 0x4c
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fe79 	bl	8005208 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fb64 	bl	8004be8 <vPortFree>
			vPortFree( pxTCB );
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fb61 	bl	8004be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004536:	4b0c      	ldr	r3, [pc, #48]	@ (8004568 <prvResetNextTaskUnblockTime+0x38>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004540:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <prvResetNextTaskUnblockTime+0x3c>)
 8004542:	f04f 32ff 	mov.w	r2, #4294967295
 8004546:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004548:	e008      	b.n	800455c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800454a:	4b07      	ldr	r3, [pc, #28]	@ (8004568 <prvResetNextTaskUnblockTime+0x38>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	4a04      	ldr	r2, [pc, #16]	@ (800456c <prvResetNextTaskUnblockTime+0x3c>)
 800455a:	6013      	str	r3, [r2, #0]
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	200008fc 	.word	0x200008fc
 800456c:	20000964 	.word	0x20000964

08004570 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800457a:	4b29      	ldr	r3, [pc, #164]	@ (8004620 <prvAddCurrentTaskToDelayedList+0xb0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004580:	4b28      	ldr	r3, [pc, #160]	@ (8004624 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3304      	adds	r3, #4
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff faaa 	bl	8003ae0 <uxListRemove>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10b      	bne.n	80045aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004592:	4b24      	ldr	r3, [pc, #144]	@ (8004624 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004598:	2201      	movs	r2, #1
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43da      	mvns	r2, r3
 80045a0:	4b21      	ldr	r3, [pc, #132]	@ (8004628 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4013      	ands	r3, r2
 80045a6:	4a20      	ldr	r2, [pc, #128]	@ (8004628 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b0:	d10a      	bne.n	80045c8 <prvAddCurrentTaskToDelayedList+0x58>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3304      	adds	r3, #4
 80045be:	4619      	mov	r1, r3
 80045c0:	481a      	ldr	r0, [pc, #104]	@ (800462c <prvAddCurrentTaskToDelayedList+0xbc>)
 80045c2:	f7ff fa30 	bl	8003a26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045c6:	e026      	b.n	8004616 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045d0:	4b14      	ldr	r3, [pc, #80]	@ (8004624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d209      	bcs.n	80045f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045e0:	4b13      	ldr	r3, [pc, #76]	@ (8004630 <prvAddCurrentTaskToDelayedList+0xc0>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3304      	adds	r3, #4
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f7ff fa3e 	bl	8003a6e <vListInsert>
}
 80045f2:	e010      	b.n	8004616 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004634 <prvAddCurrentTaskToDelayedList+0xc4>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f7ff fa34 	bl	8003a6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004606:	4b0c      	ldr	r3, [pc, #48]	@ (8004638 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	429a      	cmp	r2, r3
 800460e:	d202      	bcs.n	8004616 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004610:	4a09      	ldr	r2, [pc, #36]	@ (8004638 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	6013      	str	r3, [r2, #0]
}
 8004616:	bf00      	nop
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000948 	.word	0x20000948
 8004624:	20000844 	.word	0x20000844
 8004628:	2000094c 	.word	0x2000094c
 800462c:	20000930 	.word	0x20000930
 8004630:	20000900 	.word	0x20000900
 8004634:	200008fc 	.word	0x200008fc
 8004638:	20000964 	.word	0x20000964

0800463c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3b04      	subs	r3, #4
 800464c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3b04      	subs	r3, #4
 800465a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f023 0201 	bic.w	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3b04      	subs	r3, #4
 800466a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800466c:	4a0c      	ldr	r2, [pc, #48]	@ (80046a0 <pxPortInitialiseStack+0x64>)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3b14      	subs	r3, #20
 8004676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3b04      	subs	r3, #4
 8004682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f06f 0202 	mvn.w	r2, #2
 800468a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3b20      	subs	r3, #32
 8004690:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004692:	68fb      	ldr	r3, [r7, #12]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	080046a5 	.word	0x080046a5

080046a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046ae:	4b13      	ldr	r3, [pc, #76]	@ (80046fc <prvTaskExitError+0x58>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b6:	d00b      	beq.n	80046d0 <prvTaskExitError+0x2c>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	60fb      	str	r3, [r7, #12]
}
 80046ca:	bf00      	nop
 80046cc:	bf00      	nop
 80046ce:	e7fd      	b.n	80046cc <prvTaskExitError+0x28>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	60bb      	str	r3, [r7, #8]
}
 80046e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046e4:	bf00      	nop
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0fc      	beq.n	80046e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	2000000c 	.word	0x2000000c

08004700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004700:	4b07      	ldr	r3, [pc, #28]	@ (8004720 <pxCurrentTCBConst2>)
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	6808      	ldr	r0, [r1, #0]
 8004706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470a:	f380 8809 	msr	PSP, r0
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f380 8811 	msr	BASEPRI, r0
 800471a:	4770      	bx	lr
 800471c:	f3af 8000 	nop.w

08004720 <pxCurrentTCBConst2>:
 8004720:	20000844 	.word	0x20000844
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop

08004728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004728:	4808      	ldr	r0, [pc, #32]	@ (800474c <prvPortStartFirstTask+0x24>)
 800472a:	6800      	ldr	r0, [r0, #0]
 800472c:	6800      	ldr	r0, [r0, #0]
 800472e:	f380 8808 	msr	MSP, r0
 8004732:	f04f 0000 	mov.w	r0, #0
 8004736:	f380 8814 	msr	CONTROL, r0
 800473a:	b662      	cpsie	i
 800473c:	b661      	cpsie	f
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	df00      	svc	0
 8004748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800474a:	bf00      	nop
 800474c:	e000ed08 	.word	0xe000ed08

08004750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004756:	4b47      	ldr	r3, [pc, #284]	@ (8004874 <xPortStartScheduler+0x124>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a47      	ldr	r2, [pc, #284]	@ (8004878 <xPortStartScheduler+0x128>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d10b      	bne.n	8004778 <xPortStartScheduler+0x28>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	613b      	str	r3, [r7, #16]
}
 8004772:	bf00      	nop
 8004774:	bf00      	nop
 8004776:	e7fd      	b.n	8004774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004778:	4b3e      	ldr	r3, [pc, #248]	@ (8004874 <xPortStartScheduler+0x124>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a3f      	ldr	r2, [pc, #252]	@ (800487c <xPortStartScheduler+0x12c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d10b      	bne.n	800479a <xPortStartScheduler+0x4a>
	__asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	60fb      	str	r3, [r7, #12]
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	e7fd      	b.n	8004796 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800479a:	4b39      	ldr	r3, [pc, #228]	@ (8004880 <xPortStartScheduler+0x130>)
 800479c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	22ff      	movs	r2, #255	@ 0xff
 80047aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	4b31      	ldr	r3, [pc, #196]	@ (8004884 <xPortStartScheduler+0x134>)
 80047c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047c2:	4b31      	ldr	r3, [pc, #196]	@ (8004888 <xPortStartScheduler+0x138>)
 80047c4:	2207      	movs	r2, #7
 80047c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047c8:	e009      	b.n	80047de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80047ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004888 <xPortStartScheduler+0x138>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004888 <xPortStartScheduler+0x138>)
 80047d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e6:	2b80      	cmp	r3, #128	@ 0x80
 80047e8:	d0ef      	beq.n	80047ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047ea:	4b27      	ldr	r3, [pc, #156]	@ (8004888 <xPortStartScheduler+0x138>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f1c3 0307 	rsb	r3, r3, #7
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d00b      	beq.n	800480e <xPortStartScheduler+0xbe>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	60bb      	str	r3, [r7, #8]
}
 8004808:	bf00      	nop
 800480a:	bf00      	nop
 800480c:	e7fd      	b.n	800480a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800480e:	4b1e      	ldr	r3, [pc, #120]	@ (8004888 <xPortStartScheduler+0x138>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	4a1c      	ldr	r2, [pc, #112]	@ (8004888 <xPortStartScheduler+0x138>)
 8004816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004818:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <xPortStartScheduler+0x138>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004820:	4a19      	ldr	r2, [pc, #100]	@ (8004888 <xPortStartScheduler+0x138>)
 8004822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	b2da      	uxtb	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800482c:	4b17      	ldr	r3, [pc, #92]	@ (800488c <xPortStartScheduler+0x13c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a16      	ldr	r2, [pc, #88]	@ (800488c <xPortStartScheduler+0x13c>)
 8004832:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004838:	4b14      	ldr	r3, [pc, #80]	@ (800488c <xPortStartScheduler+0x13c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a13      	ldr	r2, [pc, #76]	@ (800488c <xPortStartScheduler+0x13c>)
 800483e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004844:	f000 f8da 	bl	80049fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004848:	4b11      	ldr	r3, [pc, #68]	@ (8004890 <xPortStartScheduler+0x140>)
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800484e:	f000 f8f3 	bl	8004a38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004852:	4b10      	ldr	r3, [pc, #64]	@ (8004894 <xPortStartScheduler+0x144>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a0f      	ldr	r2, [pc, #60]	@ (8004894 <xPortStartScheduler+0x144>)
 8004858:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800485c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800485e:	f7ff ff63 	bl	8004728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004862:	f7ff fd65 	bl	8004330 <vTaskSwitchContext>
	prvTaskExitError();
 8004866:	f7ff ff1d 	bl	80046a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	e000ed00 	.word	0xe000ed00
 8004878:	410fc271 	.word	0x410fc271
 800487c:	410fc270 	.word	0x410fc270
 8004880:	e000e400 	.word	0xe000e400
 8004884:	20000970 	.word	0x20000970
 8004888:	20000974 	.word	0x20000974
 800488c:	e000ed20 	.word	0xe000ed20
 8004890:	2000000c 	.word	0x2000000c
 8004894:	e000ef34 	.word	0xe000ef34

08004898 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	607b      	str	r3, [r7, #4]
}
 80048b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048b2:	4b10      	ldr	r3, [pc, #64]	@ (80048f4 <vPortEnterCritical+0x5c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3301      	adds	r3, #1
 80048b8:	4a0e      	ldr	r2, [pc, #56]	@ (80048f4 <vPortEnterCritical+0x5c>)
 80048ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048bc:	4b0d      	ldr	r3, [pc, #52]	@ (80048f4 <vPortEnterCritical+0x5c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d110      	bne.n	80048e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048c4:	4b0c      	ldr	r3, [pc, #48]	@ (80048f8 <vPortEnterCritical+0x60>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00b      	beq.n	80048e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	603b      	str	r3, [r7, #0]
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	e7fd      	b.n	80048e2 <vPortEnterCritical+0x4a>
	}
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	2000000c 	.word	0x2000000c
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004902:	4b12      	ldr	r3, [pc, #72]	@ (800494c <vPortExitCritical+0x50>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10b      	bne.n	8004922 <vPortExitCritical+0x26>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	607b      	str	r3, [r7, #4]
}
 800491c:	bf00      	nop
 800491e:	bf00      	nop
 8004920:	e7fd      	b.n	800491e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004922:	4b0a      	ldr	r3, [pc, #40]	@ (800494c <vPortExitCritical+0x50>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3b01      	subs	r3, #1
 8004928:	4a08      	ldr	r2, [pc, #32]	@ (800494c <vPortExitCritical+0x50>)
 800492a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800492c:	4b07      	ldr	r3, [pc, #28]	@ (800494c <vPortExitCritical+0x50>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d105      	bne.n	8004940 <vPortExitCritical+0x44>
 8004934:	2300      	movs	r3, #0
 8004936:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800493e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	2000000c 	.word	0x2000000c

08004950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004950:	f3ef 8009 	mrs	r0, PSP
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	4b15      	ldr	r3, [pc, #84]	@ (80049b0 <pxCurrentTCBConst>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	f01e 0f10 	tst.w	lr, #16
 8004960:	bf08      	it	eq
 8004962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496a:	6010      	str	r0, [r2, #0]
 800496c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004970:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004974:	f380 8811 	msr	BASEPRI, r0
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f7ff fcd6 	bl	8004330 <vTaskSwitchContext>
 8004984:	f04f 0000 	mov.w	r0, #0
 8004988:	f380 8811 	msr	BASEPRI, r0
 800498c:	bc09      	pop	{r0, r3}
 800498e:	6819      	ldr	r1, [r3, #0]
 8004990:	6808      	ldr	r0, [r1, #0]
 8004992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004996:	f01e 0f10 	tst.w	lr, #16
 800499a:	bf08      	it	eq
 800499c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049a0:	f380 8809 	msr	PSP, r0
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	f3af 8000 	nop.w

080049b0 <pxCurrentTCBConst>:
 80049b0:	20000844 	.word	0x20000844
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop

080049b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	607b      	str	r3, [r7, #4]
}
 80049d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049d2:	f7ff fbf3 	bl	80041bc <xTaskIncrementTick>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049dc:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <SysTick_Handler+0x40>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	2300      	movs	r3, #0
 80049e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f383 8811 	msr	BASEPRI, r3
}
 80049ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a00:	4b09      	ldr	r3, [pc, #36]	@ (8004a28 <vPortSetupTimerInterrupt+0x2c>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a06:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <vPortSetupTimerInterrupt+0x30>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a0c:	4b08      	ldr	r3, [pc, #32]	@ (8004a30 <vPortSetupTimerInterrupt+0x34>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a08      	ldr	r2, [pc, #32]	@ (8004a34 <vPortSetupTimerInterrupt+0x38>)
 8004a12:	3b01      	subs	r3, #1
 8004a14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a16:	4b04      	ldr	r3, [pc, #16]	@ (8004a28 <vPortSetupTimerInterrupt+0x2c>)
 8004a18:	2207      	movs	r2, #7
 8004a1a:	601a      	str	r2, [r3, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	e000e010 	.word	0xe000e010
 8004a2c:	e000e018 	.word	0xe000e018
 8004a30:	20000000 	.word	0x20000000
 8004a34:	e000e014 	.word	0xe000e014

08004a38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a38:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004a48 <vPortEnableVFP+0x10>
 8004a3c:	6801      	ldr	r1, [r0, #0]
 8004a3e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004a42:	6001      	str	r1, [r0, #0]
 8004a44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a46:	bf00      	nop
 8004a48:	e000ed88 	.word	0xe000ed88

08004a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	@ 0x28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a58:	f7ff fb04 	bl	8004064 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8004bd0 <pvPortMalloc+0x184>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a64:	f000 f924 	bl	8004cb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a68:	4b5a      	ldr	r3, [pc, #360]	@ (8004bd4 <pvPortMalloc+0x188>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f040 8095 	bne.w	8004ba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01e      	beq.n	8004aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004a7c:	2208      	movs	r2, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d015      	beq.n	8004aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f023 0307 	bic.w	r3, r3, #7
 8004a94:	3308      	adds	r3, #8
 8004a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <pvPortMalloc+0x6e>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	617b      	str	r3, [r7, #20]
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	e7fd      	b.n	8004ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d06f      	beq.n	8004ba0 <pvPortMalloc+0x154>
 8004ac0:	4b45      	ldr	r3, [pc, #276]	@ (8004bd8 <pvPortMalloc+0x18c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d86a      	bhi.n	8004ba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004aca:	4b44      	ldr	r3, [pc, #272]	@ (8004bdc <pvPortMalloc+0x190>)
 8004acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ace:	4b43      	ldr	r3, [pc, #268]	@ (8004bdc <pvPortMalloc+0x190>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ad4:	e004      	b.n	8004ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d903      	bls.n	8004af2 <pvPortMalloc+0xa6>
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f1      	bne.n	8004ad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004af2:	4b37      	ldr	r3, [pc, #220]	@ (8004bd0 <pvPortMalloc+0x184>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d051      	beq.n	8004ba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2208      	movs	r2, #8
 8004b02:	4413      	add	r3, r2
 8004b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	1ad2      	subs	r2, r2, r3
 8004b16:	2308      	movs	r3, #8
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d920      	bls.n	8004b60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4413      	add	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00b      	beq.n	8004b48 <pvPortMalloc+0xfc>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	613b      	str	r3, [r7, #16]
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	1ad2      	subs	r2, r2, r3
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b5a:	69b8      	ldr	r0, [r7, #24]
 8004b5c:	f000 f90a 	bl	8004d74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b60:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd8 <pvPortMalloc+0x18c>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd8 <pvPortMalloc+0x18c>)
 8004b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd8 <pvPortMalloc+0x18c>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b1b      	ldr	r3, [pc, #108]	@ (8004be0 <pvPortMalloc+0x194>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d203      	bcs.n	8004b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b7a:	4b17      	ldr	r3, [pc, #92]	@ (8004bd8 <pvPortMalloc+0x18c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a18      	ldr	r2, [pc, #96]	@ (8004be0 <pvPortMalloc+0x194>)
 8004b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	4b13      	ldr	r3, [pc, #76]	@ (8004bd4 <pvPortMalloc+0x188>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b96:	4b13      	ldr	r3, [pc, #76]	@ (8004be4 <pvPortMalloc+0x198>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	4a11      	ldr	r2, [pc, #68]	@ (8004be4 <pvPortMalloc+0x198>)
 8004b9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ba0:	f7ff fa6e 	bl	8004080 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00b      	beq.n	8004bc6 <pvPortMalloc+0x17a>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	60fb      	str	r3, [r7, #12]
}
 8004bc0:	bf00      	nop
 8004bc2:	bf00      	nop
 8004bc4:	e7fd      	b.n	8004bc2 <pvPortMalloc+0x176>
	return pvReturn;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3728      	adds	r7, #40	@ 0x28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20004580 	.word	0x20004580
 8004bd4:	20004594 	.word	0x20004594
 8004bd8:	20004584 	.word	0x20004584
 8004bdc:	20004578 	.word	0x20004578
 8004be0:	20004588 	.word	0x20004588
 8004be4:	2000458c 	.word	0x2000458c

08004be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d04f      	beq.n	8004c9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bfa:	2308      	movs	r3, #8
 8004bfc:	425b      	negs	r3, r3
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4413      	add	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	4b25      	ldr	r3, [pc, #148]	@ (8004ca4 <vPortFree+0xbc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10b      	bne.n	8004c2e <vPortFree+0x46>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	60fb      	str	r3, [r7, #12]
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	e7fd      	b.n	8004c2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00b      	beq.n	8004c4e <vPortFree+0x66>
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	60bb      	str	r3, [r7, #8]
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	e7fd      	b.n	8004c4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	4b14      	ldr	r3, [pc, #80]	@ (8004ca4 <vPortFree+0xbc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01e      	beq.n	8004c9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d11a      	bne.n	8004c9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	4b0e      	ldr	r3, [pc, #56]	@ (8004ca4 <vPortFree+0xbc>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	401a      	ands	r2, r3
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c74:	f7ff f9f6 	bl	8004064 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca8 <vPortFree+0xc0>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4413      	add	r3, r2
 8004c82:	4a09      	ldr	r2, [pc, #36]	@ (8004ca8 <vPortFree+0xc0>)
 8004c84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c86:	6938      	ldr	r0, [r7, #16]
 8004c88:	f000 f874 	bl	8004d74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c8c:	4b07      	ldr	r3, [pc, #28]	@ (8004cac <vPortFree+0xc4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3301      	adds	r3, #1
 8004c92:	4a06      	ldr	r2, [pc, #24]	@ (8004cac <vPortFree+0xc4>)
 8004c94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c96:	f7ff f9f3 	bl	8004080 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c9a:	bf00      	nop
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20004594 	.word	0x20004594
 8004ca8:	20004584 	.word	0x20004584
 8004cac:	20004590 	.word	0x20004590

08004cb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004cba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cbc:	4b27      	ldr	r3, [pc, #156]	@ (8004d5c <prvHeapInit+0xac>)
 8004cbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00c      	beq.n	8004ce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3307      	adds	r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0307 	bic.w	r3, r3, #7
 8004cd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	4a1f      	ldr	r2, [pc, #124]	@ (8004d5c <prvHeapInit+0xac>)
 8004ce0:	4413      	add	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d60 <prvHeapInit+0xb0>)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cee:	4b1c      	ldr	r3, [pc, #112]	@ (8004d60 <prvHeapInit+0xb0>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0307 	bic.w	r3, r3, #7
 8004d0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4a15      	ldr	r2, [pc, #84]	@ (8004d64 <prvHeapInit+0xb4>)
 8004d10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d12:	4b14      	ldr	r3, [pc, #80]	@ (8004d64 <prvHeapInit+0xb4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2200      	movs	r2, #0
 8004d18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d1a:	4b12      	ldr	r3, [pc, #72]	@ (8004d64 <prvHeapInit+0xb4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	1ad2      	subs	r2, r2, r3
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d30:	4b0c      	ldr	r3, [pc, #48]	@ (8004d64 <prvHeapInit+0xb4>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8004d68 <prvHeapInit+0xb8>)
 8004d3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4a09      	ldr	r2, [pc, #36]	@ (8004d6c <prvHeapInit+0xbc>)
 8004d46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d48:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <prvHeapInit+0xc0>)
 8004d4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d4e:	601a      	str	r2, [r3, #0]
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	20000978 	.word	0x20000978
 8004d60:	20004578 	.word	0x20004578
 8004d64:	20004580 	.word	0x20004580
 8004d68:	20004588 	.word	0x20004588
 8004d6c:	20004584 	.word	0x20004584
 8004d70:	20004594 	.word	0x20004594

08004d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d7c:	4b28      	ldr	r3, [pc, #160]	@ (8004e20 <prvInsertBlockIntoFreeList+0xac>)
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	e002      	b.n	8004d88 <prvInsertBlockIntoFreeList+0x14>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d8f7      	bhi.n	8004d82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d108      	bne.n	8004db6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	441a      	add	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	441a      	add	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d118      	bne.n	8004dfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4b15      	ldr	r3, [pc, #84]	@ (8004e24 <prvInsertBlockIntoFreeList+0xb0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d00d      	beq.n	8004df2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	441a      	add	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e008      	b.n	8004e04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004df2:	4b0c      	ldr	r3, [pc, #48]	@ (8004e24 <prvInsertBlockIntoFreeList+0xb0>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	e003      	b.n	8004e04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d002      	beq.n	8004e12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20004578 	.word	0x20004578
 8004e24:	20004580 	.word	0x20004580

08004e28 <__sflush_r>:
 8004e28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e30:	0716      	lsls	r6, r2, #28
 8004e32:	4605      	mov	r5, r0
 8004e34:	460c      	mov	r4, r1
 8004e36:	d454      	bmi.n	8004ee2 <__sflush_r+0xba>
 8004e38:	684b      	ldr	r3, [r1, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	dc02      	bgt.n	8004e44 <__sflush_r+0x1c>
 8004e3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	dd48      	ble.n	8004ed6 <__sflush_r+0xae>
 8004e44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e46:	2e00      	cmp	r6, #0
 8004e48:	d045      	beq.n	8004ed6 <__sflush_r+0xae>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e50:	682f      	ldr	r7, [r5, #0]
 8004e52:	6a21      	ldr	r1, [r4, #32]
 8004e54:	602b      	str	r3, [r5, #0]
 8004e56:	d030      	beq.n	8004eba <__sflush_r+0x92>
 8004e58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	0759      	lsls	r1, r3, #29
 8004e5e:	d505      	bpl.n	8004e6c <__sflush_r+0x44>
 8004e60:	6863      	ldr	r3, [r4, #4]
 8004e62:	1ad2      	subs	r2, r2, r3
 8004e64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e66:	b10b      	cbz	r3, 8004e6c <__sflush_r+0x44>
 8004e68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e6a:	1ad2      	subs	r2, r2, r3
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e70:	6a21      	ldr	r1, [r4, #32]
 8004e72:	4628      	mov	r0, r5
 8004e74:	47b0      	blx	r6
 8004e76:	1c43      	adds	r3, r0, #1
 8004e78:	89a3      	ldrh	r3, [r4, #12]
 8004e7a:	d106      	bne.n	8004e8a <__sflush_r+0x62>
 8004e7c:	6829      	ldr	r1, [r5, #0]
 8004e7e:	291d      	cmp	r1, #29
 8004e80:	d82b      	bhi.n	8004eda <__sflush_r+0xb2>
 8004e82:	4a2a      	ldr	r2, [pc, #168]	@ (8004f2c <__sflush_r+0x104>)
 8004e84:	410a      	asrs	r2, r1
 8004e86:	07d6      	lsls	r6, r2, #31
 8004e88:	d427      	bmi.n	8004eda <__sflush_r+0xb2>
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	6062      	str	r2, [r4, #4]
 8004e8e:	04d9      	lsls	r1, r3, #19
 8004e90:	6922      	ldr	r2, [r4, #16]
 8004e92:	6022      	str	r2, [r4, #0]
 8004e94:	d504      	bpl.n	8004ea0 <__sflush_r+0x78>
 8004e96:	1c42      	adds	r2, r0, #1
 8004e98:	d101      	bne.n	8004e9e <__sflush_r+0x76>
 8004e9a:	682b      	ldr	r3, [r5, #0]
 8004e9c:	b903      	cbnz	r3, 8004ea0 <__sflush_r+0x78>
 8004e9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ea0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ea2:	602f      	str	r7, [r5, #0]
 8004ea4:	b1b9      	cbz	r1, 8004ed6 <__sflush_r+0xae>
 8004ea6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004eaa:	4299      	cmp	r1, r3
 8004eac:	d002      	beq.n	8004eb4 <__sflush_r+0x8c>
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f000 fa64 	bl	800537c <_free_r>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004eb8:	e00d      	b.n	8004ed6 <__sflush_r+0xae>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b0      	blx	r6
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	1c50      	adds	r0, r2, #1
 8004ec4:	d1c9      	bne.n	8004e5a <__sflush_r+0x32>
 8004ec6:	682b      	ldr	r3, [r5, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0c6      	beq.n	8004e5a <__sflush_r+0x32>
 8004ecc:	2b1d      	cmp	r3, #29
 8004ece:	d001      	beq.n	8004ed4 <__sflush_r+0xac>
 8004ed0:	2b16      	cmp	r3, #22
 8004ed2:	d11e      	bne.n	8004f12 <__sflush_r+0xea>
 8004ed4:	602f      	str	r7, [r5, #0]
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	e022      	b.n	8004f20 <__sflush_r+0xf8>
 8004eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ede:	b21b      	sxth	r3, r3
 8004ee0:	e01b      	b.n	8004f1a <__sflush_r+0xf2>
 8004ee2:	690f      	ldr	r7, [r1, #16]
 8004ee4:	2f00      	cmp	r7, #0
 8004ee6:	d0f6      	beq.n	8004ed6 <__sflush_r+0xae>
 8004ee8:	0793      	lsls	r3, r2, #30
 8004eea:	680e      	ldr	r6, [r1, #0]
 8004eec:	bf08      	it	eq
 8004eee:	694b      	ldreq	r3, [r1, #20]
 8004ef0:	600f      	str	r7, [r1, #0]
 8004ef2:	bf18      	it	ne
 8004ef4:	2300      	movne	r3, #0
 8004ef6:	eba6 0807 	sub.w	r8, r6, r7
 8004efa:	608b      	str	r3, [r1, #8]
 8004efc:	f1b8 0f00 	cmp.w	r8, #0
 8004f00:	dde9      	ble.n	8004ed6 <__sflush_r+0xae>
 8004f02:	6a21      	ldr	r1, [r4, #32]
 8004f04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004f06:	4643      	mov	r3, r8
 8004f08:	463a      	mov	r2, r7
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	47b0      	blx	r6
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	dc08      	bgt.n	8004f24 <__sflush_r+0xfc>
 8004f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f1a:	81a3      	strh	r3, [r4, #12]
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f24:	4407      	add	r7, r0
 8004f26:	eba8 0800 	sub.w	r8, r8, r0
 8004f2a:	e7e7      	b.n	8004efc <__sflush_r+0xd4>
 8004f2c:	dfbffffe 	.word	0xdfbffffe

08004f30 <_fflush_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	690b      	ldr	r3, [r1, #16]
 8004f34:	4605      	mov	r5, r0
 8004f36:	460c      	mov	r4, r1
 8004f38:	b913      	cbnz	r3, 8004f40 <_fflush_r+0x10>
 8004f3a:	2500      	movs	r5, #0
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	bd38      	pop	{r3, r4, r5, pc}
 8004f40:	b118      	cbz	r0, 8004f4a <_fflush_r+0x1a>
 8004f42:	6a03      	ldr	r3, [r0, #32]
 8004f44:	b90b      	cbnz	r3, 8004f4a <_fflush_r+0x1a>
 8004f46:	f000 f8bb 	bl	80050c0 <__sinit>
 8004f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0f3      	beq.n	8004f3a <_fflush_r+0xa>
 8004f52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f54:	07d0      	lsls	r0, r2, #31
 8004f56:	d404      	bmi.n	8004f62 <_fflush_r+0x32>
 8004f58:	0599      	lsls	r1, r3, #22
 8004f5a:	d402      	bmi.n	8004f62 <_fflush_r+0x32>
 8004f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f5e:	f000 fa0a 	bl	8005376 <__retarget_lock_acquire_recursive>
 8004f62:	4628      	mov	r0, r5
 8004f64:	4621      	mov	r1, r4
 8004f66:	f7ff ff5f 	bl	8004e28 <__sflush_r>
 8004f6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f6c:	07da      	lsls	r2, r3, #31
 8004f6e:	4605      	mov	r5, r0
 8004f70:	d4e4      	bmi.n	8004f3c <_fflush_r+0xc>
 8004f72:	89a3      	ldrh	r3, [r4, #12]
 8004f74:	059b      	lsls	r3, r3, #22
 8004f76:	d4e1      	bmi.n	8004f3c <_fflush_r+0xc>
 8004f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f7a:	f000 f9fd 	bl	8005378 <__retarget_lock_release_recursive>
 8004f7e:	e7dd      	b.n	8004f3c <_fflush_r+0xc>

08004f80 <fflush>:
 8004f80:	4601      	mov	r1, r0
 8004f82:	b920      	cbnz	r0, 8004f8e <fflush+0xe>
 8004f84:	4a04      	ldr	r2, [pc, #16]	@ (8004f98 <fflush+0x18>)
 8004f86:	4905      	ldr	r1, [pc, #20]	@ (8004f9c <fflush+0x1c>)
 8004f88:	4805      	ldr	r0, [pc, #20]	@ (8004fa0 <fflush+0x20>)
 8004f8a:	f000 b8b1 	b.w	80050f0 <_fwalk_sglue>
 8004f8e:	4b05      	ldr	r3, [pc, #20]	@ (8004fa4 <fflush+0x24>)
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	f7ff bfcd 	b.w	8004f30 <_fflush_r>
 8004f96:	bf00      	nop
 8004f98:	20000010 	.word	0x20000010
 8004f9c:	08004f31 	.word	0x08004f31
 8004fa0:	20000020 	.word	0x20000020
 8004fa4:	2000001c 	.word	0x2000001c

08004fa8 <std>:
 8004fa8:	2300      	movs	r3, #0
 8004faa:	b510      	push	{r4, lr}
 8004fac:	4604      	mov	r4, r0
 8004fae:	e9c0 3300 	strd	r3, r3, [r0]
 8004fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fb6:	6083      	str	r3, [r0, #8]
 8004fb8:	8181      	strh	r1, [r0, #12]
 8004fba:	6643      	str	r3, [r0, #100]	@ 0x64
 8004fbc:	81c2      	strh	r2, [r0, #14]
 8004fbe:	6183      	str	r3, [r0, #24]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	2208      	movs	r2, #8
 8004fc4:	305c      	adds	r0, #92	@ 0x5c
 8004fc6:	f000 f906 	bl	80051d6 <memset>
 8004fca:	4b0d      	ldr	r3, [pc, #52]	@ (8005000 <std+0x58>)
 8004fcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8004fce:	4b0d      	ldr	r3, [pc, #52]	@ (8005004 <std+0x5c>)
 8004fd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005008 <std+0x60>)
 8004fd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800500c <std+0x64>)
 8004fd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004fda:	4b0d      	ldr	r3, [pc, #52]	@ (8005010 <std+0x68>)
 8004fdc:	6224      	str	r4, [r4, #32]
 8004fde:	429c      	cmp	r4, r3
 8004fe0:	d006      	beq.n	8004ff0 <std+0x48>
 8004fe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004fe6:	4294      	cmp	r4, r2
 8004fe8:	d002      	beq.n	8004ff0 <std+0x48>
 8004fea:	33d0      	adds	r3, #208	@ 0xd0
 8004fec:	429c      	cmp	r4, r3
 8004fee:	d105      	bne.n	8004ffc <std+0x54>
 8004ff0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ff8:	f000 b9bc 	b.w	8005374 <__retarget_lock_init_recursive>
 8004ffc:	bd10      	pop	{r4, pc}
 8004ffe:	bf00      	nop
 8005000:	08005151 	.word	0x08005151
 8005004:	08005173 	.word	0x08005173
 8005008:	080051ab 	.word	0x080051ab
 800500c:	080051cf 	.word	0x080051cf
 8005010:	20004598 	.word	0x20004598

08005014 <stdio_exit_handler>:
 8005014:	4a02      	ldr	r2, [pc, #8]	@ (8005020 <stdio_exit_handler+0xc>)
 8005016:	4903      	ldr	r1, [pc, #12]	@ (8005024 <stdio_exit_handler+0x10>)
 8005018:	4803      	ldr	r0, [pc, #12]	@ (8005028 <stdio_exit_handler+0x14>)
 800501a:	f000 b869 	b.w	80050f0 <_fwalk_sglue>
 800501e:	bf00      	nop
 8005020:	20000010 	.word	0x20000010
 8005024:	08004f31 	.word	0x08004f31
 8005028:	20000020 	.word	0x20000020

0800502c <cleanup_stdio>:
 800502c:	6841      	ldr	r1, [r0, #4]
 800502e:	4b0c      	ldr	r3, [pc, #48]	@ (8005060 <cleanup_stdio+0x34>)
 8005030:	4299      	cmp	r1, r3
 8005032:	b510      	push	{r4, lr}
 8005034:	4604      	mov	r4, r0
 8005036:	d001      	beq.n	800503c <cleanup_stdio+0x10>
 8005038:	f7ff ff7a 	bl	8004f30 <_fflush_r>
 800503c:	68a1      	ldr	r1, [r4, #8]
 800503e:	4b09      	ldr	r3, [pc, #36]	@ (8005064 <cleanup_stdio+0x38>)
 8005040:	4299      	cmp	r1, r3
 8005042:	d002      	beq.n	800504a <cleanup_stdio+0x1e>
 8005044:	4620      	mov	r0, r4
 8005046:	f7ff ff73 	bl	8004f30 <_fflush_r>
 800504a:	68e1      	ldr	r1, [r4, #12]
 800504c:	4b06      	ldr	r3, [pc, #24]	@ (8005068 <cleanup_stdio+0x3c>)
 800504e:	4299      	cmp	r1, r3
 8005050:	d004      	beq.n	800505c <cleanup_stdio+0x30>
 8005052:	4620      	mov	r0, r4
 8005054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005058:	f7ff bf6a 	b.w	8004f30 <_fflush_r>
 800505c:	bd10      	pop	{r4, pc}
 800505e:	bf00      	nop
 8005060:	20004598 	.word	0x20004598
 8005064:	20004600 	.word	0x20004600
 8005068:	20004668 	.word	0x20004668

0800506c <global_stdio_init.part.0>:
 800506c:	b510      	push	{r4, lr}
 800506e:	4b0b      	ldr	r3, [pc, #44]	@ (800509c <global_stdio_init.part.0+0x30>)
 8005070:	4c0b      	ldr	r4, [pc, #44]	@ (80050a0 <global_stdio_init.part.0+0x34>)
 8005072:	4a0c      	ldr	r2, [pc, #48]	@ (80050a4 <global_stdio_init.part.0+0x38>)
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	4620      	mov	r0, r4
 8005078:	2200      	movs	r2, #0
 800507a:	2104      	movs	r1, #4
 800507c:	f7ff ff94 	bl	8004fa8 <std>
 8005080:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005084:	2201      	movs	r2, #1
 8005086:	2109      	movs	r1, #9
 8005088:	f7ff ff8e 	bl	8004fa8 <std>
 800508c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005090:	2202      	movs	r2, #2
 8005092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005096:	2112      	movs	r1, #18
 8005098:	f7ff bf86 	b.w	8004fa8 <std>
 800509c:	200046d0 	.word	0x200046d0
 80050a0:	20004598 	.word	0x20004598
 80050a4:	08005015 	.word	0x08005015

080050a8 <__sfp_lock_acquire>:
 80050a8:	4801      	ldr	r0, [pc, #4]	@ (80050b0 <__sfp_lock_acquire+0x8>)
 80050aa:	f000 b964 	b.w	8005376 <__retarget_lock_acquire_recursive>
 80050ae:	bf00      	nop
 80050b0:	200046d9 	.word	0x200046d9

080050b4 <__sfp_lock_release>:
 80050b4:	4801      	ldr	r0, [pc, #4]	@ (80050bc <__sfp_lock_release+0x8>)
 80050b6:	f000 b95f 	b.w	8005378 <__retarget_lock_release_recursive>
 80050ba:	bf00      	nop
 80050bc:	200046d9 	.word	0x200046d9

080050c0 <__sinit>:
 80050c0:	b510      	push	{r4, lr}
 80050c2:	4604      	mov	r4, r0
 80050c4:	f7ff fff0 	bl	80050a8 <__sfp_lock_acquire>
 80050c8:	6a23      	ldr	r3, [r4, #32]
 80050ca:	b11b      	cbz	r3, 80050d4 <__sinit+0x14>
 80050cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050d0:	f7ff bff0 	b.w	80050b4 <__sfp_lock_release>
 80050d4:	4b04      	ldr	r3, [pc, #16]	@ (80050e8 <__sinit+0x28>)
 80050d6:	6223      	str	r3, [r4, #32]
 80050d8:	4b04      	ldr	r3, [pc, #16]	@ (80050ec <__sinit+0x2c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1f5      	bne.n	80050cc <__sinit+0xc>
 80050e0:	f7ff ffc4 	bl	800506c <global_stdio_init.part.0>
 80050e4:	e7f2      	b.n	80050cc <__sinit+0xc>
 80050e6:	bf00      	nop
 80050e8:	0800502d 	.word	0x0800502d
 80050ec:	200046d0 	.word	0x200046d0

080050f0 <_fwalk_sglue>:
 80050f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050f4:	4607      	mov	r7, r0
 80050f6:	4688      	mov	r8, r1
 80050f8:	4614      	mov	r4, r2
 80050fa:	2600      	movs	r6, #0
 80050fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005100:	f1b9 0901 	subs.w	r9, r9, #1
 8005104:	d505      	bpl.n	8005112 <_fwalk_sglue+0x22>
 8005106:	6824      	ldr	r4, [r4, #0]
 8005108:	2c00      	cmp	r4, #0
 800510a:	d1f7      	bne.n	80050fc <_fwalk_sglue+0xc>
 800510c:	4630      	mov	r0, r6
 800510e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005112:	89ab      	ldrh	r3, [r5, #12]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d907      	bls.n	8005128 <_fwalk_sglue+0x38>
 8005118:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800511c:	3301      	adds	r3, #1
 800511e:	d003      	beq.n	8005128 <_fwalk_sglue+0x38>
 8005120:	4629      	mov	r1, r5
 8005122:	4638      	mov	r0, r7
 8005124:	47c0      	blx	r8
 8005126:	4306      	orrs	r6, r0
 8005128:	3568      	adds	r5, #104	@ 0x68
 800512a:	e7e9      	b.n	8005100 <_fwalk_sglue+0x10>

0800512c <iprintf>:
 800512c:	b40f      	push	{r0, r1, r2, r3}
 800512e:	b507      	push	{r0, r1, r2, lr}
 8005130:	4906      	ldr	r1, [pc, #24]	@ (800514c <iprintf+0x20>)
 8005132:	ab04      	add	r3, sp, #16
 8005134:	6808      	ldr	r0, [r1, #0]
 8005136:	f853 2b04 	ldr.w	r2, [r3], #4
 800513a:	6881      	ldr	r1, [r0, #8]
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	f000 fa3f 	bl	80055c0 <_vfiprintf_r>
 8005142:	b003      	add	sp, #12
 8005144:	f85d eb04 	ldr.w	lr, [sp], #4
 8005148:	b004      	add	sp, #16
 800514a:	4770      	bx	lr
 800514c:	2000001c 	.word	0x2000001c

08005150 <__sread>:
 8005150:	b510      	push	{r4, lr}
 8005152:	460c      	mov	r4, r1
 8005154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005158:	f000 f8be 	bl	80052d8 <_read_r>
 800515c:	2800      	cmp	r0, #0
 800515e:	bfab      	itete	ge
 8005160:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005162:	89a3      	ldrhlt	r3, [r4, #12]
 8005164:	181b      	addge	r3, r3, r0
 8005166:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800516a:	bfac      	ite	ge
 800516c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800516e:	81a3      	strhlt	r3, [r4, #12]
 8005170:	bd10      	pop	{r4, pc}

08005172 <__swrite>:
 8005172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005176:	461f      	mov	r7, r3
 8005178:	898b      	ldrh	r3, [r1, #12]
 800517a:	05db      	lsls	r3, r3, #23
 800517c:	4605      	mov	r5, r0
 800517e:	460c      	mov	r4, r1
 8005180:	4616      	mov	r6, r2
 8005182:	d505      	bpl.n	8005190 <__swrite+0x1e>
 8005184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005188:	2302      	movs	r3, #2
 800518a:	2200      	movs	r2, #0
 800518c:	f000 f892 	bl	80052b4 <_lseek_r>
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005196:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800519a:	81a3      	strh	r3, [r4, #12]
 800519c:	4632      	mov	r2, r6
 800519e:	463b      	mov	r3, r7
 80051a0:	4628      	mov	r0, r5
 80051a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051a6:	f000 b8a9 	b.w	80052fc <_write_r>

080051aa <__sseek>:
 80051aa:	b510      	push	{r4, lr}
 80051ac:	460c      	mov	r4, r1
 80051ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b2:	f000 f87f 	bl	80052b4 <_lseek_r>
 80051b6:	1c43      	adds	r3, r0, #1
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	bf15      	itete	ne
 80051bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80051be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80051c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80051c6:	81a3      	strheq	r3, [r4, #12]
 80051c8:	bf18      	it	ne
 80051ca:	81a3      	strhne	r3, [r4, #12]
 80051cc:	bd10      	pop	{r4, pc}

080051ce <__sclose>:
 80051ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d2:	f000 b809 	b.w	80051e8 <_close_r>

080051d6 <memset>:
 80051d6:	4402      	add	r2, r0
 80051d8:	4603      	mov	r3, r0
 80051da:	4293      	cmp	r3, r2
 80051dc:	d100      	bne.n	80051e0 <memset+0xa>
 80051de:	4770      	bx	lr
 80051e0:	f803 1b01 	strb.w	r1, [r3], #1
 80051e4:	e7f9      	b.n	80051da <memset+0x4>
	...

080051e8 <_close_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d06      	ldr	r5, [pc, #24]	@ (8005204 <_close_r+0x1c>)
 80051ec:	2300      	movs	r3, #0
 80051ee:	4604      	mov	r4, r0
 80051f0:	4608      	mov	r0, r1
 80051f2:	602b      	str	r3, [r5, #0]
 80051f4:	f000 fe84 	bl	8005f00 <_close>
 80051f8:	1c43      	adds	r3, r0, #1
 80051fa:	d102      	bne.n	8005202 <_close_r+0x1a>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	b103      	cbz	r3, 8005202 <_close_r+0x1a>
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	200046d4 	.word	0x200046d4

08005208 <_reclaim_reent>:
 8005208:	4b29      	ldr	r3, [pc, #164]	@ (80052b0 <_reclaim_reent+0xa8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4283      	cmp	r3, r0
 800520e:	b570      	push	{r4, r5, r6, lr}
 8005210:	4604      	mov	r4, r0
 8005212:	d04b      	beq.n	80052ac <_reclaim_reent+0xa4>
 8005214:	69c3      	ldr	r3, [r0, #28]
 8005216:	b1ab      	cbz	r3, 8005244 <_reclaim_reent+0x3c>
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	b16b      	cbz	r3, 8005238 <_reclaim_reent+0x30>
 800521c:	2500      	movs	r5, #0
 800521e:	69e3      	ldr	r3, [r4, #28]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	5959      	ldr	r1, [r3, r5]
 8005224:	2900      	cmp	r1, #0
 8005226:	d13b      	bne.n	80052a0 <_reclaim_reent+0x98>
 8005228:	3504      	adds	r5, #4
 800522a:	2d80      	cmp	r5, #128	@ 0x80
 800522c:	d1f7      	bne.n	800521e <_reclaim_reent+0x16>
 800522e:	69e3      	ldr	r3, [r4, #28]
 8005230:	4620      	mov	r0, r4
 8005232:	68d9      	ldr	r1, [r3, #12]
 8005234:	f000 f8a2 	bl	800537c <_free_r>
 8005238:	69e3      	ldr	r3, [r4, #28]
 800523a:	6819      	ldr	r1, [r3, #0]
 800523c:	b111      	cbz	r1, 8005244 <_reclaim_reent+0x3c>
 800523e:	4620      	mov	r0, r4
 8005240:	f000 f89c 	bl	800537c <_free_r>
 8005244:	6961      	ldr	r1, [r4, #20]
 8005246:	b111      	cbz	r1, 800524e <_reclaim_reent+0x46>
 8005248:	4620      	mov	r0, r4
 800524a:	f000 f897 	bl	800537c <_free_r>
 800524e:	69e1      	ldr	r1, [r4, #28]
 8005250:	b111      	cbz	r1, 8005258 <_reclaim_reent+0x50>
 8005252:	4620      	mov	r0, r4
 8005254:	f000 f892 	bl	800537c <_free_r>
 8005258:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800525a:	b111      	cbz	r1, 8005262 <_reclaim_reent+0x5a>
 800525c:	4620      	mov	r0, r4
 800525e:	f000 f88d 	bl	800537c <_free_r>
 8005262:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005264:	b111      	cbz	r1, 800526c <_reclaim_reent+0x64>
 8005266:	4620      	mov	r0, r4
 8005268:	f000 f888 	bl	800537c <_free_r>
 800526c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800526e:	b111      	cbz	r1, 8005276 <_reclaim_reent+0x6e>
 8005270:	4620      	mov	r0, r4
 8005272:	f000 f883 	bl	800537c <_free_r>
 8005276:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005278:	b111      	cbz	r1, 8005280 <_reclaim_reent+0x78>
 800527a:	4620      	mov	r0, r4
 800527c:	f000 f87e 	bl	800537c <_free_r>
 8005280:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005282:	b111      	cbz	r1, 800528a <_reclaim_reent+0x82>
 8005284:	4620      	mov	r0, r4
 8005286:	f000 f879 	bl	800537c <_free_r>
 800528a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800528c:	b111      	cbz	r1, 8005294 <_reclaim_reent+0x8c>
 800528e:	4620      	mov	r0, r4
 8005290:	f000 f874 	bl	800537c <_free_r>
 8005294:	6a23      	ldr	r3, [r4, #32]
 8005296:	b14b      	cbz	r3, 80052ac <_reclaim_reent+0xa4>
 8005298:	4620      	mov	r0, r4
 800529a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800529e:	4718      	bx	r3
 80052a0:	680e      	ldr	r6, [r1, #0]
 80052a2:	4620      	mov	r0, r4
 80052a4:	f000 f86a 	bl	800537c <_free_r>
 80052a8:	4631      	mov	r1, r6
 80052aa:	e7bb      	b.n	8005224 <_reclaim_reent+0x1c>
 80052ac:	bd70      	pop	{r4, r5, r6, pc}
 80052ae:	bf00      	nop
 80052b0:	2000001c 	.word	0x2000001c

080052b4 <_lseek_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4d07      	ldr	r5, [pc, #28]	@ (80052d4 <_lseek_r+0x20>)
 80052b8:	4604      	mov	r4, r0
 80052ba:	4608      	mov	r0, r1
 80052bc:	4611      	mov	r1, r2
 80052be:	2200      	movs	r2, #0
 80052c0:	602a      	str	r2, [r5, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f000 fddd 	bl	8005e82 <_lseek>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d102      	bne.n	80052d2 <_lseek_r+0x1e>
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	b103      	cbz	r3, 80052d2 <_lseek_r+0x1e>
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
 80052d4:	200046d4 	.word	0x200046d4

080052d8 <_read_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4d07      	ldr	r5, [pc, #28]	@ (80052f8 <_read_r+0x20>)
 80052dc:	4604      	mov	r4, r0
 80052de:	4608      	mov	r0, r1
 80052e0:	4611      	mov	r1, r2
 80052e2:	2200      	movs	r2, #0
 80052e4:	602a      	str	r2, [r5, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f000 fd75 	bl	8005dd6 <_read>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d102      	bne.n	80052f6 <_read_r+0x1e>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	b103      	cbz	r3, 80052f6 <_read_r+0x1e>
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	200046d4 	.word	0x200046d4

080052fc <_write_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	4d07      	ldr	r5, [pc, #28]	@ (800531c <_write_r+0x20>)
 8005300:	4604      	mov	r4, r0
 8005302:	4608      	mov	r0, r1
 8005304:	4611      	mov	r1, r2
 8005306:	2200      	movs	r2, #0
 8005308:	602a      	str	r2, [r5, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	f000 fdcb 	bl	8005ea6 <_write>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	d102      	bne.n	800531a <_write_r+0x1e>
 8005314:	682b      	ldr	r3, [r5, #0]
 8005316:	b103      	cbz	r3, 800531a <_write_r+0x1e>
 8005318:	6023      	str	r3, [r4, #0]
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	200046d4 	.word	0x200046d4

08005320 <__errno>:
 8005320:	4b01      	ldr	r3, [pc, #4]	@ (8005328 <__errno+0x8>)
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	2000001c 	.word	0x2000001c

0800532c <__libc_init_array>:
 800532c:	b570      	push	{r4, r5, r6, lr}
 800532e:	4d0d      	ldr	r5, [pc, #52]	@ (8005364 <__libc_init_array+0x38>)
 8005330:	4c0d      	ldr	r4, [pc, #52]	@ (8005368 <__libc_init_array+0x3c>)
 8005332:	1b64      	subs	r4, r4, r5
 8005334:	10a4      	asrs	r4, r4, #2
 8005336:	2600      	movs	r6, #0
 8005338:	42a6      	cmp	r6, r4
 800533a:	d109      	bne.n	8005350 <__libc_init_array+0x24>
 800533c:	4d0b      	ldr	r5, [pc, #44]	@ (800536c <__libc_init_array+0x40>)
 800533e:	4c0c      	ldr	r4, [pc, #48]	@ (8005370 <__libc_init_array+0x44>)
 8005340:	f000 ffa2 	bl	8006288 <_init>
 8005344:	1b64      	subs	r4, r4, r5
 8005346:	10a4      	asrs	r4, r4, #2
 8005348:	2600      	movs	r6, #0
 800534a:	42a6      	cmp	r6, r4
 800534c:	d105      	bne.n	800535a <__libc_init_array+0x2e>
 800534e:	bd70      	pop	{r4, r5, r6, pc}
 8005350:	f855 3b04 	ldr.w	r3, [r5], #4
 8005354:	4798      	blx	r3
 8005356:	3601      	adds	r6, #1
 8005358:	e7ee      	b.n	8005338 <__libc_init_array+0xc>
 800535a:	f855 3b04 	ldr.w	r3, [r5], #4
 800535e:	4798      	blx	r3
 8005360:	3601      	adds	r6, #1
 8005362:	e7f2      	b.n	800534a <__libc_init_array+0x1e>
 8005364:	08006424 	.word	0x08006424
 8005368:	08006424 	.word	0x08006424
 800536c:	08006424 	.word	0x08006424
 8005370:	08006428 	.word	0x08006428

08005374 <__retarget_lock_init_recursive>:
 8005374:	4770      	bx	lr

08005376 <__retarget_lock_acquire_recursive>:
 8005376:	4770      	bx	lr

08005378 <__retarget_lock_release_recursive>:
 8005378:	4770      	bx	lr
	...

0800537c <_free_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4605      	mov	r5, r0
 8005380:	2900      	cmp	r1, #0
 8005382:	d041      	beq.n	8005408 <_free_r+0x8c>
 8005384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005388:	1f0c      	subs	r4, r1, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	bfb8      	it	lt
 800538e:	18e4      	addlt	r4, r4, r3
 8005390:	f000 f8e0 	bl	8005554 <__malloc_lock>
 8005394:	4a1d      	ldr	r2, [pc, #116]	@ (800540c <_free_r+0x90>)
 8005396:	6813      	ldr	r3, [r2, #0]
 8005398:	b933      	cbnz	r3, 80053a8 <_free_r+0x2c>
 800539a:	6063      	str	r3, [r4, #4]
 800539c:	6014      	str	r4, [r2, #0]
 800539e:	4628      	mov	r0, r5
 80053a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053a4:	f000 b8dc 	b.w	8005560 <__malloc_unlock>
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	d908      	bls.n	80053be <_free_r+0x42>
 80053ac:	6820      	ldr	r0, [r4, #0]
 80053ae:	1821      	adds	r1, r4, r0
 80053b0:	428b      	cmp	r3, r1
 80053b2:	bf01      	itttt	eq
 80053b4:	6819      	ldreq	r1, [r3, #0]
 80053b6:	685b      	ldreq	r3, [r3, #4]
 80053b8:	1809      	addeq	r1, r1, r0
 80053ba:	6021      	streq	r1, [r4, #0]
 80053bc:	e7ed      	b.n	800539a <_free_r+0x1e>
 80053be:	461a      	mov	r2, r3
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	b10b      	cbz	r3, 80053c8 <_free_r+0x4c>
 80053c4:	42a3      	cmp	r3, r4
 80053c6:	d9fa      	bls.n	80053be <_free_r+0x42>
 80053c8:	6811      	ldr	r1, [r2, #0]
 80053ca:	1850      	adds	r0, r2, r1
 80053cc:	42a0      	cmp	r0, r4
 80053ce:	d10b      	bne.n	80053e8 <_free_r+0x6c>
 80053d0:	6820      	ldr	r0, [r4, #0]
 80053d2:	4401      	add	r1, r0
 80053d4:	1850      	adds	r0, r2, r1
 80053d6:	4283      	cmp	r3, r0
 80053d8:	6011      	str	r1, [r2, #0]
 80053da:	d1e0      	bne.n	800539e <_free_r+0x22>
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	6053      	str	r3, [r2, #4]
 80053e2:	4408      	add	r0, r1
 80053e4:	6010      	str	r0, [r2, #0]
 80053e6:	e7da      	b.n	800539e <_free_r+0x22>
 80053e8:	d902      	bls.n	80053f0 <_free_r+0x74>
 80053ea:	230c      	movs	r3, #12
 80053ec:	602b      	str	r3, [r5, #0]
 80053ee:	e7d6      	b.n	800539e <_free_r+0x22>
 80053f0:	6820      	ldr	r0, [r4, #0]
 80053f2:	1821      	adds	r1, r4, r0
 80053f4:	428b      	cmp	r3, r1
 80053f6:	bf04      	itt	eq
 80053f8:	6819      	ldreq	r1, [r3, #0]
 80053fa:	685b      	ldreq	r3, [r3, #4]
 80053fc:	6063      	str	r3, [r4, #4]
 80053fe:	bf04      	itt	eq
 8005400:	1809      	addeq	r1, r1, r0
 8005402:	6021      	streq	r1, [r4, #0]
 8005404:	6054      	str	r4, [r2, #4]
 8005406:	e7ca      	b.n	800539e <_free_r+0x22>
 8005408:	bd38      	pop	{r3, r4, r5, pc}
 800540a:	bf00      	nop
 800540c:	200046e0 	.word	0x200046e0

08005410 <sbrk_aligned>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	4e0f      	ldr	r6, [pc, #60]	@ (8005450 <sbrk_aligned+0x40>)
 8005414:	460c      	mov	r4, r1
 8005416:	6831      	ldr	r1, [r6, #0]
 8005418:	4605      	mov	r5, r0
 800541a:	b911      	cbnz	r1, 8005422 <sbrk_aligned+0x12>
 800541c:	f000 fc0a 	bl	8005c34 <_sbrk_r>
 8005420:	6030      	str	r0, [r6, #0]
 8005422:	4621      	mov	r1, r4
 8005424:	4628      	mov	r0, r5
 8005426:	f000 fc05 	bl	8005c34 <_sbrk_r>
 800542a:	1c43      	adds	r3, r0, #1
 800542c:	d103      	bne.n	8005436 <sbrk_aligned+0x26>
 800542e:	f04f 34ff 	mov.w	r4, #4294967295
 8005432:	4620      	mov	r0, r4
 8005434:	bd70      	pop	{r4, r5, r6, pc}
 8005436:	1cc4      	adds	r4, r0, #3
 8005438:	f024 0403 	bic.w	r4, r4, #3
 800543c:	42a0      	cmp	r0, r4
 800543e:	d0f8      	beq.n	8005432 <sbrk_aligned+0x22>
 8005440:	1a21      	subs	r1, r4, r0
 8005442:	4628      	mov	r0, r5
 8005444:	f000 fbf6 	bl	8005c34 <_sbrk_r>
 8005448:	3001      	adds	r0, #1
 800544a:	d1f2      	bne.n	8005432 <sbrk_aligned+0x22>
 800544c:	e7ef      	b.n	800542e <sbrk_aligned+0x1e>
 800544e:	bf00      	nop
 8005450:	200046dc 	.word	0x200046dc

08005454 <_malloc_r>:
 8005454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005458:	1ccd      	adds	r5, r1, #3
 800545a:	f025 0503 	bic.w	r5, r5, #3
 800545e:	3508      	adds	r5, #8
 8005460:	2d0c      	cmp	r5, #12
 8005462:	bf38      	it	cc
 8005464:	250c      	movcc	r5, #12
 8005466:	2d00      	cmp	r5, #0
 8005468:	4606      	mov	r6, r0
 800546a:	db01      	blt.n	8005470 <_malloc_r+0x1c>
 800546c:	42a9      	cmp	r1, r5
 800546e:	d904      	bls.n	800547a <_malloc_r+0x26>
 8005470:	230c      	movs	r3, #12
 8005472:	6033      	str	r3, [r6, #0]
 8005474:	2000      	movs	r0, #0
 8005476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800547a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005550 <_malloc_r+0xfc>
 800547e:	f000 f869 	bl	8005554 <__malloc_lock>
 8005482:	f8d8 3000 	ldr.w	r3, [r8]
 8005486:	461c      	mov	r4, r3
 8005488:	bb44      	cbnz	r4, 80054dc <_malloc_r+0x88>
 800548a:	4629      	mov	r1, r5
 800548c:	4630      	mov	r0, r6
 800548e:	f7ff ffbf 	bl	8005410 <sbrk_aligned>
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	4604      	mov	r4, r0
 8005496:	d158      	bne.n	800554a <_malloc_r+0xf6>
 8005498:	f8d8 4000 	ldr.w	r4, [r8]
 800549c:	4627      	mov	r7, r4
 800549e:	2f00      	cmp	r7, #0
 80054a0:	d143      	bne.n	800552a <_malloc_r+0xd6>
 80054a2:	2c00      	cmp	r4, #0
 80054a4:	d04b      	beq.n	800553e <_malloc_r+0xea>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	4639      	mov	r1, r7
 80054aa:	4630      	mov	r0, r6
 80054ac:	eb04 0903 	add.w	r9, r4, r3
 80054b0:	f000 fbc0 	bl	8005c34 <_sbrk_r>
 80054b4:	4581      	cmp	r9, r0
 80054b6:	d142      	bne.n	800553e <_malloc_r+0xea>
 80054b8:	6821      	ldr	r1, [r4, #0]
 80054ba:	1a6d      	subs	r5, r5, r1
 80054bc:	4629      	mov	r1, r5
 80054be:	4630      	mov	r0, r6
 80054c0:	f7ff ffa6 	bl	8005410 <sbrk_aligned>
 80054c4:	3001      	adds	r0, #1
 80054c6:	d03a      	beq.n	800553e <_malloc_r+0xea>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	442b      	add	r3, r5
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	f8d8 3000 	ldr.w	r3, [r8]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	bb62      	cbnz	r2, 8005530 <_malloc_r+0xdc>
 80054d6:	f8c8 7000 	str.w	r7, [r8]
 80054da:	e00f      	b.n	80054fc <_malloc_r+0xa8>
 80054dc:	6822      	ldr	r2, [r4, #0]
 80054de:	1b52      	subs	r2, r2, r5
 80054e0:	d420      	bmi.n	8005524 <_malloc_r+0xd0>
 80054e2:	2a0b      	cmp	r2, #11
 80054e4:	d917      	bls.n	8005516 <_malloc_r+0xc2>
 80054e6:	1961      	adds	r1, r4, r5
 80054e8:	42a3      	cmp	r3, r4
 80054ea:	6025      	str	r5, [r4, #0]
 80054ec:	bf18      	it	ne
 80054ee:	6059      	strne	r1, [r3, #4]
 80054f0:	6863      	ldr	r3, [r4, #4]
 80054f2:	bf08      	it	eq
 80054f4:	f8c8 1000 	streq.w	r1, [r8]
 80054f8:	5162      	str	r2, [r4, r5]
 80054fa:	604b      	str	r3, [r1, #4]
 80054fc:	4630      	mov	r0, r6
 80054fe:	f000 f82f 	bl	8005560 <__malloc_unlock>
 8005502:	f104 000b 	add.w	r0, r4, #11
 8005506:	1d23      	adds	r3, r4, #4
 8005508:	f020 0007 	bic.w	r0, r0, #7
 800550c:	1ac2      	subs	r2, r0, r3
 800550e:	bf1c      	itt	ne
 8005510:	1a1b      	subne	r3, r3, r0
 8005512:	50a3      	strne	r3, [r4, r2]
 8005514:	e7af      	b.n	8005476 <_malloc_r+0x22>
 8005516:	6862      	ldr	r2, [r4, #4]
 8005518:	42a3      	cmp	r3, r4
 800551a:	bf0c      	ite	eq
 800551c:	f8c8 2000 	streq.w	r2, [r8]
 8005520:	605a      	strne	r2, [r3, #4]
 8005522:	e7eb      	b.n	80054fc <_malloc_r+0xa8>
 8005524:	4623      	mov	r3, r4
 8005526:	6864      	ldr	r4, [r4, #4]
 8005528:	e7ae      	b.n	8005488 <_malloc_r+0x34>
 800552a:	463c      	mov	r4, r7
 800552c:	687f      	ldr	r7, [r7, #4]
 800552e:	e7b6      	b.n	800549e <_malloc_r+0x4a>
 8005530:	461a      	mov	r2, r3
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	42a3      	cmp	r3, r4
 8005536:	d1fb      	bne.n	8005530 <_malloc_r+0xdc>
 8005538:	2300      	movs	r3, #0
 800553a:	6053      	str	r3, [r2, #4]
 800553c:	e7de      	b.n	80054fc <_malloc_r+0xa8>
 800553e:	230c      	movs	r3, #12
 8005540:	6033      	str	r3, [r6, #0]
 8005542:	4630      	mov	r0, r6
 8005544:	f000 f80c 	bl	8005560 <__malloc_unlock>
 8005548:	e794      	b.n	8005474 <_malloc_r+0x20>
 800554a:	6005      	str	r5, [r0, #0]
 800554c:	e7d6      	b.n	80054fc <_malloc_r+0xa8>
 800554e:	bf00      	nop
 8005550:	200046e0 	.word	0x200046e0

08005554 <__malloc_lock>:
 8005554:	4801      	ldr	r0, [pc, #4]	@ (800555c <__malloc_lock+0x8>)
 8005556:	f7ff bf0e 	b.w	8005376 <__retarget_lock_acquire_recursive>
 800555a:	bf00      	nop
 800555c:	200046d8 	.word	0x200046d8

08005560 <__malloc_unlock>:
 8005560:	4801      	ldr	r0, [pc, #4]	@ (8005568 <__malloc_unlock+0x8>)
 8005562:	f7ff bf09 	b.w	8005378 <__retarget_lock_release_recursive>
 8005566:	bf00      	nop
 8005568:	200046d8 	.word	0x200046d8

0800556c <__sfputc_r>:
 800556c:	6893      	ldr	r3, [r2, #8]
 800556e:	3b01      	subs	r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	b410      	push	{r4}
 8005574:	6093      	str	r3, [r2, #8]
 8005576:	da08      	bge.n	800558a <__sfputc_r+0x1e>
 8005578:	6994      	ldr	r4, [r2, #24]
 800557a:	42a3      	cmp	r3, r4
 800557c:	db01      	blt.n	8005582 <__sfputc_r+0x16>
 800557e:	290a      	cmp	r1, #10
 8005580:	d103      	bne.n	800558a <__sfputc_r+0x1e>
 8005582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005586:	f000 bac1 	b.w	8005b0c <__swbuf_r>
 800558a:	6813      	ldr	r3, [r2, #0]
 800558c:	1c58      	adds	r0, r3, #1
 800558e:	6010      	str	r0, [r2, #0]
 8005590:	7019      	strb	r1, [r3, #0]
 8005592:	4608      	mov	r0, r1
 8005594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005598:	4770      	bx	lr

0800559a <__sfputs_r>:
 800559a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559c:	4606      	mov	r6, r0
 800559e:	460f      	mov	r7, r1
 80055a0:	4614      	mov	r4, r2
 80055a2:	18d5      	adds	r5, r2, r3
 80055a4:	42ac      	cmp	r4, r5
 80055a6:	d101      	bne.n	80055ac <__sfputs_r+0x12>
 80055a8:	2000      	movs	r0, #0
 80055aa:	e007      	b.n	80055bc <__sfputs_r+0x22>
 80055ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055b0:	463a      	mov	r2, r7
 80055b2:	4630      	mov	r0, r6
 80055b4:	f7ff ffda 	bl	800556c <__sfputc_r>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d1f3      	bne.n	80055a4 <__sfputs_r+0xa>
 80055bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055c0 <_vfiprintf_r>:
 80055c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c4:	460d      	mov	r5, r1
 80055c6:	b09d      	sub	sp, #116	@ 0x74
 80055c8:	4614      	mov	r4, r2
 80055ca:	4698      	mov	r8, r3
 80055cc:	4606      	mov	r6, r0
 80055ce:	b118      	cbz	r0, 80055d8 <_vfiprintf_r+0x18>
 80055d0:	6a03      	ldr	r3, [r0, #32]
 80055d2:	b90b      	cbnz	r3, 80055d8 <_vfiprintf_r+0x18>
 80055d4:	f7ff fd74 	bl	80050c0 <__sinit>
 80055d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055da:	07d9      	lsls	r1, r3, #31
 80055dc:	d405      	bmi.n	80055ea <_vfiprintf_r+0x2a>
 80055de:	89ab      	ldrh	r3, [r5, #12]
 80055e0:	059a      	lsls	r2, r3, #22
 80055e2:	d402      	bmi.n	80055ea <_vfiprintf_r+0x2a>
 80055e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055e6:	f7ff fec6 	bl	8005376 <__retarget_lock_acquire_recursive>
 80055ea:	89ab      	ldrh	r3, [r5, #12]
 80055ec:	071b      	lsls	r3, r3, #28
 80055ee:	d501      	bpl.n	80055f4 <_vfiprintf_r+0x34>
 80055f0:	692b      	ldr	r3, [r5, #16]
 80055f2:	b99b      	cbnz	r3, 800561c <_vfiprintf_r+0x5c>
 80055f4:	4629      	mov	r1, r5
 80055f6:	4630      	mov	r0, r6
 80055f8:	f000 fac6 	bl	8005b88 <__swsetup_r>
 80055fc:	b170      	cbz	r0, 800561c <_vfiprintf_r+0x5c>
 80055fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005600:	07dc      	lsls	r4, r3, #31
 8005602:	d504      	bpl.n	800560e <_vfiprintf_r+0x4e>
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
 8005608:	b01d      	add	sp, #116	@ 0x74
 800560a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800560e:	89ab      	ldrh	r3, [r5, #12]
 8005610:	0598      	lsls	r0, r3, #22
 8005612:	d4f7      	bmi.n	8005604 <_vfiprintf_r+0x44>
 8005614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005616:	f7ff feaf 	bl	8005378 <__retarget_lock_release_recursive>
 800561a:	e7f3      	b.n	8005604 <_vfiprintf_r+0x44>
 800561c:	2300      	movs	r3, #0
 800561e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005620:	2320      	movs	r3, #32
 8005622:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005626:	f8cd 800c 	str.w	r8, [sp, #12]
 800562a:	2330      	movs	r3, #48	@ 0x30
 800562c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80057dc <_vfiprintf_r+0x21c>
 8005630:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005634:	f04f 0901 	mov.w	r9, #1
 8005638:	4623      	mov	r3, r4
 800563a:	469a      	mov	sl, r3
 800563c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005640:	b10a      	cbz	r2, 8005646 <_vfiprintf_r+0x86>
 8005642:	2a25      	cmp	r2, #37	@ 0x25
 8005644:	d1f9      	bne.n	800563a <_vfiprintf_r+0x7a>
 8005646:	ebba 0b04 	subs.w	fp, sl, r4
 800564a:	d00b      	beq.n	8005664 <_vfiprintf_r+0xa4>
 800564c:	465b      	mov	r3, fp
 800564e:	4622      	mov	r2, r4
 8005650:	4629      	mov	r1, r5
 8005652:	4630      	mov	r0, r6
 8005654:	f7ff ffa1 	bl	800559a <__sfputs_r>
 8005658:	3001      	adds	r0, #1
 800565a:	f000 80a7 	beq.w	80057ac <_vfiprintf_r+0x1ec>
 800565e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005660:	445a      	add	r2, fp
 8005662:	9209      	str	r2, [sp, #36]	@ 0x24
 8005664:	f89a 3000 	ldrb.w	r3, [sl]
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 809f 	beq.w	80057ac <_vfiprintf_r+0x1ec>
 800566e:	2300      	movs	r3, #0
 8005670:	f04f 32ff 	mov.w	r2, #4294967295
 8005674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005678:	f10a 0a01 	add.w	sl, sl, #1
 800567c:	9304      	str	r3, [sp, #16]
 800567e:	9307      	str	r3, [sp, #28]
 8005680:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005684:	931a      	str	r3, [sp, #104]	@ 0x68
 8005686:	4654      	mov	r4, sl
 8005688:	2205      	movs	r2, #5
 800568a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800568e:	4853      	ldr	r0, [pc, #332]	@ (80057dc <_vfiprintf_r+0x21c>)
 8005690:	f7fa fdae 	bl	80001f0 <memchr>
 8005694:	9a04      	ldr	r2, [sp, #16]
 8005696:	b9d8      	cbnz	r0, 80056d0 <_vfiprintf_r+0x110>
 8005698:	06d1      	lsls	r1, r2, #27
 800569a:	bf44      	itt	mi
 800569c:	2320      	movmi	r3, #32
 800569e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056a2:	0713      	lsls	r3, r2, #28
 80056a4:	bf44      	itt	mi
 80056a6:	232b      	movmi	r3, #43	@ 0x2b
 80056a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056ac:	f89a 3000 	ldrb.w	r3, [sl]
 80056b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80056b2:	d015      	beq.n	80056e0 <_vfiprintf_r+0x120>
 80056b4:	9a07      	ldr	r2, [sp, #28]
 80056b6:	4654      	mov	r4, sl
 80056b8:	2000      	movs	r0, #0
 80056ba:	f04f 0c0a 	mov.w	ip, #10
 80056be:	4621      	mov	r1, r4
 80056c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056c4:	3b30      	subs	r3, #48	@ 0x30
 80056c6:	2b09      	cmp	r3, #9
 80056c8:	d94b      	bls.n	8005762 <_vfiprintf_r+0x1a2>
 80056ca:	b1b0      	cbz	r0, 80056fa <_vfiprintf_r+0x13a>
 80056cc:	9207      	str	r2, [sp, #28]
 80056ce:	e014      	b.n	80056fa <_vfiprintf_r+0x13a>
 80056d0:	eba0 0308 	sub.w	r3, r0, r8
 80056d4:	fa09 f303 	lsl.w	r3, r9, r3
 80056d8:	4313      	orrs	r3, r2
 80056da:	9304      	str	r3, [sp, #16]
 80056dc:	46a2      	mov	sl, r4
 80056de:	e7d2      	b.n	8005686 <_vfiprintf_r+0xc6>
 80056e0:	9b03      	ldr	r3, [sp, #12]
 80056e2:	1d19      	adds	r1, r3, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	9103      	str	r1, [sp, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bfbb      	ittet	lt
 80056ec:	425b      	neglt	r3, r3
 80056ee:	f042 0202 	orrlt.w	r2, r2, #2
 80056f2:	9307      	strge	r3, [sp, #28]
 80056f4:	9307      	strlt	r3, [sp, #28]
 80056f6:	bfb8      	it	lt
 80056f8:	9204      	strlt	r2, [sp, #16]
 80056fa:	7823      	ldrb	r3, [r4, #0]
 80056fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80056fe:	d10a      	bne.n	8005716 <_vfiprintf_r+0x156>
 8005700:	7863      	ldrb	r3, [r4, #1]
 8005702:	2b2a      	cmp	r3, #42	@ 0x2a
 8005704:	d132      	bne.n	800576c <_vfiprintf_r+0x1ac>
 8005706:	9b03      	ldr	r3, [sp, #12]
 8005708:	1d1a      	adds	r2, r3, #4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	9203      	str	r2, [sp, #12]
 800570e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005712:	3402      	adds	r4, #2
 8005714:	9305      	str	r3, [sp, #20]
 8005716:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80057ec <_vfiprintf_r+0x22c>
 800571a:	7821      	ldrb	r1, [r4, #0]
 800571c:	2203      	movs	r2, #3
 800571e:	4650      	mov	r0, sl
 8005720:	f7fa fd66 	bl	80001f0 <memchr>
 8005724:	b138      	cbz	r0, 8005736 <_vfiprintf_r+0x176>
 8005726:	9b04      	ldr	r3, [sp, #16]
 8005728:	eba0 000a 	sub.w	r0, r0, sl
 800572c:	2240      	movs	r2, #64	@ 0x40
 800572e:	4082      	lsls	r2, r0
 8005730:	4313      	orrs	r3, r2
 8005732:	3401      	adds	r4, #1
 8005734:	9304      	str	r3, [sp, #16]
 8005736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800573a:	4829      	ldr	r0, [pc, #164]	@ (80057e0 <_vfiprintf_r+0x220>)
 800573c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005740:	2206      	movs	r2, #6
 8005742:	f7fa fd55 	bl	80001f0 <memchr>
 8005746:	2800      	cmp	r0, #0
 8005748:	d03f      	beq.n	80057ca <_vfiprintf_r+0x20a>
 800574a:	4b26      	ldr	r3, [pc, #152]	@ (80057e4 <_vfiprintf_r+0x224>)
 800574c:	bb1b      	cbnz	r3, 8005796 <_vfiprintf_r+0x1d6>
 800574e:	9b03      	ldr	r3, [sp, #12]
 8005750:	3307      	adds	r3, #7
 8005752:	f023 0307 	bic.w	r3, r3, #7
 8005756:	3308      	adds	r3, #8
 8005758:	9303      	str	r3, [sp, #12]
 800575a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800575c:	443b      	add	r3, r7
 800575e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005760:	e76a      	b.n	8005638 <_vfiprintf_r+0x78>
 8005762:	fb0c 3202 	mla	r2, ip, r2, r3
 8005766:	460c      	mov	r4, r1
 8005768:	2001      	movs	r0, #1
 800576a:	e7a8      	b.n	80056be <_vfiprintf_r+0xfe>
 800576c:	2300      	movs	r3, #0
 800576e:	3401      	adds	r4, #1
 8005770:	9305      	str	r3, [sp, #20]
 8005772:	4619      	mov	r1, r3
 8005774:	f04f 0c0a 	mov.w	ip, #10
 8005778:	4620      	mov	r0, r4
 800577a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800577e:	3a30      	subs	r2, #48	@ 0x30
 8005780:	2a09      	cmp	r2, #9
 8005782:	d903      	bls.n	800578c <_vfiprintf_r+0x1cc>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0c6      	beq.n	8005716 <_vfiprintf_r+0x156>
 8005788:	9105      	str	r1, [sp, #20]
 800578a:	e7c4      	b.n	8005716 <_vfiprintf_r+0x156>
 800578c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005790:	4604      	mov	r4, r0
 8005792:	2301      	movs	r3, #1
 8005794:	e7f0      	b.n	8005778 <_vfiprintf_r+0x1b8>
 8005796:	ab03      	add	r3, sp, #12
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	462a      	mov	r2, r5
 800579c:	4b12      	ldr	r3, [pc, #72]	@ (80057e8 <_vfiprintf_r+0x228>)
 800579e:	a904      	add	r1, sp, #16
 80057a0:	4630      	mov	r0, r6
 80057a2:	f3af 8000 	nop.w
 80057a6:	4607      	mov	r7, r0
 80057a8:	1c78      	adds	r0, r7, #1
 80057aa:	d1d6      	bne.n	800575a <_vfiprintf_r+0x19a>
 80057ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057ae:	07d9      	lsls	r1, r3, #31
 80057b0:	d405      	bmi.n	80057be <_vfiprintf_r+0x1fe>
 80057b2:	89ab      	ldrh	r3, [r5, #12]
 80057b4:	059a      	lsls	r2, r3, #22
 80057b6:	d402      	bmi.n	80057be <_vfiprintf_r+0x1fe>
 80057b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057ba:	f7ff fddd 	bl	8005378 <__retarget_lock_release_recursive>
 80057be:	89ab      	ldrh	r3, [r5, #12]
 80057c0:	065b      	lsls	r3, r3, #25
 80057c2:	f53f af1f 	bmi.w	8005604 <_vfiprintf_r+0x44>
 80057c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057c8:	e71e      	b.n	8005608 <_vfiprintf_r+0x48>
 80057ca:	ab03      	add	r3, sp, #12
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	462a      	mov	r2, r5
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <_vfiprintf_r+0x228>)
 80057d2:	a904      	add	r1, sp, #16
 80057d4:	4630      	mov	r0, r6
 80057d6:	f000 f879 	bl	80058cc <_printf_i>
 80057da:	e7e4      	b.n	80057a6 <_vfiprintf_r+0x1e6>
 80057dc:	080063cc 	.word	0x080063cc
 80057e0:	080063d6 	.word	0x080063d6
 80057e4:	00000000 	.word	0x00000000
 80057e8:	0800559b 	.word	0x0800559b
 80057ec:	080063d2 	.word	0x080063d2

080057f0 <_printf_common>:
 80057f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f4:	4616      	mov	r6, r2
 80057f6:	4698      	mov	r8, r3
 80057f8:	688a      	ldr	r2, [r1, #8]
 80057fa:	690b      	ldr	r3, [r1, #16]
 80057fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005800:	4293      	cmp	r3, r2
 8005802:	bfb8      	it	lt
 8005804:	4613      	movlt	r3, r2
 8005806:	6033      	str	r3, [r6, #0]
 8005808:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800580c:	4607      	mov	r7, r0
 800580e:	460c      	mov	r4, r1
 8005810:	b10a      	cbz	r2, 8005816 <_printf_common+0x26>
 8005812:	3301      	adds	r3, #1
 8005814:	6033      	str	r3, [r6, #0]
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	0699      	lsls	r1, r3, #26
 800581a:	bf42      	ittt	mi
 800581c:	6833      	ldrmi	r3, [r6, #0]
 800581e:	3302      	addmi	r3, #2
 8005820:	6033      	strmi	r3, [r6, #0]
 8005822:	6825      	ldr	r5, [r4, #0]
 8005824:	f015 0506 	ands.w	r5, r5, #6
 8005828:	d106      	bne.n	8005838 <_printf_common+0x48>
 800582a:	f104 0a19 	add.w	sl, r4, #25
 800582e:	68e3      	ldr	r3, [r4, #12]
 8005830:	6832      	ldr	r2, [r6, #0]
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	42ab      	cmp	r3, r5
 8005836:	dc26      	bgt.n	8005886 <_printf_common+0x96>
 8005838:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	3b00      	subs	r3, #0
 8005840:	bf18      	it	ne
 8005842:	2301      	movne	r3, #1
 8005844:	0692      	lsls	r2, r2, #26
 8005846:	d42b      	bmi.n	80058a0 <_printf_common+0xb0>
 8005848:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800584c:	4641      	mov	r1, r8
 800584e:	4638      	mov	r0, r7
 8005850:	47c8      	blx	r9
 8005852:	3001      	adds	r0, #1
 8005854:	d01e      	beq.n	8005894 <_printf_common+0xa4>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	6922      	ldr	r2, [r4, #16]
 800585a:	f003 0306 	and.w	r3, r3, #6
 800585e:	2b04      	cmp	r3, #4
 8005860:	bf02      	ittt	eq
 8005862:	68e5      	ldreq	r5, [r4, #12]
 8005864:	6833      	ldreq	r3, [r6, #0]
 8005866:	1aed      	subeq	r5, r5, r3
 8005868:	68a3      	ldr	r3, [r4, #8]
 800586a:	bf0c      	ite	eq
 800586c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005870:	2500      	movne	r5, #0
 8005872:	4293      	cmp	r3, r2
 8005874:	bfc4      	itt	gt
 8005876:	1a9b      	subgt	r3, r3, r2
 8005878:	18ed      	addgt	r5, r5, r3
 800587a:	2600      	movs	r6, #0
 800587c:	341a      	adds	r4, #26
 800587e:	42b5      	cmp	r5, r6
 8005880:	d11a      	bne.n	80058b8 <_printf_common+0xc8>
 8005882:	2000      	movs	r0, #0
 8005884:	e008      	b.n	8005898 <_printf_common+0xa8>
 8005886:	2301      	movs	r3, #1
 8005888:	4652      	mov	r2, sl
 800588a:	4641      	mov	r1, r8
 800588c:	4638      	mov	r0, r7
 800588e:	47c8      	blx	r9
 8005890:	3001      	adds	r0, #1
 8005892:	d103      	bne.n	800589c <_printf_common+0xac>
 8005894:	f04f 30ff 	mov.w	r0, #4294967295
 8005898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589c:	3501      	adds	r5, #1
 800589e:	e7c6      	b.n	800582e <_printf_common+0x3e>
 80058a0:	18e1      	adds	r1, r4, r3
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	2030      	movs	r0, #48	@ 0x30
 80058a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058aa:	4422      	add	r2, r4
 80058ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058b4:	3302      	adds	r3, #2
 80058b6:	e7c7      	b.n	8005848 <_printf_common+0x58>
 80058b8:	2301      	movs	r3, #1
 80058ba:	4622      	mov	r2, r4
 80058bc:	4641      	mov	r1, r8
 80058be:	4638      	mov	r0, r7
 80058c0:	47c8      	blx	r9
 80058c2:	3001      	adds	r0, #1
 80058c4:	d0e6      	beq.n	8005894 <_printf_common+0xa4>
 80058c6:	3601      	adds	r6, #1
 80058c8:	e7d9      	b.n	800587e <_printf_common+0x8e>
	...

080058cc <_printf_i>:
 80058cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	7e0f      	ldrb	r7, [r1, #24]
 80058d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058d4:	2f78      	cmp	r7, #120	@ 0x78
 80058d6:	4691      	mov	r9, r2
 80058d8:	4680      	mov	r8, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	469a      	mov	sl, r3
 80058de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058e2:	d807      	bhi.n	80058f4 <_printf_i+0x28>
 80058e4:	2f62      	cmp	r7, #98	@ 0x62
 80058e6:	d80a      	bhi.n	80058fe <_printf_i+0x32>
 80058e8:	2f00      	cmp	r7, #0
 80058ea:	f000 80d2 	beq.w	8005a92 <_printf_i+0x1c6>
 80058ee:	2f58      	cmp	r7, #88	@ 0x58
 80058f0:	f000 80b9 	beq.w	8005a66 <_printf_i+0x19a>
 80058f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058fc:	e03a      	b.n	8005974 <_printf_i+0xa8>
 80058fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005902:	2b15      	cmp	r3, #21
 8005904:	d8f6      	bhi.n	80058f4 <_printf_i+0x28>
 8005906:	a101      	add	r1, pc, #4	@ (adr r1, 800590c <_printf_i+0x40>)
 8005908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800590c:	08005965 	.word	0x08005965
 8005910:	08005979 	.word	0x08005979
 8005914:	080058f5 	.word	0x080058f5
 8005918:	080058f5 	.word	0x080058f5
 800591c:	080058f5 	.word	0x080058f5
 8005920:	080058f5 	.word	0x080058f5
 8005924:	08005979 	.word	0x08005979
 8005928:	080058f5 	.word	0x080058f5
 800592c:	080058f5 	.word	0x080058f5
 8005930:	080058f5 	.word	0x080058f5
 8005934:	080058f5 	.word	0x080058f5
 8005938:	08005a79 	.word	0x08005a79
 800593c:	080059a3 	.word	0x080059a3
 8005940:	08005a33 	.word	0x08005a33
 8005944:	080058f5 	.word	0x080058f5
 8005948:	080058f5 	.word	0x080058f5
 800594c:	08005a9b 	.word	0x08005a9b
 8005950:	080058f5 	.word	0x080058f5
 8005954:	080059a3 	.word	0x080059a3
 8005958:	080058f5 	.word	0x080058f5
 800595c:	080058f5 	.word	0x080058f5
 8005960:	08005a3b 	.word	0x08005a3b
 8005964:	6833      	ldr	r3, [r6, #0]
 8005966:	1d1a      	adds	r2, r3, #4
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6032      	str	r2, [r6, #0]
 800596c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005970:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005974:	2301      	movs	r3, #1
 8005976:	e09d      	b.n	8005ab4 <_printf_i+0x1e8>
 8005978:	6833      	ldr	r3, [r6, #0]
 800597a:	6820      	ldr	r0, [r4, #0]
 800597c:	1d19      	adds	r1, r3, #4
 800597e:	6031      	str	r1, [r6, #0]
 8005980:	0606      	lsls	r6, r0, #24
 8005982:	d501      	bpl.n	8005988 <_printf_i+0xbc>
 8005984:	681d      	ldr	r5, [r3, #0]
 8005986:	e003      	b.n	8005990 <_printf_i+0xc4>
 8005988:	0645      	lsls	r5, r0, #25
 800598a:	d5fb      	bpl.n	8005984 <_printf_i+0xb8>
 800598c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005990:	2d00      	cmp	r5, #0
 8005992:	da03      	bge.n	800599c <_printf_i+0xd0>
 8005994:	232d      	movs	r3, #45	@ 0x2d
 8005996:	426d      	negs	r5, r5
 8005998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800599c:	4859      	ldr	r0, [pc, #356]	@ (8005b04 <_printf_i+0x238>)
 800599e:	230a      	movs	r3, #10
 80059a0:	e011      	b.n	80059c6 <_printf_i+0xfa>
 80059a2:	6821      	ldr	r1, [r4, #0]
 80059a4:	6833      	ldr	r3, [r6, #0]
 80059a6:	0608      	lsls	r0, r1, #24
 80059a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80059ac:	d402      	bmi.n	80059b4 <_printf_i+0xe8>
 80059ae:	0649      	lsls	r1, r1, #25
 80059b0:	bf48      	it	mi
 80059b2:	b2ad      	uxthmi	r5, r5
 80059b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80059b6:	4853      	ldr	r0, [pc, #332]	@ (8005b04 <_printf_i+0x238>)
 80059b8:	6033      	str	r3, [r6, #0]
 80059ba:	bf14      	ite	ne
 80059bc:	230a      	movne	r3, #10
 80059be:	2308      	moveq	r3, #8
 80059c0:	2100      	movs	r1, #0
 80059c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059c6:	6866      	ldr	r6, [r4, #4]
 80059c8:	60a6      	str	r6, [r4, #8]
 80059ca:	2e00      	cmp	r6, #0
 80059cc:	bfa2      	ittt	ge
 80059ce:	6821      	ldrge	r1, [r4, #0]
 80059d0:	f021 0104 	bicge.w	r1, r1, #4
 80059d4:	6021      	strge	r1, [r4, #0]
 80059d6:	b90d      	cbnz	r5, 80059dc <_printf_i+0x110>
 80059d8:	2e00      	cmp	r6, #0
 80059da:	d04b      	beq.n	8005a74 <_printf_i+0x1a8>
 80059dc:	4616      	mov	r6, r2
 80059de:	fbb5 f1f3 	udiv	r1, r5, r3
 80059e2:	fb03 5711 	mls	r7, r3, r1, r5
 80059e6:	5dc7      	ldrb	r7, [r0, r7]
 80059e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059ec:	462f      	mov	r7, r5
 80059ee:	42bb      	cmp	r3, r7
 80059f0:	460d      	mov	r5, r1
 80059f2:	d9f4      	bls.n	80059de <_printf_i+0x112>
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d10b      	bne.n	8005a10 <_printf_i+0x144>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	07df      	lsls	r7, r3, #31
 80059fc:	d508      	bpl.n	8005a10 <_printf_i+0x144>
 80059fe:	6923      	ldr	r3, [r4, #16]
 8005a00:	6861      	ldr	r1, [r4, #4]
 8005a02:	4299      	cmp	r1, r3
 8005a04:	bfde      	ittt	le
 8005a06:	2330      	movle	r3, #48	@ 0x30
 8005a08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a10:	1b92      	subs	r2, r2, r6
 8005a12:	6122      	str	r2, [r4, #16]
 8005a14:	f8cd a000 	str.w	sl, [sp]
 8005a18:	464b      	mov	r3, r9
 8005a1a:	aa03      	add	r2, sp, #12
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4640      	mov	r0, r8
 8005a20:	f7ff fee6 	bl	80057f0 <_printf_common>
 8005a24:	3001      	adds	r0, #1
 8005a26:	d14a      	bne.n	8005abe <_printf_i+0x1f2>
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2c:	b004      	add	sp, #16
 8005a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	f043 0320 	orr.w	r3, r3, #32
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	4833      	ldr	r0, [pc, #204]	@ (8005b08 <_printf_i+0x23c>)
 8005a3c:	2778      	movs	r7, #120	@ 0x78
 8005a3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	6831      	ldr	r1, [r6, #0]
 8005a46:	061f      	lsls	r7, r3, #24
 8005a48:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a4c:	d402      	bmi.n	8005a54 <_printf_i+0x188>
 8005a4e:	065f      	lsls	r7, r3, #25
 8005a50:	bf48      	it	mi
 8005a52:	b2ad      	uxthmi	r5, r5
 8005a54:	6031      	str	r1, [r6, #0]
 8005a56:	07d9      	lsls	r1, r3, #31
 8005a58:	bf44      	itt	mi
 8005a5a:	f043 0320 	orrmi.w	r3, r3, #32
 8005a5e:	6023      	strmi	r3, [r4, #0]
 8005a60:	b11d      	cbz	r5, 8005a6a <_printf_i+0x19e>
 8005a62:	2310      	movs	r3, #16
 8005a64:	e7ac      	b.n	80059c0 <_printf_i+0xf4>
 8005a66:	4827      	ldr	r0, [pc, #156]	@ (8005b04 <_printf_i+0x238>)
 8005a68:	e7e9      	b.n	8005a3e <_printf_i+0x172>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	f023 0320 	bic.w	r3, r3, #32
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	e7f6      	b.n	8005a62 <_printf_i+0x196>
 8005a74:	4616      	mov	r6, r2
 8005a76:	e7bd      	b.n	80059f4 <_printf_i+0x128>
 8005a78:	6833      	ldr	r3, [r6, #0]
 8005a7a:	6825      	ldr	r5, [r4, #0]
 8005a7c:	6961      	ldr	r1, [r4, #20]
 8005a7e:	1d18      	adds	r0, r3, #4
 8005a80:	6030      	str	r0, [r6, #0]
 8005a82:	062e      	lsls	r6, r5, #24
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	d501      	bpl.n	8005a8c <_printf_i+0x1c0>
 8005a88:	6019      	str	r1, [r3, #0]
 8005a8a:	e002      	b.n	8005a92 <_printf_i+0x1c6>
 8005a8c:	0668      	lsls	r0, r5, #25
 8005a8e:	d5fb      	bpl.n	8005a88 <_printf_i+0x1bc>
 8005a90:	8019      	strh	r1, [r3, #0]
 8005a92:	2300      	movs	r3, #0
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	4616      	mov	r6, r2
 8005a98:	e7bc      	b.n	8005a14 <_printf_i+0x148>
 8005a9a:	6833      	ldr	r3, [r6, #0]
 8005a9c:	1d1a      	adds	r2, r3, #4
 8005a9e:	6032      	str	r2, [r6, #0]
 8005aa0:	681e      	ldr	r6, [r3, #0]
 8005aa2:	6862      	ldr	r2, [r4, #4]
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	f7fa fba2 	bl	80001f0 <memchr>
 8005aac:	b108      	cbz	r0, 8005ab2 <_printf_i+0x1e6>
 8005aae:	1b80      	subs	r0, r0, r6
 8005ab0:	6060      	str	r0, [r4, #4]
 8005ab2:	6863      	ldr	r3, [r4, #4]
 8005ab4:	6123      	str	r3, [r4, #16]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005abc:	e7aa      	b.n	8005a14 <_printf_i+0x148>
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	47d0      	blx	sl
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d0ad      	beq.n	8005a28 <_printf_i+0x15c>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	079b      	lsls	r3, r3, #30
 8005ad0:	d413      	bmi.n	8005afa <_printf_i+0x22e>
 8005ad2:	68e0      	ldr	r0, [r4, #12]
 8005ad4:	9b03      	ldr	r3, [sp, #12]
 8005ad6:	4298      	cmp	r0, r3
 8005ad8:	bfb8      	it	lt
 8005ada:	4618      	movlt	r0, r3
 8005adc:	e7a6      	b.n	8005a2c <_printf_i+0x160>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	47d0      	blx	sl
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d09d      	beq.n	8005a28 <_printf_i+0x15c>
 8005aec:	3501      	adds	r5, #1
 8005aee:	68e3      	ldr	r3, [r4, #12]
 8005af0:	9903      	ldr	r1, [sp, #12]
 8005af2:	1a5b      	subs	r3, r3, r1
 8005af4:	42ab      	cmp	r3, r5
 8005af6:	dcf2      	bgt.n	8005ade <_printf_i+0x212>
 8005af8:	e7eb      	b.n	8005ad2 <_printf_i+0x206>
 8005afa:	2500      	movs	r5, #0
 8005afc:	f104 0619 	add.w	r6, r4, #25
 8005b00:	e7f5      	b.n	8005aee <_printf_i+0x222>
 8005b02:	bf00      	nop
 8005b04:	080063dd 	.word	0x080063dd
 8005b08:	080063ee 	.word	0x080063ee

08005b0c <__swbuf_r>:
 8005b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0e:	460e      	mov	r6, r1
 8005b10:	4614      	mov	r4, r2
 8005b12:	4605      	mov	r5, r0
 8005b14:	b118      	cbz	r0, 8005b1e <__swbuf_r+0x12>
 8005b16:	6a03      	ldr	r3, [r0, #32]
 8005b18:	b90b      	cbnz	r3, 8005b1e <__swbuf_r+0x12>
 8005b1a:	f7ff fad1 	bl	80050c0 <__sinit>
 8005b1e:	69a3      	ldr	r3, [r4, #24]
 8005b20:	60a3      	str	r3, [r4, #8]
 8005b22:	89a3      	ldrh	r3, [r4, #12]
 8005b24:	071a      	lsls	r2, r3, #28
 8005b26:	d501      	bpl.n	8005b2c <__swbuf_r+0x20>
 8005b28:	6923      	ldr	r3, [r4, #16]
 8005b2a:	b943      	cbnz	r3, 8005b3e <__swbuf_r+0x32>
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f000 f82a 	bl	8005b88 <__swsetup_r>
 8005b34:	b118      	cbz	r0, 8005b3e <__swbuf_r+0x32>
 8005b36:	f04f 37ff 	mov.w	r7, #4294967295
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	6922      	ldr	r2, [r4, #16]
 8005b42:	1a98      	subs	r0, r3, r2
 8005b44:	6963      	ldr	r3, [r4, #20]
 8005b46:	b2f6      	uxtb	r6, r6
 8005b48:	4283      	cmp	r3, r0
 8005b4a:	4637      	mov	r7, r6
 8005b4c:	dc05      	bgt.n	8005b5a <__swbuf_r+0x4e>
 8005b4e:	4621      	mov	r1, r4
 8005b50:	4628      	mov	r0, r5
 8005b52:	f7ff f9ed 	bl	8004f30 <_fflush_r>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d1ed      	bne.n	8005b36 <__swbuf_r+0x2a>
 8005b5a:	68a3      	ldr	r3, [r4, #8]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	60a3      	str	r3, [r4, #8]
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	6022      	str	r2, [r4, #0]
 8005b66:	701e      	strb	r6, [r3, #0]
 8005b68:	6962      	ldr	r2, [r4, #20]
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d004      	beq.n	8005b7a <__swbuf_r+0x6e>
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	07db      	lsls	r3, r3, #31
 8005b74:	d5e1      	bpl.n	8005b3a <__swbuf_r+0x2e>
 8005b76:	2e0a      	cmp	r6, #10
 8005b78:	d1df      	bne.n	8005b3a <__swbuf_r+0x2e>
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f7ff f9d7 	bl	8004f30 <_fflush_r>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d0d9      	beq.n	8005b3a <__swbuf_r+0x2e>
 8005b86:	e7d6      	b.n	8005b36 <__swbuf_r+0x2a>

08005b88 <__swsetup_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	4b29      	ldr	r3, [pc, #164]	@ (8005c30 <__swsetup_r+0xa8>)
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	460c      	mov	r4, r1
 8005b92:	b118      	cbz	r0, 8005b9c <__swsetup_r+0x14>
 8005b94:	6a03      	ldr	r3, [r0, #32]
 8005b96:	b90b      	cbnz	r3, 8005b9c <__swsetup_r+0x14>
 8005b98:	f7ff fa92 	bl	80050c0 <__sinit>
 8005b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba0:	0719      	lsls	r1, r3, #28
 8005ba2:	d422      	bmi.n	8005bea <__swsetup_r+0x62>
 8005ba4:	06da      	lsls	r2, r3, #27
 8005ba6:	d407      	bmi.n	8005bb8 <__swsetup_r+0x30>
 8005ba8:	2209      	movs	r2, #9
 8005baa:	602a      	str	r2, [r5, #0]
 8005bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bb0:	81a3      	strh	r3, [r4, #12]
 8005bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb6:	e033      	b.n	8005c20 <__swsetup_r+0x98>
 8005bb8:	0758      	lsls	r0, r3, #29
 8005bba:	d512      	bpl.n	8005be2 <__swsetup_r+0x5a>
 8005bbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bbe:	b141      	cbz	r1, 8005bd2 <__swsetup_r+0x4a>
 8005bc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bc4:	4299      	cmp	r1, r3
 8005bc6:	d002      	beq.n	8005bce <__swsetup_r+0x46>
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f7ff fbd7 	bl	800537c <_free_r>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bd8:	81a3      	strh	r3, [r4, #12]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6063      	str	r3, [r4, #4]
 8005bde:	6923      	ldr	r3, [r4, #16]
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	f043 0308 	orr.w	r3, r3, #8
 8005be8:	81a3      	strh	r3, [r4, #12]
 8005bea:	6923      	ldr	r3, [r4, #16]
 8005bec:	b94b      	cbnz	r3, 8005c02 <__swsetup_r+0x7a>
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bf8:	d003      	beq.n	8005c02 <__swsetup_r+0x7a>
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f000 f84f 	bl	8005ca0 <__smakebuf_r>
 8005c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c06:	f013 0201 	ands.w	r2, r3, #1
 8005c0a:	d00a      	beq.n	8005c22 <__swsetup_r+0x9a>
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	60a2      	str	r2, [r4, #8]
 8005c10:	6962      	ldr	r2, [r4, #20]
 8005c12:	4252      	negs	r2, r2
 8005c14:	61a2      	str	r2, [r4, #24]
 8005c16:	6922      	ldr	r2, [r4, #16]
 8005c18:	b942      	cbnz	r2, 8005c2c <__swsetup_r+0xa4>
 8005c1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c1e:	d1c5      	bne.n	8005bac <__swsetup_r+0x24>
 8005c20:	bd38      	pop	{r3, r4, r5, pc}
 8005c22:	0799      	lsls	r1, r3, #30
 8005c24:	bf58      	it	pl
 8005c26:	6962      	ldrpl	r2, [r4, #20]
 8005c28:	60a2      	str	r2, [r4, #8]
 8005c2a:	e7f4      	b.n	8005c16 <__swsetup_r+0x8e>
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	e7f7      	b.n	8005c20 <__swsetup_r+0x98>
 8005c30:	2000001c 	.word	0x2000001c

08005c34 <_sbrk_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d06      	ldr	r5, [pc, #24]	@ (8005c50 <_sbrk_r+0x1c>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	602b      	str	r3, [r5, #0]
 8005c40:	f7fb f97e 	bl	8000f40 <_sbrk>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_sbrk_r+0x1a>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_sbrk_r+0x1a>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	200046d4 	.word	0x200046d4

08005c54 <__swhatbuf_r>:
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	460c      	mov	r4, r1
 8005c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5c:	2900      	cmp	r1, #0
 8005c5e:	b096      	sub	sp, #88	@ 0x58
 8005c60:	4615      	mov	r5, r2
 8005c62:	461e      	mov	r6, r3
 8005c64:	da0d      	bge.n	8005c82 <__swhatbuf_r+0x2e>
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c6c:	f04f 0100 	mov.w	r1, #0
 8005c70:	bf14      	ite	ne
 8005c72:	2340      	movne	r3, #64	@ 0x40
 8005c74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005c78:	2000      	movs	r0, #0
 8005c7a:	6031      	str	r1, [r6, #0]
 8005c7c:	602b      	str	r3, [r5, #0]
 8005c7e:	b016      	add	sp, #88	@ 0x58
 8005c80:	bd70      	pop	{r4, r5, r6, pc}
 8005c82:	466a      	mov	r2, sp
 8005c84:	f000 f848 	bl	8005d18 <_fstat_r>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	dbec      	blt.n	8005c66 <__swhatbuf_r+0x12>
 8005c8c:	9901      	ldr	r1, [sp, #4]
 8005c8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c96:	4259      	negs	r1, r3
 8005c98:	4159      	adcs	r1, r3
 8005c9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c9e:	e7eb      	b.n	8005c78 <__swhatbuf_r+0x24>

08005ca0 <__smakebuf_r>:
 8005ca0:	898b      	ldrh	r3, [r1, #12]
 8005ca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ca4:	079d      	lsls	r5, r3, #30
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	460c      	mov	r4, r1
 8005caa:	d507      	bpl.n	8005cbc <__smakebuf_r+0x1c>
 8005cac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	6123      	str	r3, [r4, #16]
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	6163      	str	r3, [r4, #20]
 8005cb8:	b003      	add	sp, #12
 8005cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cbc:	ab01      	add	r3, sp, #4
 8005cbe:	466a      	mov	r2, sp
 8005cc0:	f7ff ffc8 	bl	8005c54 <__swhatbuf_r>
 8005cc4:	9f00      	ldr	r7, [sp, #0]
 8005cc6:	4605      	mov	r5, r0
 8005cc8:	4639      	mov	r1, r7
 8005cca:	4630      	mov	r0, r6
 8005ccc:	f7ff fbc2 	bl	8005454 <_malloc_r>
 8005cd0:	b948      	cbnz	r0, 8005ce6 <__smakebuf_r+0x46>
 8005cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cd6:	059a      	lsls	r2, r3, #22
 8005cd8:	d4ee      	bmi.n	8005cb8 <__smakebuf_r+0x18>
 8005cda:	f023 0303 	bic.w	r3, r3, #3
 8005cde:	f043 0302 	orr.w	r3, r3, #2
 8005ce2:	81a3      	strh	r3, [r4, #12]
 8005ce4:	e7e2      	b.n	8005cac <__smakebuf_r+0xc>
 8005ce6:	89a3      	ldrh	r3, [r4, #12]
 8005ce8:	6020      	str	r0, [r4, #0]
 8005cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cee:	81a3      	strh	r3, [r4, #12]
 8005cf0:	9b01      	ldr	r3, [sp, #4]
 8005cf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005cf6:	b15b      	cbz	r3, 8005d10 <__smakebuf_r+0x70>
 8005cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	f000 f81d 	bl	8005d3c <_isatty_r>
 8005d02:	b128      	cbz	r0, 8005d10 <__smakebuf_r+0x70>
 8005d04:	89a3      	ldrh	r3, [r4, #12]
 8005d06:	f023 0303 	bic.w	r3, r3, #3
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	81a3      	strh	r3, [r4, #12]
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	431d      	orrs	r5, r3
 8005d14:	81a5      	strh	r5, [r4, #12]
 8005d16:	e7cf      	b.n	8005cb8 <__smakebuf_r+0x18>

08005d18 <_fstat_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4d07      	ldr	r5, [pc, #28]	@ (8005d38 <_fstat_r+0x20>)
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4608      	mov	r0, r1
 8005d22:	4611      	mov	r1, r2
 8005d24:	602b      	str	r3, [r5, #0]
 8005d26:	f000 f92e 	bl	8005f86 <_fstat>
 8005d2a:	1c43      	adds	r3, r0, #1
 8005d2c:	d102      	bne.n	8005d34 <_fstat_r+0x1c>
 8005d2e:	682b      	ldr	r3, [r5, #0]
 8005d30:	b103      	cbz	r3, 8005d34 <_fstat_r+0x1c>
 8005d32:	6023      	str	r3, [r4, #0]
 8005d34:	bd38      	pop	{r3, r4, r5, pc}
 8005d36:	bf00      	nop
 8005d38:	200046d4 	.word	0x200046d4

08005d3c <_isatty_r>:
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	4d06      	ldr	r5, [pc, #24]	@ (8005d58 <_isatty_r+0x1c>)
 8005d40:	2300      	movs	r3, #0
 8005d42:	4604      	mov	r4, r0
 8005d44:	4608      	mov	r0, r1
 8005d46:	602b      	str	r3, [r5, #0]
 8005d48:	f000 fa80 	bl	800624c <_isatty>
 8005d4c:	1c43      	adds	r3, r0, #1
 8005d4e:	d102      	bne.n	8005d56 <_isatty_r+0x1a>
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	b103      	cbz	r3, 8005d56 <_isatty_r+0x1a>
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	bd38      	pop	{r3, r4, r5, pc}
 8005d58:	200046d4 	.word	0x200046d4

08005d5c <findslot>:
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d88 <findslot+0x2c>)
 8005d5e:	b510      	push	{r4, lr}
 8005d60:	4604      	mov	r4, r0
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	b118      	cbz	r0, 8005d6e <findslot+0x12>
 8005d66:	6a03      	ldr	r3, [r0, #32]
 8005d68:	b90b      	cbnz	r3, 8005d6e <findslot+0x12>
 8005d6a:	f7ff f9a9 	bl	80050c0 <__sinit>
 8005d6e:	2c13      	cmp	r4, #19
 8005d70:	d807      	bhi.n	8005d82 <findslot+0x26>
 8005d72:	4806      	ldr	r0, [pc, #24]	@ (8005d8c <findslot+0x30>)
 8005d74:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005d78:	3201      	adds	r2, #1
 8005d7a:	d002      	beq.n	8005d82 <findslot+0x26>
 8005d7c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005d80:	bd10      	pop	{r4, pc}
 8005d82:	2000      	movs	r0, #0
 8005d84:	e7fc      	b.n	8005d80 <findslot+0x24>
 8005d86:	bf00      	nop
 8005d88:	2000001c 	.word	0x2000001c
 8005d8c:	200046f0 	.word	0x200046f0

08005d90 <error>:
 8005d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d92:	4604      	mov	r4, r0
 8005d94:	f7ff fac4 	bl	8005320 <__errno>
 8005d98:	2613      	movs	r6, #19
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	2700      	movs	r7, #0
 8005d9e:	4630      	mov	r0, r6
 8005da0:	4639      	mov	r1, r7
 8005da2:	beab      	bkpt	0x00ab
 8005da4:	4606      	mov	r6, r0
 8005da6:	602e      	str	r6, [r5, #0]
 8005da8:	4620      	mov	r0, r4
 8005daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005dac <checkerror>:
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d101      	bne.n	8005db4 <checkerror+0x8>
 8005db0:	f7ff bfee 	b.w	8005d90 <error>
 8005db4:	4770      	bx	lr

08005db6 <_swiread>:
 8005db6:	b530      	push	{r4, r5, lr}
 8005db8:	b085      	sub	sp, #20
 8005dba:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005dbe:	9203      	str	r2, [sp, #12]
 8005dc0:	2406      	movs	r4, #6
 8005dc2:	ad01      	add	r5, sp, #4
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	beab      	bkpt	0x00ab
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f7ff ffed 	bl	8005dac <checkerror>
 8005dd2:	b005      	add	sp, #20
 8005dd4:	bd30      	pop	{r4, r5, pc}

08005dd6 <_read>:
 8005dd6:	b570      	push	{r4, r5, r6, lr}
 8005dd8:	460e      	mov	r6, r1
 8005dda:	4614      	mov	r4, r2
 8005ddc:	f7ff ffbe 	bl	8005d5c <findslot>
 8005de0:	4605      	mov	r5, r0
 8005de2:	b930      	cbnz	r0, 8005df2 <_read+0x1c>
 8005de4:	f7ff fa9c 	bl	8005320 <__errno>
 8005de8:	2309      	movs	r3, #9
 8005dea:	6003      	str	r3, [r0, #0]
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295
 8005df0:	bd70      	pop	{r4, r5, r6, pc}
 8005df2:	6800      	ldr	r0, [r0, #0]
 8005df4:	4622      	mov	r2, r4
 8005df6:	4631      	mov	r1, r6
 8005df8:	f7ff ffdd 	bl	8005db6 <_swiread>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d0f5      	beq.n	8005dec <_read+0x16>
 8005e00:	686b      	ldr	r3, [r5, #4]
 8005e02:	1a20      	subs	r0, r4, r0
 8005e04:	4403      	add	r3, r0
 8005e06:	606b      	str	r3, [r5, #4]
 8005e08:	e7f2      	b.n	8005df0 <_read+0x1a>

08005e0a <_swilseek>:
 8005e0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	4616      	mov	r6, r2
 8005e10:	f7ff ffa4 	bl	8005d5c <findslot>
 8005e14:	4605      	mov	r5, r0
 8005e16:	b940      	cbnz	r0, 8005e2a <_swilseek+0x20>
 8005e18:	f7ff fa82 	bl	8005320 <__errno>
 8005e1c:	2309      	movs	r3, #9
 8005e1e:	6003      	str	r3, [r0, #0]
 8005e20:	f04f 34ff 	mov.w	r4, #4294967295
 8005e24:	4620      	mov	r0, r4
 8005e26:	b003      	add	sp, #12
 8005e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e2a:	2e02      	cmp	r6, #2
 8005e2c:	d903      	bls.n	8005e36 <_swilseek+0x2c>
 8005e2e:	f7ff fa77 	bl	8005320 <__errno>
 8005e32:	2316      	movs	r3, #22
 8005e34:	e7f3      	b.n	8005e1e <_swilseek+0x14>
 8005e36:	2e01      	cmp	r6, #1
 8005e38:	d112      	bne.n	8005e60 <_swilseek+0x56>
 8005e3a:	6843      	ldr	r3, [r0, #4]
 8005e3c:	18e4      	adds	r4, r4, r3
 8005e3e:	d4f6      	bmi.n	8005e2e <_swilseek+0x24>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	260a      	movs	r6, #10
 8005e44:	e9cd 3400 	strd	r3, r4, [sp]
 8005e48:	466f      	mov	r7, sp
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	beab      	bkpt	0x00ab
 8005e50:	4606      	mov	r6, r0
 8005e52:	4630      	mov	r0, r6
 8005e54:	f7ff ffaa 	bl	8005dac <checkerror>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	dbe1      	blt.n	8005e20 <_swilseek+0x16>
 8005e5c:	606c      	str	r4, [r5, #4]
 8005e5e:	e7e1      	b.n	8005e24 <_swilseek+0x1a>
 8005e60:	2e02      	cmp	r6, #2
 8005e62:	6803      	ldr	r3, [r0, #0]
 8005e64:	d1ec      	bne.n	8005e40 <_swilseek+0x36>
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	260c      	movs	r6, #12
 8005e6a:	466f      	mov	r7, sp
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	4639      	mov	r1, r7
 8005e70:	beab      	bkpt	0x00ab
 8005e72:	4606      	mov	r6, r0
 8005e74:	4630      	mov	r0, r6
 8005e76:	f7ff ff99 	bl	8005dac <checkerror>
 8005e7a:	1c43      	adds	r3, r0, #1
 8005e7c:	d0d0      	beq.n	8005e20 <_swilseek+0x16>
 8005e7e:	4404      	add	r4, r0
 8005e80:	e7de      	b.n	8005e40 <_swilseek+0x36>

08005e82 <_lseek>:
 8005e82:	f7ff bfc2 	b.w	8005e0a <_swilseek>

08005e86 <_swiwrite>:
 8005e86:	b530      	push	{r4, r5, lr}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005e8e:	9203      	str	r2, [sp, #12]
 8005e90:	2405      	movs	r4, #5
 8005e92:	ad01      	add	r5, sp, #4
 8005e94:	4620      	mov	r0, r4
 8005e96:	4629      	mov	r1, r5
 8005e98:	beab      	bkpt	0x00ab
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f7ff ff85 	bl	8005dac <checkerror>
 8005ea2:	b005      	add	sp, #20
 8005ea4:	bd30      	pop	{r4, r5, pc}

08005ea6 <_write>:
 8005ea6:	b570      	push	{r4, r5, r6, lr}
 8005ea8:	460e      	mov	r6, r1
 8005eaa:	4615      	mov	r5, r2
 8005eac:	f7ff ff56 	bl	8005d5c <findslot>
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	b930      	cbnz	r0, 8005ec2 <_write+0x1c>
 8005eb4:	f7ff fa34 	bl	8005320 <__errno>
 8005eb8:	2309      	movs	r3, #9
 8005eba:	6003      	str	r3, [r0, #0]
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	bd70      	pop	{r4, r5, r6, pc}
 8005ec2:	6800      	ldr	r0, [r0, #0]
 8005ec4:	462a      	mov	r2, r5
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	f7ff ffdd 	bl	8005e86 <_swiwrite>
 8005ecc:	1e03      	subs	r3, r0, #0
 8005ece:	dbf5      	blt.n	8005ebc <_write+0x16>
 8005ed0:	6862      	ldr	r2, [r4, #4]
 8005ed2:	1ae8      	subs	r0, r5, r3
 8005ed4:	4402      	add	r2, r0
 8005ed6:	42ab      	cmp	r3, r5
 8005ed8:	6062      	str	r2, [r4, #4]
 8005eda:	d1f1      	bne.n	8005ec0 <_write+0x1a>
 8005edc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	f7ff bf55 	b.w	8005d90 <error>

08005ee6 <_swiclose>:
 8005ee6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ee8:	2402      	movs	r4, #2
 8005eea:	9001      	str	r0, [sp, #4]
 8005eec:	ad01      	add	r5, sp, #4
 8005eee:	4620      	mov	r0, r4
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	beab      	bkpt	0x00ab
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f7ff ff58 	bl	8005dac <checkerror>
 8005efc:	b003      	add	sp, #12
 8005efe:	bd30      	pop	{r4, r5, pc}

08005f00 <_close>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	4605      	mov	r5, r0
 8005f04:	f7ff ff2a 	bl	8005d5c <findslot>
 8005f08:	4604      	mov	r4, r0
 8005f0a:	b930      	cbnz	r0, 8005f1a <_close+0x1a>
 8005f0c:	f7ff fa08 	bl	8005320 <__errno>
 8005f10:	2309      	movs	r3, #9
 8005f12:	6003      	str	r3, [r0, #0]
 8005f14:	f04f 30ff 	mov.w	r0, #4294967295
 8005f18:	bd38      	pop	{r3, r4, r5, pc}
 8005f1a:	3d01      	subs	r5, #1
 8005f1c:	2d01      	cmp	r5, #1
 8005f1e:	d809      	bhi.n	8005f34 <_close+0x34>
 8005f20:	4b07      	ldr	r3, [pc, #28]	@ (8005f40 <_close+0x40>)
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d104      	bne.n	8005f34 <_close+0x34>
 8005f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2e:	6023      	str	r3, [r4, #0]
 8005f30:	2000      	movs	r0, #0
 8005f32:	e7f1      	b.n	8005f18 <_close+0x18>
 8005f34:	6820      	ldr	r0, [r4, #0]
 8005f36:	f7ff ffd6 	bl	8005ee6 <_swiclose>
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d0f5      	beq.n	8005f2a <_close+0x2a>
 8005f3e:	e7eb      	b.n	8005f18 <_close+0x18>
 8005f40:	200046f0 	.word	0x200046f0

08005f44 <_swistat>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	460c      	mov	r4, r1
 8005f48:	f7ff ff08 	bl	8005d5c <findslot>
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	b930      	cbnz	r0, 8005f5e <_swistat+0x1a>
 8005f50:	f7ff f9e6 	bl	8005320 <__errno>
 8005f54:	2309      	movs	r3, #9
 8005f56:	6003      	str	r3, [r0, #0]
 8005f58:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5c:	bd70      	pop	{r4, r5, r6, pc}
 8005f5e:	6863      	ldr	r3, [r4, #4]
 8005f60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005f64:	6063      	str	r3, [r4, #4]
 8005f66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f6a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005f6c:	260c      	movs	r6, #12
 8005f6e:	4630      	mov	r0, r6
 8005f70:	4629      	mov	r1, r5
 8005f72:	beab      	bkpt	0x00ab
 8005f74:	4605      	mov	r5, r0
 8005f76:	4628      	mov	r0, r5
 8005f78:	f7ff ff18 	bl	8005dac <checkerror>
 8005f7c:	1c43      	adds	r3, r0, #1
 8005f7e:	d0eb      	beq.n	8005f58 <_swistat+0x14>
 8005f80:	6120      	str	r0, [r4, #16]
 8005f82:	2000      	movs	r0, #0
 8005f84:	e7ea      	b.n	8005f5c <_swistat+0x18>

08005f86 <_fstat>:
 8005f86:	460b      	mov	r3, r1
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	2258      	movs	r2, #88	@ 0x58
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff f920 	bl	80051d6 <memset>
 8005f96:	4601      	mov	r1, r0
 8005f98:	4620      	mov	r0, r4
 8005f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f9e:	f7ff bfd1 	b.w	8005f44 <_swistat>

08005fa2 <_stat>:
 8005fa2:	b538      	push	{r3, r4, r5, lr}
 8005fa4:	460d      	mov	r5, r1
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	2258      	movs	r2, #88	@ 0x58
 8005faa:	2100      	movs	r1, #0
 8005fac:	4628      	mov	r0, r5
 8005fae:	f7ff f912 	bl	80051d6 <memset>
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	f000 f811 	bl	8005fdc <_swiopen>
 8005fba:	1c43      	adds	r3, r0, #1
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	d00b      	beq.n	8005fd8 <_stat+0x36>
 8005fc0:	686b      	ldr	r3, [r5, #4]
 8005fc2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005fc6:	606b      	str	r3, [r5, #4]
 8005fc8:	4629      	mov	r1, r5
 8005fca:	f7ff ffbb 	bl	8005f44 <_swistat>
 8005fce:	4605      	mov	r5, r0
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7ff ff95 	bl	8005f00 <_close>
 8005fd6:	462c      	mov	r4, r5
 8005fd8:	4620      	mov	r0, r4
 8005fda:	bd38      	pop	{r3, r4, r5, pc}

08005fdc <_swiopen>:
 8005fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe0:	4f29      	ldr	r7, [pc, #164]	@ (8006088 <_swiopen+0xac>)
 8005fe2:	b096      	sub	sp, #88	@ 0x58
 8005fe4:	4682      	mov	sl, r0
 8005fe6:	460e      	mov	r6, r1
 8005fe8:	2400      	movs	r4, #0
 8005fea:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8005ff4:	d00c      	beq.n	8006010 <_swiopen+0x34>
 8005ff6:	3401      	adds	r4, #1
 8005ff8:	2c14      	cmp	r4, #20
 8005ffa:	d1f6      	bne.n	8005fea <_swiopen+0xe>
 8005ffc:	f7ff f990 	bl	8005320 <__errno>
 8006000:	2318      	movs	r3, #24
 8006002:	6003      	str	r3, [r0, #0]
 8006004:	f04f 34ff 	mov.w	r4, #4294967295
 8006008:	4620      	mov	r0, r4
 800600a:	b016      	add	sp, #88	@ 0x58
 800600c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006010:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8006014:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006018:	46e9      	mov	r9, sp
 800601a:	d109      	bne.n	8006030 <_swiopen+0x54>
 800601c:	4649      	mov	r1, r9
 800601e:	4650      	mov	r0, sl
 8006020:	f7ff ffbf 	bl	8005fa2 <_stat>
 8006024:	3001      	adds	r0, #1
 8006026:	d003      	beq.n	8006030 <_swiopen+0x54>
 8006028:	f7ff f97a 	bl	8005320 <__errno>
 800602c:	2311      	movs	r3, #17
 800602e:	e7e8      	b.n	8006002 <_swiopen+0x26>
 8006030:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8006034:	f240 6301 	movw	r3, #1537	@ 0x601
 8006038:	07b2      	lsls	r2, r6, #30
 800603a:	bf48      	it	mi
 800603c:	f045 0502 	orrmi.w	r5, r5, #2
 8006040:	421e      	tst	r6, r3
 8006042:	bf18      	it	ne
 8006044:	f045 0504 	orrne.w	r5, r5, #4
 8006048:	0733      	lsls	r3, r6, #28
 800604a:	bf48      	it	mi
 800604c:	f025 0504 	bicmi.w	r5, r5, #4
 8006050:	4650      	mov	r0, sl
 8006052:	bf48      	it	mi
 8006054:	f045 0508 	orrmi.w	r5, r5, #8
 8006058:	f8cd a000 	str.w	sl, [sp]
 800605c:	f7fa f918 	bl	8000290 <strlen>
 8006060:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8006064:	2501      	movs	r5, #1
 8006066:	4628      	mov	r0, r5
 8006068:	4649      	mov	r1, r9
 800606a:	beab      	bkpt	0x00ab
 800606c:	4605      	mov	r5, r0
 800606e:	2d00      	cmp	r5, #0
 8006070:	db05      	blt.n	800607e <_swiopen+0xa2>
 8006072:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8006076:	4447      	add	r7, r8
 8006078:	2300      	movs	r3, #0
 800607a:	607b      	str	r3, [r7, #4]
 800607c:	e7c4      	b.n	8006008 <_swiopen+0x2c>
 800607e:	4628      	mov	r0, r5
 8006080:	f7ff fe86 	bl	8005d90 <error>
 8006084:	4604      	mov	r4, r0
 8006086:	e7bf      	b.n	8006008 <_swiopen+0x2c>
 8006088:	200046f0 	.word	0x200046f0

0800608c <_get_semihosting_exts>:
 800608c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006090:	4606      	mov	r6, r0
 8006092:	460f      	mov	r7, r1
 8006094:	4829      	ldr	r0, [pc, #164]	@ (800613c <_get_semihosting_exts+0xb0>)
 8006096:	2100      	movs	r1, #0
 8006098:	4615      	mov	r5, r2
 800609a:	f7ff ff9f 	bl	8005fdc <_swiopen>
 800609e:	462a      	mov	r2, r5
 80060a0:	4604      	mov	r4, r0
 80060a2:	2100      	movs	r1, #0
 80060a4:	4630      	mov	r0, r6
 80060a6:	f7ff f896 	bl	80051d6 <memset>
 80060aa:	1c63      	adds	r3, r4, #1
 80060ac:	d014      	beq.n	80060d8 <_get_semihosting_exts+0x4c>
 80060ae:	4620      	mov	r0, r4
 80060b0:	f7ff fe54 	bl	8005d5c <findslot>
 80060b4:	f04f 080c 	mov.w	r8, #12
 80060b8:	4681      	mov	r9, r0
 80060ba:	4640      	mov	r0, r8
 80060bc:	4649      	mov	r1, r9
 80060be:	beab      	bkpt	0x00ab
 80060c0:	4680      	mov	r8, r0
 80060c2:	4640      	mov	r0, r8
 80060c4:	f7ff fe72 	bl	8005dac <checkerror>
 80060c8:	2803      	cmp	r0, #3
 80060ca:	dd02      	ble.n	80060d2 <_get_semihosting_exts+0x46>
 80060cc:	1ec3      	subs	r3, r0, #3
 80060ce:	42ab      	cmp	r3, r5
 80060d0:	dc07      	bgt.n	80060e2 <_get_semihosting_exts+0x56>
 80060d2:	4620      	mov	r0, r4
 80060d4:	f7ff ff14 	bl	8005f00 <_close>
 80060d8:	f04f 30ff 	mov.w	r0, #4294967295
 80060dc:	b003      	add	sp, #12
 80060de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060e2:	2204      	movs	r2, #4
 80060e4:	eb0d 0102 	add.w	r1, sp, r2
 80060e8:	4620      	mov	r0, r4
 80060ea:	f7ff fe74 	bl	8005dd6 <_read>
 80060ee:	2803      	cmp	r0, #3
 80060f0:	ddef      	ble.n	80060d2 <_get_semihosting_exts+0x46>
 80060f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80060f6:	2b53      	cmp	r3, #83	@ 0x53
 80060f8:	d1eb      	bne.n	80060d2 <_get_semihosting_exts+0x46>
 80060fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80060fe:	2b48      	cmp	r3, #72	@ 0x48
 8006100:	d1e7      	bne.n	80060d2 <_get_semihosting_exts+0x46>
 8006102:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006106:	2b46      	cmp	r3, #70	@ 0x46
 8006108:	d1e3      	bne.n	80060d2 <_get_semihosting_exts+0x46>
 800610a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800610e:	2b42      	cmp	r3, #66	@ 0x42
 8006110:	d1df      	bne.n	80060d2 <_get_semihosting_exts+0x46>
 8006112:	2201      	movs	r2, #1
 8006114:	4639      	mov	r1, r7
 8006116:	4620      	mov	r0, r4
 8006118:	f7ff fe77 	bl	8005e0a <_swilseek>
 800611c:	2800      	cmp	r0, #0
 800611e:	dbd8      	blt.n	80060d2 <_get_semihosting_exts+0x46>
 8006120:	462a      	mov	r2, r5
 8006122:	4631      	mov	r1, r6
 8006124:	4620      	mov	r0, r4
 8006126:	f7ff fe56 	bl	8005dd6 <_read>
 800612a:	4605      	mov	r5, r0
 800612c:	4620      	mov	r0, r4
 800612e:	f7ff fee7 	bl	8005f00 <_close>
 8006132:	4628      	mov	r0, r5
 8006134:	f7ff fe3a 	bl	8005dac <checkerror>
 8006138:	e7d0      	b.n	80060dc <_get_semihosting_exts+0x50>
 800613a:	bf00      	nop
 800613c:	080063ff 	.word	0x080063ff

08006140 <initialise_semihosting_exts>:
 8006140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006142:	4d0a      	ldr	r5, [pc, #40]	@ (800616c <initialise_semihosting_exts+0x2c>)
 8006144:	4c0a      	ldr	r4, [pc, #40]	@ (8006170 <initialise_semihosting_exts+0x30>)
 8006146:	2100      	movs	r1, #0
 8006148:	2201      	movs	r2, #1
 800614a:	a801      	add	r0, sp, #4
 800614c:	6029      	str	r1, [r5, #0]
 800614e:	6022      	str	r2, [r4, #0]
 8006150:	f7ff ff9c 	bl	800608c <_get_semihosting_exts>
 8006154:	2800      	cmp	r0, #0
 8006156:	dd07      	ble.n	8006168 <initialise_semihosting_exts+0x28>
 8006158:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800615c:	f003 0201 	and.w	r2, r3, #1
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	602a      	str	r2, [r5, #0]
 8006166:	6023      	str	r3, [r4, #0]
 8006168:	b003      	add	sp, #12
 800616a:	bd30      	pop	{r4, r5, pc}
 800616c:	20000070 	.word	0x20000070
 8006170:	2000006c 	.word	0x2000006c

08006174 <_has_ext_stdout_stderr>:
 8006174:	b510      	push	{r4, lr}
 8006176:	4c04      	ldr	r4, [pc, #16]	@ (8006188 <_has_ext_stdout_stderr+0x14>)
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	da01      	bge.n	8006182 <_has_ext_stdout_stderr+0xe>
 800617e:	f7ff ffdf 	bl	8006140 <initialise_semihosting_exts>
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	bd10      	pop	{r4, pc}
 8006186:	bf00      	nop
 8006188:	2000006c 	.word	0x2000006c

0800618c <initialise_monitor_handles>:
 800618c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006190:	b085      	sub	sp, #20
 8006192:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8006244 <initialise_monitor_handles+0xb8>
 8006196:	f8cd 9004 	str.w	r9, [sp, #4]
 800619a:	2303      	movs	r3, #3
 800619c:	2400      	movs	r4, #0
 800619e:	9303      	str	r3, [sp, #12]
 80061a0:	af01      	add	r7, sp, #4
 80061a2:	9402      	str	r4, [sp, #8]
 80061a4:	2501      	movs	r5, #1
 80061a6:	4628      	mov	r0, r5
 80061a8:	4639      	mov	r1, r7
 80061aa:	beab      	bkpt	0x00ab
 80061ac:	4605      	mov	r5, r0
 80061ae:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006248 <initialise_monitor_handles+0xbc>
 80061b2:	4623      	mov	r3, r4
 80061b4:	4c20      	ldr	r4, [pc, #128]	@ (8006238 <initialise_monitor_handles+0xac>)
 80061b6:	f8c8 5000 	str.w	r5, [r8]
 80061ba:	f04f 32ff 	mov.w	r2, #4294967295
 80061be:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80061c2:	3301      	adds	r3, #1
 80061c4:	2b14      	cmp	r3, #20
 80061c6:	d1fa      	bne.n	80061be <initialise_monitor_handles+0x32>
 80061c8:	f7ff ffd4 	bl	8006174 <_has_ext_stdout_stderr>
 80061cc:	4d1b      	ldr	r5, [pc, #108]	@ (800623c <initialise_monitor_handles+0xb0>)
 80061ce:	b1d0      	cbz	r0, 8006206 <initialise_monitor_handles+0x7a>
 80061d0:	f04f 0a03 	mov.w	sl, #3
 80061d4:	2304      	movs	r3, #4
 80061d6:	f8cd 9004 	str.w	r9, [sp, #4]
 80061da:	2601      	movs	r6, #1
 80061dc:	f8cd a00c 	str.w	sl, [sp, #12]
 80061e0:	9302      	str	r3, [sp, #8]
 80061e2:	4630      	mov	r0, r6
 80061e4:	4639      	mov	r1, r7
 80061e6:	beab      	bkpt	0x00ab
 80061e8:	4683      	mov	fp, r0
 80061ea:	4b15      	ldr	r3, [pc, #84]	@ (8006240 <initialise_monitor_handles+0xb4>)
 80061ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80061f0:	f8c3 b000 	str.w	fp, [r3]
 80061f4:	2308      	movs	r3, #8
 80061f6:	f8cd a00c 	str.w	sl, [sp, #12]
 80061fa:	9302      	str	r3, [sp, #8]
 80061fc:	4630      	mov	r0, r6
 80061fe:	4639      	mov	r1, r7
 8006200:	beab      	bkpt	0x00ab
 8006202:	4606      	mov	r6, r0
 8006204:	602e      	str	r6, [r5, #0]
 8006206:	682b      	ldr	r3, [r5, #0]
 8006208:	3301      	adds	r3, #1
 800620a:	bf02      	ittt	eq
 800620c:	4b0c      	ldreq	r3, [pc, #48]	@ (8006240 <initialise_monitor_handles+0xb4>)
 800620e:	681b      	ldreq	r3, [r3, #0]
 8006210:	602b      	streq	r3, [r5, #0]
 8006212:	2600      	movs	r6, #0
 8006214:	f8d8 3000 	ldr.w	r3, [r8]
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	6066      	str	r6, [r4, #4]
 800621c:	f7ff ffaa 	bl	8006174 <_has_ext_stdout_stderr>
 8006220:	b130      	cbz	r0, 8006230 <initialise_monitor_handles+0xa4>
 8006222:	4b07      	ldr	r3, [pc, #28]	@ (8006240 <initialise_monitor_handles+0xb4>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006230:	b005      	add	sp, #20
 8006232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006236:	bf00      	nop
 8006238:	200046f0 	.word	0x200046f0
 800623c:	200046e4 	.word	0x200046e4
 8006240:	200046e8 	.word	0x200046e8
 8006244:	08006415 	.word	0x08006415
 8006248:	200046ec 	.word	0x200046ec

0800624c <_isatty>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	f7ff fd85 	bl	8005d5c <findslot>
 8006252:	2409      	movs	r4, #9
 8006254:	4605      	mov	r5, r0
 8006256:	b920      	cbnz	r0, 8006262 <_isatty+0x16>
 8006258:	f7ff f862 	bl	8005320 <__errno>
 800625c:	6004      	str	r4, [r0, #0]
 800625e:	2000      	movs	r0, #0
 8006260:	bd70      	pop	{r4, r5, r6, pc}
 8006262:	4620      	mov	r0, r4
 8006264:	4629      	mov	r1, r5
 8006266:	beab      	bkpt	0x00ab
 8006268:	4604      	mov	r4, r0
 800626a:	2c01      	cmp	r4, #1
 800626c:	4620      	mov	r0, r4
 800626e:	d0f7      	beq.n	8006260 <_isatty+0x14>
 8006270:	f7ff f856 	bl	8005320 <__errno>
 8006274:	2513      	movs	r5, #19
 8006276:	4604      	mov	r4, r0
 8006278:	2600      	movs	r6, #0
 800627a:	4628      	mov	r0, r5
 800627c:	4631      	mov	r1, r6
 800627e:	beab      	bkpt	0x00ab
 8006280:	4605      	mov	r5, r0
 8006282:	6025      	str	r5, [r4, #0]
 8006284:	e7eb      	b.n	800625e <_isatty+0x12>
	...

08006288 <_init>:
 8006288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628a:	bf00      	nop
 800628c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628e:	bc08      	pop	{r3}
 8006290:	469e      	mov	lr, r3
 8006292:	4770      	bx	lr

08006294 <_fini>:
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006296:	bf00      	nop
 8006298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629a:	bc08      	pop	{r3}
 800629c:	469e      	mov	lr, r3
 800629e:	4770      	bx	lr
