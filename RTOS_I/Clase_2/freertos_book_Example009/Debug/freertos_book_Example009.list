
freertos_book_Example009.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000605c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800620c  0800620c  0000720c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006350  08006350  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  08006350  08006350  00007350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006358  08006358  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006358  08006358  00007358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800635c  0800635c  0000735c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006360  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008074  2**0
                  CONTENTS
 10 .bss          0000471c  20000074  20000074  00008074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004790  20004790  00008074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c2c  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003532  00000000  00000000  00020cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  00024208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c6  00000000  00000000  00025798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003e24  00000000  00000000  0002685e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182d0  00000000  00000000  0002a682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb5ce  00000000  00000000  00042952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012df20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066b8  00000000  00000000  0012df64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  0013461c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080061f4 	.word	0x080061f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080061f4 	.word	0x080061f4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b08a      	sub	sp, #40	@ 0x28
 8000594:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000596:	f005 fdaf 	bl	80060f8 <initialise_monitor_handles>
	const char *pcTextForMain = "freertos_book_Example009 is running: Deleting tasks\r\n\n";
 800059a:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <main+0x88>)
 800059c:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fd2b 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f843 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f951 	bl	800084c <MX_GPIO_Init>
  MX_ETH_Init();
 80005aa:	f000 f8a9 	bl	8000700 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005ae:	f000 f8f5 	bl	800079c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b2:	f000 f91d 	bl	80007f0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
	/* Print out the name of this Example. */
	vPrintString( pcTextForMain );
 80005b6:	69f8      	ldr	r0, [r7, #28]
 80005b8:	f000 fc92 	bl	8000ee0 <vPrintString>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005bc:	4b17      	ldr	r3, [pc, #92]	@ (800061c <main+0x8c>)
 80005be:	463c      	mov	r4, r7
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	682b      	ldr	r3, [r5, #0]
 80005c8:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ca:	463b      	mov	r3, r7
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 f9a4 	bl	800391c <osThreadCreate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a12      	ldr	r2, [pc, #72]	@ (8000620 <main+0x90>)
 80005d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	BaseType_t ret;

	/* Task 1 thread at priority 1 */
	ret = xTaskCreate( vTask1,						/* Pointer to the function thats implement the task. */
 80005da:	2300      	movs	r3, #0
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2301      	movs	r3, #1
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005e8:	490e      	ldr	r1, [pc, #56]	@ (8000624 <main+0x94>)
 80005ea:	480f      	ldr	r0, [pc, #60]	@ (8000628 <main+0x98>)
 80005ec:	f003 fa85 	bl	8003afa <xTaskCreate>
 80005f0:	61b8      	str	r0, [r7, #24]
					   NULL,						/* We are not using the task parameter.		*/
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 		*/
		               NULL );          	        /* We are not using the task handle. */

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d00b      	beq.n	8000610 <main+0x80>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80005f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <main+0x7c>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000610:	f003 f97d 	bl	800390e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x84>
 8000618:	0800620c 	.word	0x0800620c
 800061c:	08006258 	.word	0x08006258
 8000620:	200007e4 	.word	0x200007e4
 8000624:	08006244 	.word	0x08006244
 8000628:	080009a9 	.word	0x080009a9

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	@ 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fd81 	bl	8005142 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	@ (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	@ (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a21      	ldr	r2, [pc, #132]	@ (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800069a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a0:	23a8      	movs	r3, #168	@ 0xa8
 80006a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a8:	2307      	movs	r3, #7
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fbe5 	bl	8001e80 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006bc:	f000 f9d4 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2105      	movs	r1, #5
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fe46 	bl	8002370 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ea:	f000 f9bd 	bl	8000a68 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	@ 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <MX_ETH_Init+0x84>)
 8000706:	4a20      	ldr	r2, [pc, #128]	@ (8000788 <MX_ETH_Init+0x88>)
 8000708:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800070a:	4b20      	ldr	r3, [pc, #128]	@ (800078c <MX_ETH_Init+0x8c>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000710:	4b1e      	ldr	r3, [pc, #120]	@ (800078c <MX_ETH_Init+0x8c>)
 8000712:	2280      	movs	r2, #128	@ 0x80
 8000714:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000716:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <MX_ETH_Init+0x8c>)
 8000718:	22e1      	movs	r2, #225	@ 0xe1
 800071a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800071c:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_ETH_Init+0x8c>)
 800071e:	2200      	movs	r2, #0
 8000720:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_ETH_Init+0x8c>)
 8000724:	2200      	movs	r2, #0
 8000726:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000728:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_ETH_Init+0x8c>)
 800072a:	2200      	movs	r2, #0
 800072c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <MX_ETH_Init+0x84>)
 8000730:	4a16      	ldr	r2, [pc, #88]	@ (800078c <MX_ETH_Init+0x8c>)
 8000732:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_ETH_Init+0x84>)
 8000736:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800073a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_ETH_Init+0x84>)
 800073e:	4a14      	ldr	r2, [pc, #80]	@ (8000790 <MX_ETH_Init+0x90>)
 8000740:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000742:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <MX_ETH_Init+0x84>)
 8000744:	4a13      	ldr	r2, [pc, #76]	@ (8000794 <MX_ETH_Init+0x94>)
 8000746:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_ETH_Init+0x84>)
 800074a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800074e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000750:	480c      	ldr	r0, [pc, #48]	@ (8000784 <MX_ETH_Init+0x84>)
 8000752:	f000 fd99 	bl	8001288 <HAL_ETH_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800075c:	f000 f984 	bl	8000a68 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000760:	2238      	movs	r2, #56	@ 0x38
 8000762:	2100      	movs	r1, #0
 8000764:	480c      	ldr	r0, [pc, #48]	@ (8000798 <MX_ETH_Init+0x98>)
 8000766:	f004 fcec 	bl	8005142 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_ETH_Init+0x98>)
 800076c:	2221      	movs	r2, #33	@ 0x21
 800076e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_ETH_Init+0x98>)
 8000772:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000776:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <MX_ETH_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000208 	.word	0x20000208
 8000788:	40028000 	.word	0x40028000
 800078c:	200007ec 	.word	0x200007ec
 8000790:	20000168 	.word	0x20000168
 8000794:	200000c8 	.word	0x200000c8
 8000798:	20000090 	.word	0x20000090

0800079c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <MX_USART3_UART_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_USART3_UART_Init+0x4c>)
 80007d4:	f002 fac0 	bl	8002d58 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007de:	f000 f943 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200002b8 	.word	0x200002b8
 80007ec:	40004800 	.word	0x40004800

080007f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007f4:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	2204      	movs	r2, #4
 8000800:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000804:	2202      	movs	r2, #2
 8000806:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000810:	2202      	movs	r2, #2
 8000812:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2201      	movs	r2, #1
 8000818:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2201      	movs	r2, #1
 800082a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	f001 fa15 	bl	8001c62 <HAL_PCD_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f913 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000300 	.word	0x20000300

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	@ 0x30
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
 8000866:	4b4c      	ldr	r3, [pc, #304]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a4b      	ldr	r2, [pc, #300]	@ (8000998 <MX_GPIO_Init+0x14c>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b49      	ldr	r3, [pc, #292]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	4b45      	ldr	r3, [pc, #276]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a44      	ldr	r2, [pc, #272]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b42      	ldr	r3, [pc, #264]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b3e      	ldr	r3, [pc, #248]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a3d      	ldr	r2, [pc, #244]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b37      	ldr	r3, [pc, #220]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a36      	ldr	r2, [pc, #216]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b34      	ldr	r3, [pc, #208]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b30      	ldr	r3, [pc, #192]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a2f      	ldr	r2, [pc, #188]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a28      	ldr	r2, [pc, #160]	@ (8000998 <MX_GPIO_Init+0x14c>)
 80008f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000910:	4822      	ldr	r0, [pc, #136]	@ (800099c <MX_GPIO_Init+0x150>)
 8000912:	f001 f98d 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2140      	movs	r1, #64	@ 0x40
 800091a:	4821      	ldr	r0, [pc, #132]	@ (80009a0 <MX_GPIO_Init+0x154>)
 800091c:	f001 f988 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000920:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	481b      	ldr	r0, [pc, #108]	@ (80009a4 <MX_GPIO_Init+0x158>)
 8000938:	f000 ffce 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800093c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4811      	ldr	r0, [pc, #68]	@ (800099c <MX_GPIO_Init+0x150>)
 8000956:	f000 ffbf 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800095a:	2340      	movs	r3, #64	@ 0x40
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <MX_GPIO_Init+0x154>)
 8000972:	f000 ffb1 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000976:	2380      	movs	r3, #128	@ 0x80
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_GPIO_Init+0x154>)
 800098a:	f000 ffa5 	bl	80018d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098e:	bf00      	nop
 8000990:	3730      	adds	r7, #48	@ 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40020400 	.word	0x40020400
 80009a0:	40021800 	.word	0x40021800
 80009a4:	40020800 	.word	0x40020800

080009a8 <vTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vTask1 */
void vTask1( void *pvParameters )
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	const TickType_t xDelay100ms = pdMS_TO_TICKS( 100UL );
 80009b0:	2364      	movs	r3, #100	@ 0x64
 80009b2:	617b      	str	r3, [r7, #20]

	for( ;; )
	{
		/* Print out the name of this task. */
		vPrintString( "Task1 is running\r\n" );
 80009b4:	4810      	ldr	r0, [pc, #64]	@ (80009f8 <vTask1+0x50>)
 80009b6:	f000 fa93 	bl	8000ee0 <vPrintString>

		/* Create task 2 at a higher priority.  Again the task parameter is not
	       used so is set to NULL - BUT this time we want to obtain a handle to the
	       task so pass in the address of the xTask2Handle variable. */
		/* Task 2 thread at priority 2 */
		ret = xTaskCreate( vTask2,						/* Pointer to the function thats implement the task. */
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <vTask1+0x54>)
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	2302      	movs	r3, #2
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2300      	movs	r3, #0
 80009c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009c8:	490d      	ldr	r1, [pc, #52]	@ (8000a00 <vTask1+0x58>)
 80009ca:	480e      	ldr	r0, [pc, #56]	@ (8000a04 <vTask1+0x5c>)
 80009cc:	f003 f895 	bl	8003afa <xTaskCreate>
 80009d0:	6138      	str	r0, [r7, #16]
						   NULL,						/* We are not using the task parameter.		*/
						   (tskIDLE_PRIORITY + 2UL),	/* This task will run at priority 2. 		*/
						   &xTask2Handle );				/* We are using a variable as task handle.	*/

		/* Check the task was created successfully. */
		configASSERT( ret == pdPASS );
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d00b      	beq.n	80009f0 <vTask1+0x48>
	__asm volatile
 80009d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009dc:	f383 8811 	msr	BASEPRI, r3
 80009e0:	f3bf 8f6f 	isb	sy
 80009e4:	f3bf 8f4f 	dsb	sy
 80009e8:	60fb      	str	r3, [r7, #12]
}
 80009ea:	bf00      	nop
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <vTask1+0x44>

		/* Task2 has/had the higher priority, so for Task1 to reach here Task2
	       must have already executed and deleted itself.  Delay for 100
	       milliseconds. */
		vTaskDelay( xDelay100ms );
 80009f0:	6978      	ldr	r0, [r7, #20]
 80009f2:	f003 fa5d 	bl	8003eb0 <vTaskDelay>
		vPrintString( "Task1 is running\r\n" );
 80009f6:	e7dd      	b.n	80009b4 <vTask1+0xc>
 80009f8:	0800626c 	.word	0x0800626c
 80009fc:	200007e8 	.word	0x200007e8
 8000a00:	08006280 	.word	0x08006280
 8000a04:	08000a09 	.word	0x08000a09

08000a08 <vTask2>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vTask2 */
void vTask2( void *pvParameters )
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	   /* Task2 does nothing but delete itself.  To do this it could call vTaskDelete()
	   using a NULL parameter, but instead and purely for demonstration purposes it
	   instead calls vTaskDelete() with its own task handle. */
	   vPrintString( "Task2 is running and about to delete itself\r\n" );
 8000a10:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <vTask2+0x20>)
 8000a12:	f000 fa65 	bl	8000ee0 <vPrintString>
	   vTaskDelete( xTask2Handle );
 8000a16:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <vTask2+0x24>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f003 f9b8 	bl	8003d90 <vTaskDelete>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	08006288 	.word	0x08006288
 8000a2c:	200007e8 	.word	0x200007e8

08000a30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50000);
 8000a38:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000a3c:	f002 ff95 	bl	800396a <osDelay>
 8000a40:	e7fa      	b.n	8000a38 <StartDefaultTask+0x8>
	...

08000a44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a04      	ldr	r2, [pc, #16]	@ (8000a64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d101      	bne.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a56:	f000 faf1 	bl	800103c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40001400 	.word	0x40001400

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <Error_Handler+0x8>

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <HAL_MspInit+0x54>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a82:	4a11      	ldr	r2, [pc, #68]	@ (8000ac8 <HAL_MspInit+0x54>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <HAL_MspInit+0x54>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <HAL_MspInit+0x54>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <HAL_MspInit+0x54>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <HAL_MspInit+0x54>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	f06f 0001 	mvn.w	r0, #1
 8000aba:	f000 fbbb 	bl	8001234 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	@ 0x38
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a55      	ldr	r2, [pc, #340]	@ (8000c40 <HAL_ETH_MspInit+0x174>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	f040 80a4 	bne.w	8000c38 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	4b53      	ldr	r3, [pc, #332]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af8:	4a52      	ldr	r2, [pc, #328]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000afa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000afe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b00:	4b50      	ldr	r3, [pc, #320]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b08:	623b      	str	r3, [r7, #32]
 8000b0a:	6a3b      	ldr	r3, [r7, #32]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
 8000b10:	4b4c      	ldr	r3, [pc, #304]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b14:	4a4b      	ldr	r2, [pc, #300]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1c:	4b49      	ldr	r3, [pc, #292]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b24:	61fb      	str	r3, [r7, #28]
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	4b45      	ldr	r3, [pc, #276]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b30:	4a44      	ldr	r2, [pc, #272]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b38:	4b42      	ldr	r3, [pc, #264]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	4b3e      	ldr	r3, [pc, #248]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4c:	4a3d      	ldr	r2, [pc, #244]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b54:	4b3b      	ldr	r3, [pc, #236]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	4b37      	ldr	r3, [pc, #220]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	4a36      	ldr	r2, [pc, #216]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b70:	4b34      	ldr	r3, [pc, #208]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	4b30      	ldr	r3, [pc, #192]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b84:	4a2f      	ldr	r2, [pc, #188]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	4b29      	ldr	r3, [pc, #164]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba0:	4a28      	ldr	r2, [pc, #160]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ba6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba8:	4b26      	ldr	r3, [pc, #152]	@ (8000c44 <HAL_ETH_MspInit+0x178>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bb4:	2332      	movs	r3, #50	@ 0x32
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc4:	230b      	movs	r3, #11
 8000bc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	481e      	ldr	r0, [pc, #120]	@ (8000c48 <HAL_ETH_MspInit+0x17c>)
 8000bd0:	f000 fe82 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bd4:	2386      	movs	r3, #134	@ 0x86
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be4:	230b      	movs	r3, #11
 8000be6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4817      	ldr	r0, [pc, #92]	@ (8000c4c <HAL_ETH_MspInit+0x180>)
 8000bf0:	f000 fe72 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c06:	230b      	movs	r3, #11
 8000c08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480f      	ldr	r0, [pc, #60]	@ (8000c50 <HAL_ETH_MspInit+0x184>)
 8000c12:	f000 fe61 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c16:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c28:	230b      	movs	r3, #11
 8000c2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <HAL_ETH_MspInit+0x188>)
 8000c34:	f000 fe50 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3738      	adds	r7, #56	@ 0x38
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40028000 	.word	0x40028000
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020400 	.word	0x40020400
 8000c54:	40021800 	.word	0x40021800

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	@ 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a19      	ldr	r2, [pc, #100]	@ (8000cdc <HAL_UART_MspInit+0x84>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d12c      	bne.n	8000cd4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	4a17      	ldr	r2, [pc, #92]	@ (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ce0 <HAL_UART_MspInit+0x88>)
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <HAL_UART_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cb2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cc4:	2307      	movs	r3, #7
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <HAL_UART_MspInit+0x8c>)
 8000cd0:	f000 fe02 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	@ 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40004800 	.word	0x40004800
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020c00 	.word	0x40020c00

08000ce8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d08:	d13f      	bne.n	8000d8a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a20      	ldr	r2, [pc, #128]	@ (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d26:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d38:	230a      	movs	r3, #10
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4815      	ldr	r0, [pc, #84]	@ (8000d98 <HAL_PCD_MspInit+0xb0>)
 8000d44:	f000 fdc8 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480e      	ldr	r0, [pc, #56]	@ (8000d98 <HAL_PCD_MspInit+0xb0>)
 8000d5e:	f000 fdbb 	bl	80018d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d62:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d66:	4a0b      	ldr	r2, [pc, #44]	@ (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d6c:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d76:	4a07      	ldr	r2, [pc, #28]	@ (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d7e:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	@ 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020000 	.word	0x40020000

08000d9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	@ 0x38
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4b33      	ldr	r3, [pc, #204]	@ (8000e80 <HAL_InitTick+0xe4>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db4:	4a32      	ldr	r2, [pc, #200]	@ (8000e80 <HAL_InitTick+0xe4>)
 8000db6:	f043 0320 	orr.w	r3, r3, #32
 8000dba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbc:	4b30      	ldr	r3, [pc, #192]	@ (8000e80 <HAL_InitTick+0xe4>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	f003 0320 	and.w	r3, r3, #32
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc8:	f107 0210 	add.w	r2, r7, #16
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 fcec 	bl	80027b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d103      	bne.n	8000dea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000de2:	f001 fcbd 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8000de6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000de8:	e004      	b.n	8000df4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dea:	f001 fcb9 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8000dee:	4603      	mov	r3, r0
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000df6:	4a23      	ldr	r2, [pc, #140]	@ (8000e84 <HAL_InitTick+0xe8>)
 8000df8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfc:	0c9b      	lsrs	r3, r3, #18
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e04:	4a21      	ldr	r2, [pc, #132]	@ (8000e8c <HAL_InitTick+0xf0>)
 8000e06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e0e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000e10:	4a1d      	ldr	r2, [pc, #116]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e14:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000e28:	4817      	ldr	r0, [pc, #92]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e2a:	f001 fcf3 	bl	8002814 <HAL_TIM_Base_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d11b      	bne.n	8000e74 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000e3c:	4812      	ldr	r0, [pc, #72]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e3e:	f001 fd43 	bl	80028c8 <HAL_TIM_Base_Start_IT>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d111      	bne.n	8000e74 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e50:	2037      	movs	r0, #55	@ 0x37
 8000e52:	f000 fa0b 	bl	800126c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d808      	bhi.n	8000e6e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	2037      	movs	r0, #55	@ 0x37
 8000e62:	f000 f9e7 	bl	8001234 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e66:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <HAL_InitTick+0xf4>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	e002      	b.n	8000e74 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3738      	adds	r7, #56	@ 0x38
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	431bde83 	.word	0x431bde83
 8000e88:	200007f4 	.word	0x200007f4
 8000e8c:	40001400 	.word	0x40001400
 8000e90:	20000004 	.word	0x20000004

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <NMI_Handler+0x4>

08000e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <TIM7_IRQHandler+0x10>)
 8000ed2:	f001 fd69 	bl	80029a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200007f4 	.word	0x200007f4

08000ee0 <vPrintString>:
}

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 8000ee8:	f003 fc86 	bl	80047f8 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4807      	ldr	r0, [pc, #28]	@ (8000f0c <vPrintString+0x2c>)
 8000ef0:	f004 f8d2 	bl	8005098 <iprintf>
		fflush( stdout );
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <vPrintString+0x30>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f003 fff6 	bl	8004eec <fflush>
	}
	taskEXIT_CRITICAL();
 8000f00:	f003 fcac 	bl	800485c <vPortExitCritical>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	080062b8 	.word	0x080062b8
 8000f10:	2000001c 	.word	0x2000001c

08000f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f1c:	4a14      	ldr	r2, [pc, #80]	@ (8000f70 <_sbrk+0x5c>)
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <_sbrk+0x60>)
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f28:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d102      	bne.n	8000f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <_sbrk+0x64>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	@ (8000f7c <_sbrk+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d207      	bcs.n	8000f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f44:	f004 f9a2 	bl	800528c <__errno>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	e009      	b.n	8000f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f54:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <_sbrk+0x64>)
 8000f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20030000 	.word	0x20030000
 8000f74:	00000400 	.word	0x00000400
 8000f78:	2000083c 	.word	0x2000083c
 8000f7c:	20004790 	.word	0x20004790

08000f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <SystemInit+0x20>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8a:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <SystemInit+0x20>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fdc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa8:	480d      	ldr	r0, [pc, #52]	@ (8000fe0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000faa:	490e      	ldr	r1, [pc, #56]	@ (8000fe4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fac:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000fec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc0:	4c0b      	ldr	r4, [pc, #44]	@ (8000ff0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fce:	f7ff ffd7 	bl	8000f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f004 f961 	bl	8005298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fadb 	bl	8000590 <main>
  bx  lr    
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fdc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fe8:	08006360 	.word	0x08006360
  ldr r2, =_sbss
 8000fec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ff0:	20004790 	.word	0x20004790

08000ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0d      	ldr	r2, [pc, #52]	@ (8001038 <HAL_Init+0x40>)
 8001002:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001008:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <HAL_Init+0x40>)
 800100e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <HAL_Init+0x40>)
 800101a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800101e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f8fc 	bl	800121e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001026:	200f      	movs	r0, #15
 8001028:	f7ff feb8 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102c:	f7ff fd22 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023c00 	.word	0x40023c00

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008
 8001060:	20000840 	.word	0x20000840

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000840 	.word	0x20000840

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <HAL_Delay+0x44>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4907      	ldr	r1, [pc, #28]	@ (8001160 <__NVIC_EnableIRQ+0x38>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	@ (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	@ (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff4c 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001246:	f7ff ff61 	bl	800110c <__NVIC_GetPriorityGrouping>
 800124a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	6978      	ldr	r0, [r7, #20]
 8001252:	f7ff ffb1 	bl	80011b8 <NVIC_EncodePriority>
 8001256:	4602      	mov	r2, r0
 8001258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff80 	bl	8001164 <__NVIC_SetPriority>
}
 8001264:	bf00      	nop
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff54 	bl	8001128 <__NVIC_EnableIRQ>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e06c      	b.n	8001374 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d106      	bne.n	80012b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2223      	movs	r2, #35	@ 0x23
 80012a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff fc0d 	bl	8000acc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b31      	ldr	r3, [pc, #196]	@ (800137c <HAL_ETH_Init+0xf4>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	4a30      	ldr	r2, [pc, #192]	@ (800137c <HAL_ETH_Init+0xf4>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c2:	4b2e      	ldr	r3, [pc, #184]	@ (800137c <HAL_ETH_Init+0xf4>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001380 <HAL_ETH_Init+0xf8>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4a2b      	ldr	r2, [pc, #172]	@ (8001380 <HAL_ETH_Init+0xf8>)
 80012d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80012d8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012da:	4b29      	ldr	r3, [pc, #164]	@ (8001380 <HAL_ETH_Init+0xf8>)
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	4927      	ldr	r1, [pc, #156]	@ (8001380 <HAL_ETH_Init+0xf8>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012e8:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <HAL_ETH_Init+0xf8>)
 80012ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001302:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001304:	f7ff feae 	bl	8001064 <HAL_GetTick>
 8001308:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800130a:	e011      	b.n	8001330 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800130c:	f7ff feaa 	bl	8001064 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800131a:	d909      	bls.n	8001330 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2204      	movs	r2, #4
 8001320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	22e0      	movs	r2, #224	@ 0xe0
 8001328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e021      	b.n	8001374 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1e4      	bne.n	800130c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f958 	bl	80015f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f9ff 	bl	800174c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fa55 	bl	80017fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	461a      	mov	r2, r3
 800135a:	2100      	movs	r1, #0
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f9bd 	bl	80016dc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2210      	movs	r2, #16
 800136e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	40013800 	.word	0x40013800

08001384 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	4b51      	ldr	r3, [pc, #324]	@ (80014e0 <ETH_SetMACConfig+0x15c>)
 800139a:	4013      	ands	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	7c1b      	ldrb	r3, [r3, #16]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <ETH_SetMACConfig+0x28>
 80013a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013aa:	e000      	b.n	80013ae <ETH_SetMACConfig+0x2a>
 80013ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	7c5b      	ldrb	r3, [r3, #17]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <ETH_SetMACConfig+0x38>
 80013b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013ba:	e000      	b.n	80013be <ETH_SetMACConfig+0x3a>
 80013bc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	7fdb      	ldrb	r3, [r3, #31]
 80013ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	7f92      	ldrb	r2, [r2, #30]
 80013d8:	2a00      	cmp	r2, #0
 80013da:	d102      	bne.n	80013e2 <ETH_SetMACConfig+0x5e>
 80013dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013e0:	e000      	b.n	80013e4 <ETH_SetMACConfig+0x60>
 80013e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80013e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	7f1b      	ldrb	r3, [r3, #28]
 80013ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	791b      	ldrb	r3, [r3, #4]
 80013f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80013fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001402:	2a00      	cmp	r2, #0
 8001404:	d102      	bne.n	800140c <ETH_SetMACConfig+0x88>
 8001406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800140a:	e000      	b.n	800140e <ETH_SetMACConfig+0x8a>
 800140c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800140e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	7bdb      	ldrb	r3, [r3, #15]
 8001414:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001416:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800141c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001424:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001426:	4313      	orrs	r3, r2
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	4313      	orrs	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800143e:	2001      	movs	r0, #1
 8001440:	f7ff fe1c 	bl	800107c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800145a:	4013      	ands	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001462:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800146a:	2a00      	cmp	r2, #0
 800146c:	d101      	bne.n	8001472 <ETH_SetMACConfig+0xee>
 800146e:	2280      	movs	r2, #128	@ 0x80
 8001470:	e000      	b.n	8001474 <ETH_SetMACConfig+0xf0>
 8001472:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001474:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800147a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001482:	2a01      	cmp	r2, #1
 8001484:	d101      	bne.n	800148a <ETH_SetMACConfig+0x106>
 8001486:	2208      	movs	r2, #8
 8001488:	e000      	b.n	800148c <ETH_SetMACConfig+0x108>
 800148a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800148c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001494:	2a01      	cmp	r2, #1
 8001496:	d101      	bne.n	800149c <ETH_SetMACConfig+0x118>
 8001498:	2204      	movs	r2, #4
 800149a:	e000      	b.n	800149e <ETH_SetMACConfig+0x11a>
 800149c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800149e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80014a6:	2a01      	cmp	r2, #1
 80014a8:	d101      	bne.n	80014ae <ETH_SetMACConfig+0x12a>
 80014aa:	2202      	movs	r2, #2
 80014ac:	e000      	b.n	80014b0 <ETH_SetMACConfig+0x12c>
 80014ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014b0:	4313      	orrs	r3, r2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7ff fdd7 	bl	800107c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	619a      	str	r2, [r3, #24]
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	ff20810f 	.word	0xff20810f

080014e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4b3d      	ldr	r3, [pc, #244]	@ (80015f4 <ETH_SetDMAConfig+0x110>)
 80014fe:	4013      	ands	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	7b1b      	ldrb	r3, [r3, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <ETH_SetDMAConfig+0x2c>
 800150a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800150e:	e000      	b.n	8001512 <ETH_SetDMAConfig+0x2e>
 8001510:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	7b5b      	ldrb	r3, [r3, #13]
 8001516:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001518:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	7f52      	ldrb	r2, [r2, #29]
 800151e:	2a00      	cmp	r2, #0
 8001520:	d102      	bne.n	8001528 <ETH_SetDMAConfig+0x44>
 8001522:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001526:	e000      	b.n	800152a <ETH_SetDMAConfig+0x46>
 8001528:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800152a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	7b9b      	ldrb	r3, [r3, #14]
 8001530:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001532:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001538:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	7f1b      	ldrb	r3, [r3, #28]
 800153e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001540:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	7f9b      	ldrb	r3, [r3, #30]
 8001546:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001548:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800154e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001556:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001558:	4313      	orrs	r3, r2
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001568:	461a      	mov	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800157a:	2001      	movs	r0, #1
 800157c:	f7ff fd7e 	bl	800107c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001588:	461a      	mov	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	791b      	ldrb	r3, [r3, #4]
 8001592:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001598:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800159e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff fd4f 	bl	800107c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	f8de3f23 	.word	0xf8de3f23

080015f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0a6      	sub	sp, #152	@ 0x98
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001600:	2301      	movs	r3, #1
 8001602:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001606:	2301      	movs	r3, #1
 8001608:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800160c:	2300      	movs	r3, #0
 800160e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001616:	2301      	movs	r3, #1
 8001618:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001622:	2301      	movs	r3, #1
 8001624:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001634:	2300      	movs	r3, #0
 8001636:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800163e:	2300      	movs	r3, #0
 8001640:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800165a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800165e:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001660:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001664:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800166c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001670:	4619      	mov	r1, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fe86 	bl	8001384 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001678:	2301      	movs	r3, #1
 800167a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800167c:	2301      	movs	r3, #1
 800167e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001680:	2301      	movs	r3, #1
 8001682:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001686:	2301      	movs	r3, #1
 8001688:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800169a:	2300      	movs	r3, #0
 800169c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016a4:	2301      	movs	r3, #1
 80016a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	4619      	mov	r1, r3
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff08 	bl	80014e4 <ETH_SetDMAConfig>
}
 80016d4:	bf00      	nop
 80016d6:	3798      	adds	r7, #152	@ 0x98
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3305      	adds	r3, #5
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	3204      	adds	r2, #4
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <ETH_MACAddressConfig+0x68>)
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3303      	adds	r3, #3
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	061a      	lsls	r2, r3, #24
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3302      	adds	r3, #2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	041b      	lsls	r3, r3, #16
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3301      	adds	r3, #1
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	4313      	orrs	r3, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	4313      	orrs	r3, r2
 8001728:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <ETH_MACAddressConfig+0x6c>)
 800172e:	4413      	add	r3, r2
 8001730:	461a      	mov	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	6013      	str	r3, [r2, #0]
}
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40028040 	.word	0x40028040
 8001748:	40028044 	.word	0x40028044

0800174c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e03e      	b.n	80017d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68d9      	ldr	r1, [r3, #12]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2200      	movs	r2, #0
 8001776:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	3206      	adds	r2, #6
 800178c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d80c      	bhi.n	80017bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68d9      	ldr	r1, [r3, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	461a      	mov	r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	e004      	b.n	80017c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d9bd      	bls.n	800175a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017f0:	611a      	str	r2, [r3, #16]
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	e046      	b.n	800189a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6919      	ldr	r1, [r3, #16]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2200      	movs	r2, #0
 8001840:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001848:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001850:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	3212      	adds	r2, #18
 8001866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d80c      	bhi.n	800188a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6919      	ldr	r1, [r3, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	461a      	mov	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	e004      	b.n	8001894 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	461a      	mov	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d9b5      	bls.n	800180c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ca:	60da      	str	r2, [r3, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	@ 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	e177      	b.n	8001be4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f4:	2201      	movs	r2, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	429a      	cmp	r2, r3
 800190e:	f040 8166 	bne.w	8001bde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d005      	beq.n	800192a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001926:	2b02      	cmp	r3, #2
 8001928:	d130      	bne.n	800198c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001960:	2201      	movs	r2, #1
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 0201 	and.w	r2, r3, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b03      	cmp	r3, #3
 8001996:	d017      	beq.n	80019c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d123      	bne.n	8001a1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	08da      	lsrs	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3208      	adds	r2, #8
 8001a16:	69b9      	ldr	r1, [r7, #24]
 8001a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0203 	and.w	r2, r3, #3
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80c0 	beq.w	8001bde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b66      	ldr	r3, [pc, #408]	@ (8001bfc <HAL_GPIO_Init+0x324>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a66:	4a65      	ldr	r2, [pc, #404]	@ (8001bfc <HAL_GPIO_Init+0x324>)
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a6e:	4b63      	ldr	r3, [pc, #396]	@ (8001bfc <HAL_GPIO_Init+0x324>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7a:	4a61      	ldr	r2, [pc, #388]	@ (8001c00 <HAL_GPIO_Init+0x328>)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	220f      	movs	r2, #15
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a58      	ldr	r2, [pc, #352]	@ (8001c04 <HAL_GPIO_Init+0x32c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d037      	beq.n	8001b16 <HAL_GPIO_Init+0x23e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a57      	ldr	r2, [pc, #348]	@ (8001c08 <HAL_GPIO_Init+0x330>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d031      	beq.n	8001b12 <HAL_GPIO_Init+0x23a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a56      	ldr	r2, [pc, #344]	@ (8001c0c <HAL_GPIO_Init+0x334>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d02b      	beq.n	8001b0e <HAL_GPIO_Init+0x236>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a55      	ldr	r2, [pc, #340]	@ (8001c10 <HAL_GPIO_Init+0x338>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d025      	beq.n	8001b0a <HAL_GPIO_Init+0x232>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a54      	ldr	r2, [pc, #336]	@ (8001c14 <HAL_GPIO_Init+0x33c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01f      	beq.n	8001b06 <HAL_GPIO_Init+0x22e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a53      	ldr	r2, [pc, #332]	@ (8001c18 <HAL_GPIO_Init+0x340>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d019      	beq.n	8001b02 <HAL_GPIO_Init+0x22a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	@ (8001c1c <HAL_GPIO_Init+0x344>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0x226>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a51      	ldr	r2, [pc, #324]	@ (8001c20 <HAL_GPIO_Init+0x348>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00d      	beq.n	8001afa <HAL_GPIO_Init+0x222>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a50      	ldr	r2, [pc, #320]	@ (8001c24 <HAL_GPIO_Init+0x34c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d007      	beq.n	8001af6 <HAL_GPIO_Init+0x21e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4f      	ldr	r2, [pc, #316]	@ (8001c28 <HAL_GPIO_Init+0x350>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_GPIO_Init+0x21a>
 8001aee:	2309      	movs	r3, #9
 8001af0:	e012      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001af2:	230a      	movs	r3, #10
 8001af4:	e010      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001af6:	2308      	movs	r3, #8
 8001af8:	e00e      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001afa:	2307      	movs	r3, #7
 8001afc:	e00c      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001afe:	2306      	movs	r3, #6
 8001b00:	e00a      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b02:	2305      	movs	r3, #5
 8001b04:	e008      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b06:	2304      	movs	r3, #4
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e004      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b16:	2300      	movs	r3, #0
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f002 0203 	and.w	r2, r2, #3
 8001b1e:	0092      	lsls	r2, r2, #2
 8001b20:	4093      	lsls	r3, r2
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b28:	4935      	ldr	r1, [pc, #212]	@ (8001c00 <HAL_GPIO_Init+0x328>)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b36:	4b3d      	ldr	r3, [pc, #244]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5a:	4a34      	ldr	r2, [pc, #208]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b60:	4b32      	ldr	r3, [pc, #200]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b84:	4a29      	ldr	r2, [pc, #164]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b8a:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bae:	4a1f      	ldr	r2, [pc, #124]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd8:	4a14      	ldr	r2, [pc, #80]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3301      	adds	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b0f      	cmp	r3, #15
 8001be8:	f67f ae84 	bls.w	80018f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3724      	adds	r7, #36	@ 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40020000 	.word	0x40020000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40021400 	.word	0x40021400
 8001c1c:	40021800 	.word	0x40021800
 8001c20:	40021c00 	.word	0x40021c00
 8001c24:	40022000 	.word	0x40022000
 8001c28:	40022400 	.word	0x40022400
 8001c2c:	40013c00 	.word	0x40013c00

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c4c:	e003      	b.n	8001c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af02      	add	r7, sp, #8
 8001c68:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e101      	b.n	8001e78 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff f82a 	bl	8000ce8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2203      	movs	r2, #3
 8001c98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ca2:	d102      	bne.n	8001caa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 fb7a 	bl	80033a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7c1a      	ldrb	r2, [r3, #16]
 8001cbc:	f88d 2000 	strb.w	r2, [sp]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc4:	f001 fb0c 	bl	80032e0 <USB_CoreInit>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0ce      	b.n	8001e78 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f001 fb72 	bl	80033ca <USB_SetCurrentMode>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0bf      	b.n	8001e78 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	e04a      	b.n	8001d94 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3315      	adds	r3, #21
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	3314      	adds	r3, #20
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	b298      	uxth	r0, r3
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	332e      	adds	r3, #46	@ 0x2e
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3318      	adds	r3, #24
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	331c      	adds	r3, #28
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	3320      	adds	r3, #32
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	3324      	adds	r3, #36	@ 0x24
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	3301      	adds	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	791b      	ldrb	r3, [r3, #4]
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d3af      	bcc.n	8001cfe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	e044      	b.n	8001e2e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	791b      	ldrb	r3, [r3, #4]
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d3b5      	bcc.n	8001da4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7c1a      	ldrb	r2, [r3, #16]
 8001e40:	f88d 2000 	strb.w	r2, [sp]
 8001e44:	3304      	adds	r3, #4
 8001e46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e48:	f001 fb0c 	bl	8003464 <USB_DevInit>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2202      	movs	r2, #2
 8001e56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00c      	b.n	8001e78 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f001 fcd4 	bl	800381e <USB_DevDisconnect>

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e267      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d075      	beq.n	8001f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e9e:	4b88      	ldr	r3, [pc, #544]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4b85      	ldr	r3, [pc, #532]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d112      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb6:	4b82      	ldr	r3, [pc, #520]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ebe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ec2:	d10b      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	4b7e      	ldr	r3, [pc, #504]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d05b      	beq.n	8001f88 <HAL_RCC_OscConfig+0x108>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d157      	bne.n	8001f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e242      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ee4:	d106      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x74>
 8001ee6:	4b76      	ldr	r3, [pc, #472]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a75      	ldr	r2, [pc, #468]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e01d      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x98>
 8001efe:	4b70      	ldr	r3, [pc, #448]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6f      	ldr	r2, [pc, #444]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6c      	ldr	r2, [pc, #432]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001f18:	4b69      	ldr	r3, [pc, #420]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a68      	ldr	r2, [pc, #416]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b66      	ldr	r3, [pc, #408]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a65      	ldr	r2, [pc, #404]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff f894 	bl	8001064 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff f890 	bl	8001064 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	@ 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e207      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b5b      	ldr	r3, [pc, #364]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0xc0>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff f880 	bl	8001064 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff f87c 	bl	8001064 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	@ 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e1f3      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	4b51      	ldr	r3, [pc, #324]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0xe8>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d063      	beq.n	800205e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f96:	4b4a      	ldr	r3, [pc, #296]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b47      	ldr	r3, [pc, #284]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d11c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fae:	4b44      	ldr	r3, [pc, #272]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	4b41      	ldr	r3, [pc, #260]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e1c7      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4937      	ldr	r1, [pc, #220]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	e03a      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff0:	4b34      	ldr	r3, [pc, #208]	@ (80020c4 <HAL_RCC_OscConfig+0x244>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7ff f835 	bl	8001064 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffe:	f7ff f831 	bl	8001064 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e1a8      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	4b2b      	ldr	r3, [pc, #172]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201c:	4b28      	ldr	r3, [pc, #160]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4925      	ldr	r1, [pc, #148]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002032:	4b24      	ldr	r3, [pc, #144]	@ (80020c4 <HAL_RCC_OscConfig+0x244>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff f814 	bl	8001064 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002040:	f7ff f810 	bl	8001064 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e187      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	4b1b      	ldr	r3, [pc, #108]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d036      	beq.n	80020d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d016      	beq.n	80020a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_RCC_OscConfig+0x248>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7fe fff4 	bl	8001064 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002080:	f7fe fff0 	bl	8001064 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e167      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x200>
 800209e:	e01b      	b.n	80020d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a0:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <HAL_RCC_OscConfig+0x248>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7fe ffdd 	bl	8001064 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	e00e      	b.n	80020cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ae:	f7fe ffd9 	bl	8001064 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d907      	bls.n	80020cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e150      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
 80020c0:	40023800 	.word	0x40023800
 80020c4:	42470000 	.word	0x42470000
 80020c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	4b88      	ldr	r3, [pc, #544]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ea      	bne.n	80020ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8097 	beq.w	8002214 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ea:	4b81      	ldr	r3, [pc, #516]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10f      	bne.n	8002116 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	4b7d      	ldr	r3, [pc, #500]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	4a7c      	ldr	r2, [pc, #496]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	@ 0x40
 8002106:	4b7a      	ldr	r3, [pc, #488]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b77      	ldr	r3, [pc, #476]	@ (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b74      	ldr	r3, [pc, #464]	@ (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a73      	ldr	r2, [pc, #460]	@ (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7fe ff99 	bl	8001064 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7fe ff95 	bl	8001064 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e10c      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b6a      	ldr	r3, [pc, #424]	@ (80022f4 <HAL_RCC_OscConfig+0x474>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x2ea>
 800215c:	4b64      	ldr	r3, [pc, #400]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002160:	4a63      	ldr	r2, [pc, #396]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6713      	str	r3, [r2, #112]	@ 0x70
 8002168:	e01c      	b.n	80021a4 <HAL_RCC_OscConfig+0x324>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x30c>
 8002172:	4b5f      	ldr	r3, [pc, #380]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002176:	4a5e      	ldr	r2, [pc, #376]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	6713      	str	r3, [r2, #112]	@ 0x70
 800217e:	4b5c      	ldr	r3, [pc, #368]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002182:	4a5b      	ldr	r2, [pc, #364]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6713      	str	r3, [r2, #112]	@ 0x70
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0x324>
 800218c:	4b58      	ldr	r3, [pc, #352]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002190:	4a57      	ldr	r2, [pc, #348]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	6713      	str	r3, [r2, #112]	@ 0x70
 8002198:	4b55      	ldr	r3, [pc, #340]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219c:	4a54      	ldr	r2, [pc, #336]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800219e:	f023 0304 	bic.w	r3, r3, #4
 80021a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d015      	beq.n	80021d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7fe ff5a 	bl	8001064 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7fe ff56 	bl	8001064 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0cb      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ca:	4b49      	ldr	r3, [pc, #292]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0ee      	beq.n	80021b4 <HAL_RCC_OscConfig+0x334>
 80021d6:	e014      	b.n	8002202 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d8:	f7fe ff44 	bl	8001064 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7fe ff40 	bl	8001064 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0b5      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f6:	4b3e      	ldr	r3, [pc, #248]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ee      	bne.n	80021e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002202:	7dfb      	ldrb	r3, [r7, #23]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002208:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	4a38      	ldr	r2, [pc, #224]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800220e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002212:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a1 	beq.w	8002360 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800221e:	4b34      	ldr	r3, [pc, #208]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b08      	cmp	r3, #8
 8002228:	d05c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d141      	bne.n	80022b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <HAL_RCC_OscConfig+0x478>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7fe ff14 	bl	8001064 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe ff10 	bl	8001064 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e087      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69da      	ldr	r2, [r3, #28]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	019b      	lsls	r3, r3, #6
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	3b01      	subs	r3, #1
 8002278:	041b      	lsls	r3, r3, #16
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002280:	061b      	lsls	r3, r3, #24
 8002282:	491b      	ldr	r1, [pc, #108]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002288:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <HAL_RCC_OscConfig+0x478>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe fee9 	bl	8001064 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002296:	f7fe fee5 	bl	8001064 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e05c      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a8:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x416>
 80022b4:	e054      	b.n	8002360 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <HAL_RCC_OscConfig+0x478>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe fed2 	bl	8001064 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe fece 	bl	8001064 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e045      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x444>
 80022e2:	e03d      	b.n	8002360 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e038      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <HAL_RCC_OscConfig+0x4ec>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d028      	beq.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d121      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d11a      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002332:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002334:	4293      	cmp	r3, r2
 8002336:	d111      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	3b01      	subs	r3, #1
 8002346:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d107      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0cc      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b68      	ldr	r3, [pc, #416]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d90c      	bls.n	80023ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b65      	ldr	r3, [pc, #404]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b63      	ldr	r3, [pc, #396]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b8      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c4:	4b59      	ldr	r3, [pc, #356]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a58      	ldr	r2, [pc, #352]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023dc:	4b53      	ldr	r3, [pc, #332]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a52      	ldr	r2, [pc, #328]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b50      	ldr	r3, [pc, #320]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	494d      	ldr	r1, [pc, #308]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d044      	beq.n	8002490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b47      	ldr	r3, [pc, #284]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d119      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e07f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d003      	beq.n	800242e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242a:	2b03      	cmp	r3, #3
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	4b3f      	ldr	r3, [pc, #252]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e06f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243e:	4b3b      	ldr	r3, [pc, #236]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e067      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b37      	ldr	r3, [pc, #220]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4934      	ldr	r1, [pc, #208]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002460:	f7fe fe00 	bl	8001064 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7fe fdfc 	bl	8001064 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e04f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b2b      	ldr	r3, [pc, #172]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002490:	4b25      	ldr	r3, [pc, #148]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d20c      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b22      	ldr	r3, [pc, #136]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b20      	ldr	r3, [pc, #128]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e032      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4916      	ldr	r1, [pc, #88]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e2:	4b12      	ldr	r3, [pc, #72]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	490e      	ldr	r1, [pc, #56]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024f6:	f000 f821 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	490a      	ldr	r1, [pc, #40]	@ (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	5ccb      	ldrb	r3, [r1, r3]
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	4a09      	ldr	r2, [pc, #36]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fc40 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00
 800252c:	40023800 	.word	0x40023800
 8002530:	080062e8 	.word	0x080062e8
 8002534:	20000000 	.word	0x20000000
 8002538:	20000004 	.word	0x20000004

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002540:	b094      	sub	sp, #80	@ 0x50
 8002542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	647b      	str	r3, [r7, #68]	@ 0x44
 8002548:	2300      	movs	r3, #0
 800254a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800254c:	2300      	movs	r3, #0
 800254e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002554:	4b79      	ldr	r3, [pc, #484]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b08      	cmp	r3, #8
 800255e:	d00d      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x40>
 8002560:	2b08      	cmp	r3, #8
 8002562:	f200 80e1 	bhi.w	8002728 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x34>
 800256a:	2b04      	cmp	r3, #4
 800256c:	d003      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x3a>
 800256e:	e0db      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002570:	4b73      	ldr	r3, [pc, #460]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x204>)
 8002572:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002574:	e0db      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002576:	4b73      	ldr	r3, [pc, #460]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x208>)
 8002578:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800257a:	e0d8      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800257c:	4b6f      	ldr	r3, [pc, #444]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002584:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002586:	4b6d      	ldr	r3, [pc, #436]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d063      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002592:	4b6a      	ldr	r3, [pc, #424]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	2200      	movs	r2, #0
 800259a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800259c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800259e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025a6:	2300      	movs	r3, #0
 80025a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025ae:	4622      	mov	r2, r4
 80025b0:	462b      	mov	r3, r5
 80025b2:	f04f 0000 	mov.w	r0, #0
 80025b6:	f04f 0100 	mov.w	r1, #0
 80025ba:	0159      	lsls	r1, r3, #5
 80025bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c0:	0150      	lsls	r0, r2, #5
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4621      	mov	r1, r4
 80025c8:	1a51      	subs	r1, r2, r1
 80025ca:	6139      	str	r1, [r7, #16]
 80025cc:	4629      	mov	r1, r5
 80025ce:	eb63 0301 	sbc.w	r3, r3, r1
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025e0:	4659      	mov	r1, fp
 80025e2:	018b      	lsls	r3, r1, #6
 80025e4:	4651      	mov	r1, sl
 80025e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ea:	4651      	mov	r1, sl
 80025ec:	018a      	lsls	r2, r1, #6
 80025ee:	4651      	mov	r1, sl
 80025f0:	ebb2 0801 	subs.w	r8, r2, r1
 80025f4:	4659      	mov	r1, fp
 80025f6:	eb63 0901 	sbc.w	r9, r3, r1
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800260a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800260e:	4690      	mov	r8, r2
 8002610:	4699      	mov	r9, r3
 8002612:	4623      	mov	r3, r4
 8002614:	eb18 0303 	adds.w	r3, r8, r3
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	462b      	mov	r3, r5
 800261c:	eb49 0303 	adc.w	r3, r9, r3
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800262e:	4629      	mov	r1, r5
 8002630:	024b      	lsls	r3, r1, #9
 8002632:	4621      	mov	r1, r4
 8002634:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002638:	4621      	mov	r1, r4
 800263a:	024a      	lsls	r2, r1, #9
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002642:	2200      	movs	r2, #0
 8002644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002648:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800264c:	f7fd fe28 	bl	80002a0 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4613      	mov	r3, r2
 8002656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002658:	e058      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265a:	4b38      	ldr	r3, [pc, #224]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	099b      	lsrs	r3, r3, #6
 8002660:	2200      	movs	r2, #0
 8002662:	4618      	mov	r0, r3
 8002664:	4611      	mov	r1, r2
 8002666:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800266a:	623b      	str	r3, [r7, #32]
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002670:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002674:	4642      	mov	r2, r8
 8002676:	464b      	mov	r3, r9
 8002678:	f04f 0000 	mov.w	r0, #0
 800267c:	f04f 0100 	mov.w	r1, #0
 8002680:	0159      	lsls	r1, r3, #5
 8002682:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002686:	0150      	lsls	r0, r2, #5
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4641      	mov	r1, r8
 800268e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002692:	4649      	mov	r1, r9
 8002694:	eb63 0b01 	sbc.w	fp, r3, r1
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026ac:	ebb2 040a 	subs.w	r4, r2, sl
 80026b0:	eb63 050b 	sbc.w	r5, r3, fp
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	00eb      	lsls	r3, r5, #3
 80026be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c2:	00e2      	lsls	r2, r4, #3
 80026c4:	4614      	mov	r4, r2
 80026c6:	461d      	mov	r5, r3
 80026c8:	4643      	mov	r3, r8
 80026ca:	18e3      	adds	r3, r4, r3
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	464b      	mov	r3, r9
 80026d0:	eb45 0303 	adc.w	r3, r5, r3
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026e2:	4629      	mov	r1, r5
 80026e4:	028b      	lsls	r3, r1, #10
 80026e6:	4621      	mov	r1, r4
 80026e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026ec:	4621      	mov	r1, r4
 80026ee:	028a      	lsls	r2, r1, #10
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026f6:	2200      	movs	r2, #0
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	61fa      	str	r2, [r7, #28]
 80026fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002700:	f7fd fdce 	bl	80002a0 <__aeabi_uldivmod>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4613      	mov	r3, r2
 800270a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800270c:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	3301      	adds	r3, #1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800271c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800271e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002726:	e002      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x204>)
 800272a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800272c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002730:	4618      	mov	r0, r3
 8002732:	3750      	adds	r7, #80	@ 0x50
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	00f42400 	.word	0x00f42400
 8002744:	007a1200 	.word	0x007a1200

08002748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800274c:	4b03      	ldr	r3, [pc, #12]	@ (800275c <HAL_RCC_GetHCLKFreq+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000000 	.word	0x20000000

08002760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002764:	f7ff fff0 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0a9b      	lsrs	r3, r3, #10
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	@ (8002784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	080062f8 	.word	0x080062f8

08002788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800278c:	f7ff ffdc 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	0b5b      	lsrs	r3, r3, #13
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4903      	ldr	r1, [pc, #12]	@ (80027ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	080062f8 	.word	0x080062f8

080027b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	220f      	movs	r2, #15
 80027be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027c0:	4b12      	ldr	r3, [pc, #72]	@ (800280c <HAL_RCC_GetClockConfig+0x5c>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027cc:	4b0f      	ldr	r3, [pc, #60]	@ (800280c <HAL_RCC_GetClockConfig+0x5c>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027d8:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <HAL_RCC_GetClockConfig+0x5c>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027e4:	4b09      	ldr	r3, [pc, #36]	@ (800280c <HAL_RCC_GetClockConfig+0x5c>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	08db      	lsrs	r3, r3, #3
 80027ea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027f2:	4b07      	ldr	r3, [pc, #28]	@ (8002810 <HAL_RCC_GetClockConfig+0x60>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 020f 	and.w	r2, r3, #15
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	601a      	str	r2, [r3, #0]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800
 8002810:	40023c00 	.word	0x40023c00

08002814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e041      	b.n	80028aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f839 	bl	80028b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3304      	adds	r3, #4
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f000 f9c0 	bl	8002bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d001      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e04e      	b.n	800297e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a23      	ldr	r2, [pc, #140]	@ (800298c <HAL_TIM_Base_Start_IT+0xc4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d022      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290a:	d01d      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1f      	ldr	r2, [pc, #124]	@ (8002990 <HAL_TIM_Base_Start_IT+0xc8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d018      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1e      	ldr	r2, [pc, #120]	@ (8002994 <HAL_TIM_Base_Start_IT+0xcc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1c      	ldr	r2, [pc, #112]	@ (8002998 <HAL_TIM_Base_Start_IT+0xd0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00e      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1b      	ldr	r2, [pc, #108]	@ (800299c <HAL_TIM_Base_Start_IT+0xd4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d009      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a19      	ldr	r2, [pc, #100]	@ (80029a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d004      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a18      	ldr	r2, [pc, #96]	@ (80029a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d111      	bne.n	800296c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b06      	cmp	r3, #6
 8002958:	d010      	beq.n	800297c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296a:	e007      	b.n	800297c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40010000 	.word	0x40010000
 8002990:	40000400 	.word	0x40000400
 8002994:	40000800 	.word	0x40000800
 8002998:	40000c00 	.word	0x40000c00
 800299c:	40010400 	.word	0x40010400
 80029a0:	40014000 	.word	0x40014000
 80029a4:	40001800 	.word	0x40001800

080029a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d020      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01b      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0202 	mvn.w	r2, #2
 80029dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f8d2 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f8c4 	bl	8002b88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f8d5 	bl	8002bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d020      	beq.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0204 	mvn.w	r2, #4
 8002a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f8ac 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f89e 	bl	8002b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f8af 	bl	8002bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d020      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01b      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0208 	mvn.w	r2, #8
 8002a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2204      	movs	r2, #4
 8002a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f886 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f878 	bl	8002b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f889 	bl	8002bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d020      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01b      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0210 	mvn.w	r2, #16
 8002ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f860 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f852 	bl	8002b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f863 	bl	8002bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00c      	beq.n	8002b14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0201 	mvn.w	r2, #1
 8002b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fd ff98 	bl	8000a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00c      	beq.n	8002b38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f906 	bl	8002d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00c      	beq.n	8002b5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f834 	bl	8002bc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00c      	beq.n	8002b80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0220 	mvn.w	r2, #32
 8002b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8d8 	bl	8002d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a46      	ldr	r2, [pc, #280]	@ (8002d04 <TIM_Base_SetConfig+0x12c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d013      	beq.n	8002c18 <TIM_Base_SetConfig+0x40>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf6:	d00f      	beq.n	8002c18 <TIM_Base_SetConfig+0x40>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a43      	ldr	r2, [pc, #268]	@ (8002d08 <TIM_Base_SetConfig+0x130>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00b      	beq.n	8002c18 <TIM_Base_SetConfig+0x40>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a42      	ldr	r2, [pc, #264]	@ (8002d0c <TIM_Base_SetConfig+0x134>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d007      	beq.n	8002c18 <TIM_Base_SetConfig+0x40>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a41      	ldr	r2, [pc, #260]	@ (8002d10 <TIM_Base_SetConfig+0x138>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d003      	beq.n	8002c18 <TIM_Base_SetConfig+0x40>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a40      	ldr	r2, [pc, #256]	@ (8002d14 <TIM_Base_SetConfig+0x13c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d108      	bne.n	8002c2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a35      	ldr	r2, [pc, #212]	@ (8002d04 <TIM_Base_SetConfig+0x12c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d02b      	beq.n	8002c8a <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c38:	d027      	beq.n	8002c8a <TIM_Base_SetConfig+0xb2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a32      	ldr	r2, [pc, #200]	@ (8002d08 <TIM_Base_SetConfig+0x130>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d023      	beq.n	8002c8a <TIM_Base_SetConfig+0xb2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a31      	ldr	r2, [pc, #196]	@ (8002d0c <TIM_Base_SetConfig+0x134>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01f      	beq.n	8002c8a <TIM_Base_SetConfig+0xb2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a30      	ldr	r2, [pc, #192]	@ (8002d10 <TIM_Base_SetConfig+0x138>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01b      	beq.n	8002c8a <TIM_Base_SetConfig+0xb2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a2f      	ldr	r2, [pc, #188]	@ (8002d14 <TIM_Base_SetConfig+0x13c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d017      	beq.n	8002c8a <TIM_Base_SetConfig+0xb2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002d18 <TIM_Base_SetConfig+0x140>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <TIM_Base_SetConfig+0xb2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a2d      	ldr	r2, [pc, #180]	@ (8002d1c <TIM_Base_SetConfig+0x144>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00f      	beq.n	8002c8a <TIM_Base_SetConfig+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a2c      	ldr	r2, [pc, #176]	@ (8002d20 <TIM_Base_SetConfig+0x148>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00b      	beq.n	8002c8a <TIM_Base_SetConfig+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a2b      	ldr	r2, [pc, #172]	@ (8002d24 <TIM_Base_SetConfig+0x14c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d007      	beq.n	8002c8a <TIM_Base_SetConfig+0xb2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a2a      	ldr	r2, [pc, #168]	@ (8002d28 <TIM_Base_SetConfig+0x150>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d003      	beq.n	8002c8a <TIM_Base_SetConfig+0xb2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a29      	ldr	r2, [pc, #164]	@ (8002d2c <TIM_Base_SetConfig+0x154>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d108      	bne.n	8002c9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a10      	ldr	r2, [pc, #64]	@ (8002d04 <TIM_Base_SetConfig+0x12c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <TIM_Base_SetConfig+0xf8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a12      	ldr	r2, [pc, #72]	@ (8002d14 <TIM_Base_SetConfig+0x13c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d103      	bne.n	8002cd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d105      	bne.n	8002cf6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f023 0201 	bic.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	611a      	str	r2, [r3, #16]
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40010000 	.word	0x40010000
 8002d08:	40000400 	.word	0x40000400
 8002d0c:	40000800 	.word	0x40000800
 8002d10:	40000c00 	.word	0x40000c00
 8002d14:	40010400 	.word	0x40010400
 8002d18:	40014000 	.word	0x40014000
 8002d1c:	40014400 	.word	0x40014400
 8002d20:	40014800 	.word	0x40014800
 8002d24:	40001800 	.word	0x40001800
 8002d28:	40001c00 	.word	0x40001c00
 8002d2c:	40002000 	.word	0x40002000

08002d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e042      	b.n	8002df0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fd ff6a 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2224      	movs	r2, #36	@ 0x24
 8002d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f82b 	bl	8002df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695a      	ldr	r2, [r3, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dfc:	b0c0      	sub	sp, #256	@ 0x100
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e14:	68d9      	ldr	r1, [r3, #12]
 8002e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	ea40 0301 	orr.w	r3, r0, r1
 8002e20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e50:	f021 010c 	bic.w	r1, r1, #12
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e72:	6999      	ldr	r1, [r3, #24]
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	ea40 0301 	orr.w	r3, r0, r1
 8002e7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4b8f      	ldr	r3, [pc, #572]	@ (80030c4 <UART_SetConfig+0x2cc>)
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d005      	beq.n	8002e98 <UART_SetConfig+0xa0>
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b8d      	ldr	r3, [pc, #564]	@ (80030c8 <UART_SetConfig+0x2d0>)
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d104      	bne.n	8002ea2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e98:	f7ff fc76 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 8002e9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ea0:	e003      	b.n	8002eaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ea2:	f7ff fc5d 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8002ea6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eb4:	f040 810c 	bne.w	80030d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ec2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ec6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002eca:	4622      	mov	r2, r4
 8002ecc:	462b      	mov	r3, r5
 8002ece:	1891      	adds	r1, r2, r2
 8002ed0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ed2:	415b      	adcs	r3, r3
 8002ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ed6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002eda:	4621      	mov	r1, r4
 8002edc:	eb12 0801 	adds.w	r8, r2, r1
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	eb43 0901 	adc.w	r9, r3, r1
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efa:	4690      	mov	r8, r2
 8002efc:	4699      	mov	r9, r3
 8002efe:	4623      	mov	r3, r4
 8002f00:	eb18 0303 	adds.w	r3, r8, r3
 8002f04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f08:	462b      	mov	r3, r5
 8002f0a:	eb49 0303 	adc.w	r3, r9, r3
 8002f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f26:	460b      	mov	r3, r1
 8002f28:	18db      	adds	r3, r3, r3
 8002f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	eb42 0303 	adc.w	r3, r2, r3
 8002f32:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f3c:	f7fd f9b0 	bl	80002a0 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4b61      	ldr	r3, [pc, #388]	@ (80030cc <UART_SetConfig+0x2d4>)
 8002f46:	fba3 2302 	umull	r2, r3, r3, r2
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	011c      	lsls	r4, r3, #4
 8002f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f60:	4642      	mov	r2, r8
 8002f62:	464b      	mov	r3, r9
 8002f64:	1891      	adds	r1, r2, r2
 8002f66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f68:	415b      	adcs	r3, r3
 8002f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f70:	4641      	mov	r1, r8
 8002f72:	eb12 0a01 	adds.w	sl, r2, r1
 8002f76:	4649      	mov	r1, r9
 8002f78:	eb43 0b01 	adc.w	fp, r3, r1
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f90:	4692      	mov	sl, r2
 8002f92:	469b      	mov	fp, r3
 8002f94:	4643      	mov	r3, r8
 8002f96:	eb1a 0303 	adds.w	r3, sl, r3
 8002f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f9e:	464b      	mov	r3, r9
 8002fa0:	eb4b 0303 	adc.w	r3, fp, r3
 8002fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	18db      	adds	r3, r3, r3
 8002fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	eb42 0303 	adc.w	r3, r2, r3
 8002fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fd2:	f7fd f965 	bl	80002a0 <__aeabi_uldivmod>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80030cc <UART_SetConfig+0x2d4>)
 8002fde:	fba3 2301 	umull	r2, r3, r3, r1
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2264      	movs	r2, #100	@ 0x64
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	1acb      	subs	r3, r1, r3
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ff2:	4b36      	ldr	r3, [pc, #216]	@ (80030cc <UART_SetConfig+0x2d4>)
 8002ff4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003000:	441c      	add	r4, r3
 8003002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003006:	2200      	movs	r2, #0
 8003008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800300c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003010:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003014:	4642      	mov	r2, r8
 8003016:	464b      	mov	r3, r9
 8003018:	1891      	adds	r1, r2, r2
 800301a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800301c:	415b      	adcs	r3, r3
 800301e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003020:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003024:	4641      	mov	r1, r8
 8003026:	1851      	adds	r1, r2, r1
 8003028:	6339      	str	r1, [r7, #48]	@ 0x30
 800302a:	4649      	mov	r1, r9
 800302c:	414b      	adcs	r3, r1
 800302e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800303c:	4659      	mov	r1, fp
 800303e:	00cb      	lsls	r3, r1, #3
 8003040:	4651      	mov	r1, sl
 8003042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003046:	4651      	mov	r1, sl
 8003048:	00ca      	lsls	r2, r1, #3
 800304a:	4610      	mov	r0, r2
 800304c:	4619      	mov	r1, r3
 800304e:	4603      	mov	r3, r0
 8003050:	4642      	mov	r2, r8
 8003052:	189b      	adds	r3, r3, r2
 8003054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003058:	464b      	mov	r3, r9
 800305a:	460a      	mov	r2, r1
 800305c:	eb42 0303 	adc.w	r3, r2, r3
 8003060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003070:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003074:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003078:	460b      	mov	r3, r1
 800307a:	18db      	adds	r3, r3, r3
 800307c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800307e:	4613      	mov	r3, r2
 8003080:	eb42 0303 	adc.w	r3, r2, r3
 8003084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800308a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800308e:	f7fd f907 	bl	80002a0 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <UART_SetConfig+0x2d4>)
 8003098:	fba3 1302 	umull	r1, r3, r3, r2
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	2164      	movs	r1, #100	@ 0x64
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	3332      	adds	r3, #50	@ 0x32
 80030aa:	4a08      	ldr	r2, [pc, #32]	@ (80030cc <UART_SetConfig+0x2d4>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	f003 0207 	and.w	r2, r3, #7
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4422      	add	r2, r4
 80030be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030c0:	e106      	b.n	80032d0 <UART_SetConfig+0x4d8>
 80030c2:	bf00      	nop
 80030c4:	40011000 	.word	0x40011000
 80030c8:	40011400 	.word	0x40011400
 80030cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030d4:	2200      	movs	r2, #0
 80030d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030e2:	4642      	mov	r2, r8
 80030e4:	464b      	mov	r3, r9
 80030e6:	1891      	adds	r1, r2, r2
 80030e8:	6239      	str	r1, [r7, #32]
 80030ea:	415b      	adcs	r3, r3
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030f2:	4641      	mov	r1, r8
 80030f4:	1854      	adds	r4, r2, r1
 80030f6:	4649      	mov	r1, r9
 80030f8:	eb43 0501 	adc.w	r5, r3, r1
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	00eb      	lsls	r3, r5, #3
 8003106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800310a:	00e2      	lsls	r2, r4, #3
 800310c:	4614      	mov	r4, r2
 800310e:	461d      	mov	r5, r3
 8003110:	4643      	mov	r3, r8
 8003112:	18e3      	adds	r3, r4, r3
 8003114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003118:	464b      	mov	r3, r9
 800311a:	eb45 0303 	adc.w	r3, r5, r3
 800311e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800312e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800313e:	4629      	mov	r1, r5
 8003140:	008b      	lsls	r3, r1, #2
 8003142:	4621      	mov	r1, r4
 8003144:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003148:	4621      	mov	r1, r4
 800314a:	008a      	lsls	r2, r1, #2
 800314c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003150:	f7fd f8a6 	bl	80002a0 <__aeabi_uldivmod>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4b60      	ldr	r3, [pc, #384]	@ (80032dc <UART_SetConfig+0x4e4>)
 800315a:	fba3 2302 	umull	r2, r3, r3, r2
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	011c      	lsls	r4, r3, #4
 8003162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003166:	2200      	movs	r2, #0
 8003168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800316c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003170:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003174:	4642      	mov	r2, r8
 8003176:	464b      	mov	r3, r9
 8003178:	1891      	adds	r1, r2, r2
 800317a:	61b9      	str	r1, [r7, #24]
 800317c:	415b      	adcs	r3, r3
 800317e:	61fb      	str	r3, [r7, #28]
 8003180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003184:	4641      	mov	r1, r8
 8003186:	1851      	adds	r1, r2, r1
 8003188:	6139      	str	r1, [r7, #16]
 800318a:	4649      	mov	r1, r9
 800318c:	414b      	adcs	r3, r1
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800319c:	4659      	mov	r1, fp
 800319e:	00cb      	lsls	r3, r1, #3
 80031a0:	4651      	mov	r1, sl
 80031a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031a6:	4651      	mov	r1, sl
 80031a8:	00ca      	lsls	r2, r1, #3
 80031aa:	4610      	mov	r0, r2
 80031ac:	4619      	mov	r1, r3
 80031ae:	4603      	mov	r3, r0
 80031b0:	4642      	mov	r2, r8
 80031b2:	189b      	adds	r3, r3, r2
 80031b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031b8:	464b      	mov	r3, r9
 80031ba:	460a      	mov	r2, r1
 80031bc:	eb42 0303 	adc.w	r3, r2, r3
 80031c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031dc:	4649      	mov	r1, r9
 80031de:	008b      	lsls	r3, r1, #2
 80031e0:	4641      	mov	r1, r8
 80031e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031e6:	4641      	mov	r1, r8
 80031e8:	008a      	lsls	r2, r1, #2
 80031ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031ee:	f7fd f857 	bl	80002a0 <__aeabi_uldivmod>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	4b38      	ldr	r3, [pc, #224]	@ (80032dc <UART_SetConfig+0x4e4>)
 80031fa:	fba3 2301 	umull	r2, r3, r3, r1
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	2264      	movs	r2, #100	@ 0x64
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	1acb      	subs	r3, r1, r3
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	3332      	adds	r3, #50	@ 0x32
 800320c:	4a33      	ldr	r2, [pc, #204]	@ (80032dc <UART_SetConfig+0x4e4>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003218:	441c      	add	r4, r3
 800321a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800321e:	2200      	movs	r2, #0
 8003220:	673b      	str	r3, [r7, #112]	@ 0x70
 8003222:	677a      	str	r2, [r7, #116]	@ 0x74
 8003224:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003228:	4642      	mov	r2, r8
 800322a:	464b      	mov	r3, r9
 800322c:	1891      	adds	r1, r2, r2
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	415b      	adcs	r3, r3
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003238:	4641      	mov	r1, r8
 800323a:	1851      	adds	r1, r2, r1
 800323c:	6039      	str	r1, [r7, #0]
 800323e:	4649      	mov	r1, r9
 8003240:	414b      	adcs	r3, r1
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003250:	4659      	mov	r1, fp
 8003252:	00cb      	lsls	r3, r1, #3
 8003254:	4651      	mov	r1, sl
 8003256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800325a:	4651      	mov	r1, sl
 800325c:	00ca      	lsls	r2, r1, #3
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	4603      	mov	r3, r0
 8003264:	4642      	mov	r2, r8
 8003266:	189b      	adds	r3, r3, r2
 8003268:	66bb      	str	r3, [r7, #104]	@ 0x68
 800326a:	464b      	mov	r3, r9
 800326c:	460a      	mov	r2, r1
 800326e:	eb42 0303 	adc.w	r3, r2, r3
 8003272:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	663b      	str	r3, [r7, #96]	@ 0x60
 800327e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800328c:	4649      	mov	r1, r9
 800328e:	008b      	lsls	r3, r1, #2
 8003290:	4641      	mov	r1, r8
 8003292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003296:	4641      	mov	r1, r8
 8003298:	008a      	lsls	r2, r1, #2
 800329a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800329e:	f7fc ffff 	bl	80002a0 <__aeabi_uldivmod>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4b0d      	ldr	r3, [pc, #52]	@ (80032dc <UART_SetConfig+0x4e4>)
 80032a8:	fba3 1302 	umull	r1, r3, r3, r2
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	2164      	movs	r1, #100	@ 0x64
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	3332      	adds	r3, #50	@ 0x32
 80032ba:	4a08      	ldr	r2, [pc, #32]	@ (80032dc <UART_SetConfig+0x4e4>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	f003 020f 	and.w	r2, r3, #15
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4422      	add	r2, r4
 80032ce:	609a      	str	r2, [r3, #8]
}
 80032d0:	bf00      	nop
 80032d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032d6:	46bd      	mov	sp, r7
 80032d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032dc:	51eb851f 	.word	0x51eb851f

080032e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032e0:	b084      	sub	sp, #16
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	f107 001c 	add.w	r0, r7, #28
 80032ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d123      	bne.n	8003342 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800330e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003322:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003326:	2b01      	cmp	r3, #1
 8003328:	d105      	bne.n	8003336 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 faa0 	bl	800387c <USB_CoreReset>
 800333c:	4603      	mov	r3, r0
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	e01b      	b.n	800337a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fa94 	bl	800387c <USB_CoreReset>
 8003354:	4603      	mov	r3, r0
 8003356:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003358:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	639a      	str	r2, [r3, #56]	@ 0x38
 800336c:	e005      	b.n	800337a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003372:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800337a:	7fbb      	ldrb	r3, [r7, #30]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d10b      	bne.n	8003398 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f043 0206 	orr.w	r2, r3, #6
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f043 0220 	orr.w	r2, r3, #32
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003398:	7bfb      	ldrb	r3, [r7, #15]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033a4:	b004      	add	sp, #16
 80033a6:	4770      	bx	lr

080033a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f023 0201 	bic.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b084      	sub	sp, #16
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d115      	bne.n	8003418 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80033f8:	200a      	movs	r0, #10
 80033fa:	f7fd fe3f 	bl	800107c <HAL_Delay>
      ms += 10U;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	330a      	adds	r3, #10
 8003402:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fa2b 	bl	8003860 <USB_GetMode>
 800340a:	4603      	mov	r3, r0
 800340c:	2b01      	cmp	r3, #1
 800340e:	d01e      	beq.n	800344e <USB_SetCurrentMode+0x84>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2bc7      	cmp	r3, #199	@ 0xc7
 8003414:	d9f0      	bls.n	80033f8 <USB_SetCurrentMode+0x2e>
 8003416:	e01a      	b.n	800344e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d115      	bne.n	800344a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800342a:	200a      	movs	r0, #10
 800342c:	f7fd fe26 	bl	800107c <HAL_Delay>
      ms += 10U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	330a      	adds	r3, #10
 8003434:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fa12 	bl	8003860 <USB_GetMode>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <USB_SetCurrentMode+0x84>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2bc7      	cmp	r3, #199	@ 0xc7
 8003446:	d9f0      	bls.n	800342a <USB_SetCurrentMode+0x60>
 8003448:	e001      	b.n	800344e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e005      	b.n	800345a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2bc8      	cmp	r3, #200	@ 0xc8
 8003452:	d101      	bne.n	8003458 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003464:	b084      	sub	sp, #16
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	e009      	b.n	8003498 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	3340      	adds	r3, #64	@ 0x40
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	2200      	movs	r2, #0
 8003490:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	3301      	adds	r3, #1
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b0e      	cmp	r3, #14
 800349c:	d9f2      	bls.n	8003484 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800349e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11c      	bne.n	80034e0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034b4:	f043 0302 	orr.w	r3, r3, #2
 80034b8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80034de:	e00b      	b.n	80034f8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80034fe:	461a      	mov	r2, r3
 8003500:	2300      	movs	r3, #0
 8003502:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003504:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003508:	2b01      	cmp	r3, #1
 800350a:	d10d      	bne.n	8003528 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800350c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003514:	2100      	movs	r1, #0
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f968 	bl	80037ec <USB_SetDevSpeed>
 800351c:	e008      	b.n	8003530 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800351e:	2101      	movs	r1, #1
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f963 	bl	80037ec <USB_SetDevSpeed>
 8003526:	e003      	b.n	8003530 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003528:	2103      	movs	r1, #3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f95e 	bl	80037ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003530:	2110      	movs	r1, #16
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f8fa 	bl	800372c <USB_FlushTxFifo>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f924 	bl	8003790 <USB_FlushRxFifo>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003558:	461a      	mov	r2, r3
 800355a:	2300      	movs	r3, #0
 800355c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003564:	461a      	mov	r2, r3
 8003566:	2300      	movs	r3, #0
 8003568:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003570:	461a      	mov	r2, r3
 8003572:	2300      	movs	r3, #0
 8003574:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	e043      	b.n	8003604 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800358e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003592:	d118      	bne.n	80035c6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10a      	bne.n	80035b0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035a6:	461a      	mov	r2, r3
 80035a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e013      	b.n	80035d8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035bc:	461a      	mov	r2, r3
 80035be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	e008      	b.n	80035d8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d2:	461a      	mov	r2, r3
 80035d4:	2300      	movs	r3, #0
 80035d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e4:	461a      	mov	r2, r3
 80035e6:	2300      	movs	r3, #0
 80035e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f6:	461a      	mov	r2, r3
 80035f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	3301      	adds	r3, #1
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003608:	461a      	mov	r2, r3
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4293      	cmp	r3, r2
 800360e:	d3b5      	bcc.n	800357c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	e043      	b.n	800369e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003628:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800362c:	d118      	bne.n	8003660 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003640:	461a      	mov	r2, r3
 8003642:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	e013      	b.n	8003672 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003656:	461a      	mov	r2, r3
 8003658:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e008      	b.n	8003672 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800366c:	461a      	mov	r2, r3
 800366e:	2300      	movs	r3, #0
 8003670:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4413      	add	r3, r2
 800367a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800367e:	461a      	mov	r2, r3
 8003680:	2300      	movs	r3, #0
 8003682:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003690:	461a      	mov	r2, r3
 8003692:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003696:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	3301      	adds	r3, #1
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80036a2:	461a      	mov	r2, r3
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d3b5      	bcc.n	8003616 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80036ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80036cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f043 0210 	orr.w	r2, r3, #16
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699a      	ldr	r2, [r3, #24]
 80036e4:	4b10      	ldr	r3, [pc, #64]	@ (8003728 <USB_DevInit+0x2c4>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80036ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f043 0208 	orr.w	r2, r3, #8
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003700:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003704:	2b01      	cmp	r3, #1
 8003706:	d107      	bne.n	8003718 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003710:	f043 0304 	orr.w	r3, r3, #4
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003718:	7dfb      	ldrb	r3, [r7, #23]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003724:	b004      	add	sp, #16
 8003726:	4770      	bx	lr
 8003728:	803c3800 	.word	0x803c3800

0800372c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3301      	adds	r3, #1
 800373e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003746:	d901      	bls.n	800374c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e01b      	b.n	8003784 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	daf2      	bge.n	800373a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	019b      	lsls	r3, r3, #6
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	3301      	adds	r3, #1
 8003768:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003770:	d901      	bls.n	8003776 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e006      	b.n	8003784 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b20      	cmp	r3, #32
 8003780:	d0f0      	beq.n	8003764 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	3301      	adds	r3, #1
 80037a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037a8:	d901      	bls.n	80037ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e018      	b.n	80037e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	daf2      	bge.n	800379c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2210      	movs	r2, #16
 80037be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3301      	adds	r3, #1
 80037c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037cc:	d901      	bls.n	80037d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e006      	b.n	80037e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d0f0      	beq.n	80037c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	68f9      	ldr	r1, [r7, #12]
 8003808:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800380c:	4313      	orrs	r3, r2
 800380e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800381e:	b480      	push	{r7}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003838:	f023 0303 	bic.w	r3, r3, #3
 800383c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800384c:	f043 0302 	orr.w	r3, r3, #2
 8003850:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f003 0301 	and.w	r3, r3, #1
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3301      	adds	r3, #1
 800388c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003894:	d901      	bls.n	800389a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e01b      	b.n	80038d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	daf2      	bge.n	8003888 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f043 0201 	orr.w	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3301      	adds	r3, #1
 80038b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80038be:	d901      	bls.n	80038c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e006      	b.n	80038d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d0f0      	beq.n	80038b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	4603      	mov	r3, r0
 80038e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80038ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038f0:	2b84      	cmp	r3, #132	@ 0x84
 80038f2:	d005      	beq.n	8003900 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80038f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	3303      	adds	r3, #3
 80038fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003900:	68fb      	ldr	r3, [r7, #12]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003912:	f000 fb03 	bl	8003f1c <vTaskStartScheduler>
  
  return osOK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd80      	pop	{r7, pc}

0800391c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800391c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800391e:	b087      	sub	sp, #28
 8003920:	af02      	add	r7, sp, #8
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685c      	ldr	r4, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003932:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff ffcf 	bl	80038de <makeFreeRtosPriority>
 8003940:	4602      	mov	r2, r0
 8003942:	f107 030c 	add.w	r3, r7, #12
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	9200      	str	r2, [sp, #0]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	4632      	mov	r2, r6
 800394e:	4629      	mov	r1, r5
 8003950:	4620      	mov	r0, r4
 8003952:	f000 f8d2 	bl	8003afa <xTaskCreate>
 8003956:	4603      	mov	r3, r0
 8003958:	2b01      	cmp	r3, #1
 800395a:	d001      	beq.n	8003960 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	e000      	b.n	8003962 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003960:	68fb      	ldr	r3, [r7, #12]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800396a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <osDelay+0x16>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	e000      	b.n	8003982 <osDelay+0x18>
 8003980:	2301      	movs	r3, #1
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fa94 	bl	8003eb0 <vTaskDelay>
  
  return osOK;
 8003988:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f103 0208 	add.w	r2, r3, #8
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f04f 32ff 	mov.w	r2, #4294967295
 80039aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f103 0208 	add.w	r2, r3, #8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f103 0208 	add.w	r2, r3, #8
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	601a      	str	r2, [r3, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4a:	d103      	bne.n	8003a54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	e00c      	b.n	8003a6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3308      	adds	r3, #8
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e002      	b.n	8003a62 <vListInsert+0x2e>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d2f6      	bcs.n	8003a5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	601a      	str	r2, [r3, #0]
}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b085      	sub	sp, #20
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6892      	ldr	r2, [r2, #8]
 8003abc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6852      	ldr	r2, [r2, #4]
 8003ac6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d103      	bne.n	8003ada <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	1e5a      	subs	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b08c      	sub	sp, #48	@ 0x30
 8003afe:	af04      	add	r7, sp, #16
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 ff52 	bl	80049b8 <pvPortMalloc>
 8003b14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b1c:	20a0      	movs	r0, #160	@ 0xa0
 8003b1e:	f000 ff4b 	bl	80049b8 <pvPortMalloc>
 8003b22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b30:	e005      	b.n	8003b3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b32:	6978      	ldr	r0, [r7, #20]
 8003b34:	f001 f80e 	bl	8004b54 <vPortFree>
 8003b38:	e001      	b.n	8003b3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d013      	beq.n	8003b6c <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b44:	88fa      	ldrh	r2, [r7, #6]
 8003b46:	2300      	movs	r3, #0
 8003b48:	9303      	str	r3, [sp, #12]
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	9302      	str	r3, [sp, #8]
 8003b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b50:	9301      	str	r3, [sp, #4]
 8003b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f80e 	bl	8003b7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b60:	69f8      	ldr	r0, [r7, #28]
 8003b62:	f000 f8ab 	bl	8003cbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b66:	2301      	movs	r3, #1
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	e002      	b.n	8003b72 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b72:	69bb      	ldr	r3, [r7, #24]
	}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3720      	adds	r7, #32
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b94:	3b01      	subs	r3, #1
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f023 0307 	bic.w	r3, r3, #7
 8003ba2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	617b      	str	r3, [r7, #20]
}
 8003bc0:	bf00      	nop
 8003bc2:	bf00      	nop
 8003bc4:	e7fd      	b.n	8003bc2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d01f      	beq.n	8003c0c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
 8003bd0:	e012      	b.n	8003bf8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	7819      	ldrb	r1, [r3, #0]
 8003bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	3334      	adds	r3, #52	@ 0x34
 8003be2:	460a      	mov	r2, r1
 8003be4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d006      	beq.n	8003c00 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	61fb      	str	r3, [r7, #28]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	2b0f      	cmp	r3, #15
 8003bfc:	d9e9      	bls.n	8003bd2 <prvInitialiseNewTask+0x56>
 8003bfe:	e000      	b.n	8003c02 <prvInitialiseNewTask+0x86>
			{
				break;
 8003c00:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c0a:	e003      	b.n	8003c14 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c16:	2b06      	cmp	r3, #6
 8003c18:	d901      	bls.n	8003c1e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c1a:	2306      	movs	r3, #6
 8003c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c22:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c28:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c32:	3304      	adds	r3, #4
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fecc 	bl	80039d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3c:	3318      	adds	r3, #24
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fec7 	bl	80039d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4c:	f1c3 0207 	rsb	r2, r3, #7
 8003c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c58:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	334c      	adds	r3, #76	@ 0x4c
 8003c6e:	224c      	movs	r2, #76	@ 0x4c
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f001 fa65 	bl	8005142 <memset>
 8003c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8003cb0 <prvInitialiseNewTask+0x134>)
 8003c7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	4a0c      	ldr	r2, [pc, #48]	@ (8003cb4 <prvInitialiseNewTask+0x138>)
 8003c82:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c86:	4a0c      	ldr	r2, [pc, #48]	@ (8003cb8 <prvInitialiseNewTask+0x13c>)
 8003c88:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	68f9      	ldr	r1, [r7, #12]
 8003c8e:	69b8      	ldr	r0, [r7, #24]
 8003c90:	f000 fc82 	bl	8004598 <pxPortInitialiseStack>
 8003c94:	4602      	mov	r2, r0
 8003c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ca6:	bf00      	nop
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20004598 	.word	0x20004598
 8003cb4:	20004600 	.word	0x20004600
 8003cb8:	20004668 	.word	0x20004668

08003cbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cc4:	f000 fd98 	bl	80047f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d74 <prvAddNewTaskToReadyList+0xb8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	4a29      	ldr	r2, [pc, #164]	@ (8003d74 <prvAddNewTaskToReadyList+0xb8>)
 8003cd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cd2:	4b29      	ldr	r3, [pc, #164]	@ (8003d78 <prvAddNewTaskToReadyList+0xbc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cda:	4a27      	ldr	r2, [pc, #156]	@ (8003d78 <prvAddNewTaskToReadyList+0xbc>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ce0:	4b24      	ldr	r3, [pc, #144]	@ (8003d74 <prvAddNewTaskToReadyList+0xb8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d110      	bne.n	8003d0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ce8:	f000 fb4c 	bl	8004384 <prvInitialiseTaskLists>
 8003cec:	e00d      	b.n	8003d0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cee:	4b23      	ldr	r3, [pc, #140]	@ (8003d7c <prvAddNewTaskToReadyList+0xc0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cf6:	4b20      	ldr	r3, [pc, #128]	@ (8003d78 <prvAddNewTaskToReadyList+0xbc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d802      	bhi.n	8003d0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d04:	4a1c      	ldr	r2, [pc, #112]	@ (8003d78 <prvAddNewTaskToReadyList+0xbc>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d80 <prvAddNewTaskToReadyList+0xc4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	4a1b      	ldr	r2, [pc, #108]	@ (8003d80 <prvAddNewTaskToReadyList+0xc4>)
 8003d12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d18:	2201      	movs	r2, #1
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	4b19      	ldr	r3, [pc, #100]	@ (8003d84 <prvAddNewTaskToReadyList+0xc8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	4a18      	ldr	r2, [pc, #96]	@ (8003d84 <prvAddNewTaskToReadyList+0xc8>)
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4a15      	ldr	r2, [pc, #84]	@ (8003d88 <prvAddNewTaskToReadyList+0xcc>)
 8003d34:	441a      	add	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f7ff fe55 	bl	80039ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d42:	f000 fd8b 	bl	800485c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d46:	4b0d      	ldr	r3, [pc, #52]	@ (8003d7c <prvAddNewTaskToReadyList+0xc0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00e      	beq.n	8003d6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d78 <prvAddNewTaskToReadyList+0xbc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d207      	bcs.n	8003d6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <prvAddNewTaskToReadyList+0xd0>)
 8003d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20000944 	.word	0x20000944
 8003d78:	20000844 	.word	0x20000844
 8003d7c:	20000950 	.word	0x20000950
 8003d80:	20000960 	.word	0x20000960
 8003d84:	2000094c 	.word	0x2000094c
 8003d88:	20000848 	.word	0x20000848
 8003d8c:	e000ed04 	.word	0xe000ed04

08003d90 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003d98:	f000 fd2e 	bl	80047f8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <vTaskDelete+0x18>
 8003da2:	4b39      	ldr	r3, [pc, #228]	@ (8003e88 <vTaskDelete+0xf8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	e000      	b.n	8003daa <vTaskDelete+0x1a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fe78 	bl	8003aa6 <uxListRemove>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d115      	bne.n	8003de8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc0:	4932      	ldr	r1, [pc, #200]	@ (8003e8c <vTaskDelete+0xfc>)
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <vTaskDelete+0x58>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	4b2c      	ldr	r3, [pc, #176]	@ (8003e90 <vTaskDelete+0x100>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4013      	ands	r3, r2
 8003de4:	4a2a      	ldr	r2, [pc, #168]	@ (8003e90 <vTaskDelete+0x100>)
 8003de6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3318      	adds	r3, #24
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fe56 	bl	8003aa6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003dfa:	4b26      	ldr	r3, [pc, #152]	@ (8003e94 <vTaskDelete+0x104>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	4a24      	ldr	r2, [pc, #144]	@ (8003e94 <vTaskDelete+0x104>)
 8003e02:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003e04:	4b20      	ldr	r3, [pc, #128]	@ (8003e88 <vTaskDelete+0xf8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d10b      	bne.n	8003e26 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4619      	mov	r1, r3
 8003e14:	4820      	ldr	r0, [pc, #128]	@ (8003e98 <vTaskDelete+0x108>)
 8003e16:	f7ff fde9 	bl	80039ec <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003e1a:	4b20      	ldr	r3, [pc, #128]	@ (8003e9c <vTaskDelete+0x10c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	4a1e      	ldr	r2, [pc, #120]	@ (8003e9c <vTaskDelete+0x10c>)
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	e009      	b.n	8003e3a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003e26:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea0 <vTaskDelete+0x110>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ea0 <vTaskDelete+0x110>)
 8003e2e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 fb15 	bl	8004460 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003e36:	f000 fb29 	bl	800448c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003e3a:	f000 fd0f 	bl	800485c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003e3e:	4b19      	ldr	r3, [pc, #100]	@ (8003ea4 <vTaskDelete+0x114>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01c      	beq.n	8003e80 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8003e46:	4b10      	ldr	r3, [pc, #64]	@ (8003e88 <vTaskDelete+0xf8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d117      	bne.n	8003e80 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003e50:	4b15      	ldr	r3, [pc, #84]	@ (8003ea8 <vTaskDelete+0x118>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00b      	beq.n	8003e70 <vTaskDelete+0xe0>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	60bb      	str	r3, [r7, #8]
}
 8003e6a:	bf00      	nop
 8003e6c:	bf00      	nop
 8003e6e:	e7fd      	b.n	8003e6c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8003e70:	4b0e      	ldr	r3, [pc, #56]	@ (8003eac <vTaskDelete+0x11c>)
 8003e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000844 	.word	0x20000844
 8003e8c:	20000848 	.word	0x20000848
 8003e90:	2000094c 	.word	0x2000094c
 8003e94:	20000960 	.word	0x20000960
 8003e98:	20000918 	.word	0x20000918
 8003e9c:	2000092c 	.word	0x2000092c
 8003ea0:	20000944 	.word	0x20000944
 8003ea4:	20000950 	.word	0x20000950
 8003ea8:	2000096c 	.word	0x2000096c
 8003eac:	e000ed04 	.word	0xe000ed04

08003eb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d018      	beq.n	8003ef4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ec2:	4b14      	ldr	r3, [pc, #80]	@ (8003f14 <vTaskDelay+0x64>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <vTaskDelay+0x32>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	60bb      	str	r3, [r7, #8]
}
 8003edc:	bf00      	nop
 8003ede:	bf00      	nop
 8003ee0:	e7fd      	b.n	8003ede <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ee2:	f000 f86d 	bl	8003fc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 faef 	bl	80044cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003eee:	f000 f875 	bl	8003fdc <xTaskResumeAll>
 8003ef2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d107      	bne.n	8003f0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003efa:	4b07      	ldr	r3, [pc, #28]	@ (8003f18 <vTaskDelay+0x68>)
 8003efc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	2000096c 	.word	0x2000096c
 8003f18:	e000ed04 	.word	0xe000ed04

08003f1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003f22:	4b1f      	ldr	r3, [pc, #124]	@ (8003fa0 <vTaskStartScheduler+0x84>)
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	2300      	movs	r3, #0
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2280      	movs	r2, #128	@ 0x80
 8003f2e:	491d      	ldr	r1, [pc, #116]	@ (8003fa4 <vTaskStartScheduler+0x88>)
 8003f30:	481d      	ldr	r0, [pc, #116]	@ (8003fa8 <vTaskStartScheduler+0x8c>)
 8003f32:	f7ff fde2 	bl	8003afa <xTaskCreate>
 8003f36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d11b      	bne.n	8003f76 <vTaskStartScheduler+0x5a>
	__asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	60bb      	str	r3, [r7, #8]
}
 8003f50:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f52:	4b16      	ldr	r3, [pc, #88]	@ (8003fac <vTaskStartScheduler+0x90>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	334c      	adds	r3, #76	@ 0x4c
 8003f58:	4a15      	ldr	r2, [pc, #84]	@ (8003fb0 <vTaskStartScheduler+0x94>)
 8003f5a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f5c:	4b15      	ldr	r3, [pc, #84]	@ (8003fb4 <vTaskStartScheduler+0x98>)
 8003f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f64:	4b14      	ldr	r3, [pc, #80]	@ (8003fb8 <vTaskStartScheduler+0x9c>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f6a:	4b14      	ldr	r3, [pc, #80]	@ (8003fbc <vTaskStartScheduler+0xa0>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f70:	f000 fb9e 	bl	80046b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f74:	e00f      	b.n	8003f96 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d10b      	bne.n	8003f96 <vTaskStartScheduler+0x7a>
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	607b      	str	r3, [r7, #4]
}
 8003f90:	bf00      	nop
 8003f92:	bf00      	nop
 8003f94:	e7fd      	b.n	8003f92 <vTaskStartScheduler+0x76>
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20000968 	.word	0x20000968
 8003fa4:	080062e0 	.word	0x080062e0
 8003fa8:	08004355 	.word	0x08004355
 8003fac:	20000844 	.word	0x20000844
 8003fb0:	2000001c 	.word	0x2000001c
 8003fb4:	20000964 	.word	0x20000964
 8003fb8:	20000950 	.word	0x20000950
 8003fbc:	20000948 	.word	0x20000948

08003fc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fc4:	4b04      	ldr	r3, [pc, #16]	@ (8003fd8 <vTaskSuspendAll+0x18>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	4a03      	ldr	r2, [pc, #12]	@ (8003fd8 <vTaskSuspendAll+0x18>)
 8003fcc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fce:	bf00      	nop
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	2000096c 	.word	0x2000096c

08003fdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fea:	4b42      	ldr	r3, [pc, #264]	@ (80040f4 <xTaskResumeAll+0x118>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10b      	bne.n	800400a <xTaskResumeAll+0x2e>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	603b      	str	r3, [r7, #0]
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	e7fd      	b.n	8004006 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800400a:	f000 fbf5 	bl	80047f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800400e:	4b39      	ldr	r3, [pc, #228]	@ (80040f4 <xTaskResumeAll+0x118>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3b01      	subs	r3, #1
 8004014:	4a37      	ldr	r2, [pc, #220]	@ (80040f4 <xTaskResumeAll+0x118>)
 8004016:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004018:	4b36      	ldr	r3, [pc, #216]	@ (80040f4 <xTaskResumeAll+0x118>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d161      	bne.n	80040e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004020:	4b35      	ldr	r3, [pc, #212]	@ (80040f8 <xTaskResumeAll+0x11c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d05d      	beq.n	80040e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004028:	e02e      	b.n	8004088 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800402a:	4b34      	ldr	r3, [pc, #208]	@ (80040fc <xTaskResumeAll+0x120>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3318      	adds	r3, #24
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fd35 	bl	8003aa6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3304      	adds	r3, #4
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fd30 	bl	8003aa6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404a:	2201      	movs	r2, #1
 800404c:	409a      	lsls	r2, r3
 800404e:	4b2c      	ldr	r3, [pc, #176]	@ (8004100 <xTaskResumeAll+0x124>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4313      	orrs	r3, r2
 8004054:	4a2a      	ldr	r2, [pc, #168]	@ (8004100 <xTaskResumeAll+0x124>)
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4a27      	ldr	r2, [pc, #156]	@ (8004104 <xTaskResumeAll+0x128>)
 8004066:	441a      	add	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3304      	adds	r3, #4
 800406c:	4619      	mov	r1, r3
 800406e:	4610      	mov	r0, r2
 8004070:	f7ff fcbc 	bl	80039ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004078:	4b23      	ldr	r3, [pc, #140]	@ (8004108 <xTaskResumeAll+0x12c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407e:	429a      	cmp	r2, r3
 8004080:	d302      	bcc.n	8004088 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004082:	4b22      	ldr	r3, [pc, #136]	@ (800410c <xTaskResumeAll+0x130>)
 8004084:	2201      	movs	r2, #1
 8004086:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004088:	4b1c      	ldr	r3, [pc, #112]	@ (80040fc <xTaskResumeAll+0x120>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1cc      	bne.n	800402a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004096:	f000 f9f9 	bl	800448c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800409a:	4b1d      	ldr	r3, [pc, #116]	@ (8004110 <xTaskResumeAll+0x134>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d010      	beq.n	80040c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040a6:	f000 f837 	bl	8004118 <xTaskIncrementTick>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80040b0:	4b16      	ldr	r3, [pc, #88]	@ (800410c <xTaskResumeAll+0x130>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f1      	bne.n	80040a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80040c2:	4b13      	ldr	r3, [pc, #76]	@ (8004110 <xTaskResumeAll+0x134>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040c8:	4b10      	ldr	r3, [pc, #64]	@ (800410c <xTaskResumeAll+0x130>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d009      	beq.n	80040e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040d0:	2301      	movs	r3, #1
 80040d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004114 <xTaskResumeAll+0x138>)
 80040d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040e4:	f000 fbba 	bl	800485c <vPortExitCritical>

	return xAlreadyYielded;
 80040e8:	68bb      	ldr	r3, [r7, #8]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	2000096c 	.word	0x2000096c
 80040f8:	20000944 	.word	0x20000944
 80040fc:	20000904 	.word	0x20000904
 8004100:	2000094c 	.word	0x2000094c
 8004104:	20000848 	.word	0x20000848
 8004108:	20000844 	.word	0x20000844
 800410c:	20000958 	.word	0x20000958
 8004110:	20000954 	.word	0x20000954
 8004114:	e000ed04 	.word	0xe000ed04

08004118 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004122:	4b4f      	ldr	r3, [pc, #316]	@ (8004260 <xTaskIncrementTick+0x148>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f040 808f 	bne.w	800424a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800412c:	4b4d      	ldr	r3, [pc, #308]	@ (8004264 <xTaskIncrementTick+0x14c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3301      	adds	r3, #1
 8004132:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004134:	4a4b      	ldr	r2, [pc, #300]	@ (8004264 <xTaskIncrementTick+0x14c>)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d121      	bne.n	8004184 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004140:	4b49      	ldr	r3, [pc, #292]	@ (8004268 <xTaskIncrementTick+0x150>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <xTaskIncrementTick+0x4a>
	__asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	603b      	str	r3, [r7, #0]
}
 800415c:	bf00      	nop
 800415e:	bf00      	nop
 8004160:	e7fd      	b.n	800415e <xTaskIncrementTick+0x46>
 8004162:	4b41      	ldr	r3, [pc, #260]	@ (8004268 <xTaskIncrementTick+0x150>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	4b40      	ldr	r3, [pc, #256]	@ (800426c <xTaskIncrementTick+0x154>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a3e      	ldr	r2, [pc, #248]	@ (8004268 <xTaskIncrementTick+0x150>)
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	4a3e      	ldr	r2, [pc, #248]	@ (800426c <xTaskIncrementTick+0x154>)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	4b3e      	ldr	r3, [pc, #248]	@ (8004270 <xTaskIncrementTick+0x158>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3301      	adds	r3, #1
 800417c:	4a3c      	ldr	r2, [pc, #240]	@ (8004270 <xTaskIncrementTick+0x158>)
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	f000 f984 	bl	800448c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004184:	4b3b      	ldr	r3, [pc, #236]	@ (8004274 <xTaskIncrementTick+0x15c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	429a      	cmp	r2, r3
 800418c:	d348      	bcc.n	8004220 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800418e:	4b36      	ldr	r3, [pc, #216]	@ (8004268 <xTaskIncrementTick+0x150>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d104      	bne.n	80041a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004198:	4b36      	ldr	r3, [pc, #216]	@ (8004274 <xTaskIncrementTick+0x15c>)
 800419a:	f04f 32ff 	mov.w	r2, #4294967295
 800419e:	601a      	str	r2, [r3, #0]
					break;
 80041a0:	e03e      	b.n	8004220 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a2:	4b31      	ldr	r3, [pc, #196]	@ (8004268 <xTaskIncrementTick+0x150>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d203      	bcs.n	80041c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004274 <xTaskIncrementTick+0x15c>)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041c0:	e02e      	b.n	8004220 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	3304      	adds	r3, #4
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff fc6d 	bl	8003aa6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d004      	beq.n	80041de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	3318      	adds	r3, #24
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fc64 	bl	8003aa6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e2:	2201      	movs	r2, #1
 80041e4:	409a      	lsls	r2, r3
 80041e6:	4b24      	ldr	r3, [pc, #144]	@ (8004278 <xTaskIncrementTick+0x160>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	4a22      	ldr	r2, [pc, #136]	@ (8004278 <xTaskIncrementTick+0x160>)
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4a1f      	ldr	r2, [pc, #124]	@ (800427c <xTaskIncrementTick+0x164>)
 80041fe:	441a      	add	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	3304      	adds	r3, #4
 8004204:	4619      	mov	r1, r3
 8004206:	4610      	mov	r0, r2
 8004208:	f7ff fbf0 	bl	80039ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004210:	4b1b      	ldr	r3, [pc, #108]	@ (8004280 <xTaskIncrementTick+0x168>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004216:	429a      	cmp	r2, r3
 8004218:	d3b9      	bcc.n	800418e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800421a:	2301      	movs	r3, #1
 800421c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800421e:	e7b6      	b.n	800418e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004220:	4b17      	ldr	r3, [pc, #92]	@ (8004280 <xTaskIncrementTick+0x168>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004226:	4915      	ldr	r1, [pc, #84]	@ (800427c <xTaskIncrementTick+0x164>)
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d901      	bls.n	800423c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004238:	2301      	movs	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800423c:	4b11      	ldr	r3, [pc, #68]	@ (8004284 <xTaskIncrementTick+0x16c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004244:	2301      	movs	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	e004      	b.n	8004254 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800424a:	4b0f      	ldr	r3, [pc, #60]	@ (8004288 <xTaskIncrementTick+0x170>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3301      	adds	r3, #1
 8004250:	4a0d      	ldr	r2, [pc, #52]	@ (8004288 <xTaskIncrementTick+0x170>)
 8004252:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004254:	697b      	ldr	r3, [r7, #20]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	2000096c 	.word	0x2000096c
 8004264:	20000948 	.word	0x20000948
 8004268:	200008fc 	.word	0x200008fc
 800426c:	20000900 	.word	0x20000900
 8004270:	2000095c 	.word	0x2000095c
 8004274:	20000964 	.word	0x20000964
 8004278:	2000094c 	.word	0x2000094c
 800427c:	20000848 	.word	0x20000848
 8004280:	20000844 	.word	0x20000844
 8004284:	20000958 	.word	0x20000958
 8004288:	20000954 	.word	0x20000954

0800428c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004292:	4b2a      	ldr	r3, [pc, #168]	@ (800433c <vTaskSwitchContext+0xb0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800429a:	4b29      	ldr	r3, [pc, #164]	@ (8004340 <vTaskSwitchContext+0xb4>)
 800429c:	2201      	movs	r2, #1
 800429e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042a0:	e045      	b.n	800432e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80042a2:	4b27      	ldr	r3, [pc, #156]	@ (8004340 <vTaskSwitchContext+0xb4>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a8:	4b26      	ldr	r3, [pc, #152]	@ (8004344 <vTaskSwitchContext+0xb8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	fab3 f383 	clz	r3, r3
 80042b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80042b6:	7afb      	ldrb	r3, [r7, #11]
 80042b8:	f1c3 031f 	rsb	r3, r3, #31
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	4922      	ldr	r1, [pc, #136]	@ (8004348 <vTaskSwitchContext+0xbc>)
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10b      	bne.n	80042ea <vTaskSwitchContext+0x5e>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	607b      	str	r3, [r7, #4]
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	e7fd      	b.n	80042e6 <vTaskSwitchContext+0x5a>
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4a14      	ldr	r2, [pc, #80]	@ (8004348 <vTaskSwitchContext+0xbc>)
 80042f6:	4413      	add	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	605a      	str	r2, [r3, #4]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	3308      	adds	r3, #8
 800430c:	429a      	cmp	r2, r3
 800430e:	d104      	bne.n	800431a <vTaskSwitchContext+0x8e>
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a0a      	ldr	r2, [pc, #40]	@ (800434c <vTaskSwitchContext+0xc0>)
 8004322:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004324:	4b09      	ldr	r3, [pc, #36]	@ (800434c <vTaskSwitchContext+0xc0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	334c      	adds	r3, #76	@ 0x4c
 800432a:	4a09      	ldr	r2, [pc, #36]	@ (8004350 <vTaskSwitchContext+0xc4>)
 800432c:	6013      	str	r3, [r2, #0]
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	2000096c 	.word	0x2000096c
 8004340:	20000958 	.word	0x20000958
 8004344:	2000094c 	.word	0x2000094c
 8004348:	20000848 	.word	0x20000848
 800434c:	20000844 	.word	0x20000844
 8004350:	2000001c 	.word	0x2000001c

08004354 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800435c:	f000 f852 	bl	8004404 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004360:	4b06      	ldr	r3, [pc, #24]	@ (800437c <prvIdleTask+0x28>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d9f9      	bls.n	800435c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004368:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <prvIdleTask+0x2c>)
 800436a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004378:	e7f0      	b.n	800435c <prvIdleTask+0x8>
 800437a:	bf00      	nop
 800437c:	20000848 	.word	0x20000848
 8004380:	e000ed04 	.word	0xe000ed04

08004384 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800438a:	2300      	movs	r3, #0
 800438c:	607b      	str	r3, [r7, #4]
 800438e:	e00c      	b.n	80043aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4a12      	ldr	r2, [pc, #72]	@ (80043e4 <prvInitialiseTaskLists+0x60>)
 800439c:	4413      	add	r3, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff faf7 	bl	8003992 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3301      	adds	r3, #1
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b06      	cmp	r3, #6
 80043ae:	d9ef      	bls.n	8004390 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043b0:	480d      	ldr	r0, [pc, #52]	@ (80043e8 <prvInitialiseTaskLists+0x64>)
 80043b2:	f7ff faee 	bl	8003992 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043b6:	480d      	ldr	r0, [pc, #52]	@ (80043ec <prvInitialiseTaskLists+0x68>)
 80043b8:	f7ff faeb 	bl	8003992 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043bc:	480c      	ldr	r0, [pc, #48]	@ (80043f0 <prvInitialiseTaskLists+0x6c>)
 80043be:	f7ff fae8 	bl	8003992 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043c2:	480c      	ldr	r0, [pc, #48]	@ (80043f4 <prvInitialiseTaskLists+0x70>)
 80043c4:	f7ff fae5 	bl	8003992 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043c8:	480b      	ldr	r0, [pc, #44]	@ (80043f8 <prvInitialiseTaskLists+0x74>)
 80043ca:	f7ff fae2 	bl	8003992 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043ce:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <prvInitialiseTaskLists+0x78>)
 80043d0:	4a05      	ldr	r2, [pc, #20]	@ (80043e8 <prvInitialiseTaskLists+0x64>)
 80043d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004400 <prvInitialiseTaskLists+0x7c>)
 80043d6:	4a05      	ldr	r2, [pc, #20]	@ (80043ec <prvInitialiseTaskLists+0x68>)
 80043d8:	601a      	str	r2, [r3, #0]
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000848 	.word	0x20000848
 80043e8:	200008d4 	.word	0x200008d4
 80043ec:	200008e8 	.word	0x200008e8
 80043f0:	20000904 	.word	0x20000904
 80043f4:	20000918 	.word	0x20000918
 80043f8:	20000930 	.word	0x20000930
 80043fc:	200008fc 	.word	0x200008fc
 8004400:	20000900 	.word	0x20000900

08004404 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800440a:	e019      	b.n	8004440 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800440c:	f000 f9f4 	bl	80047f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004410:	4b10      	ldr	r3, [pc, #64]	@ (8004454 <prvCheckTasksWaitingTermination+0x50>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fb42 	bl	8003aa6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004422:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <prvCheckTasksWaitingTermination+0x54>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3b01      	subs	r3, #1
 8004428:	4a0b      	ldr	r2, [pc, #44]	@ (8004458 <prvCheckTasksWaitingTermination+0x54>)
 800442a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800442c:	4b0b      	ldr	r3, [pc, #44]	@ (800445c <prvCheckTasksWaitingTermination+0x58>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3b01      	subs	r3, #1
 8004432:	4a0a      	ldr	r2, [pc, #40]	@ (800445c <prvCheckTasksWaitingTermination+0x58>)
 8004434:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004436:	f000 fa11 	bl	800485c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f810 	bl	8004460 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004440:	4b06      	ldr	r3, [pc, #24]	@ (800445c <prvCheckTasksWaitingTermination+0x58>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e1      	bne.n	800440c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000918 	.word	0x20000918
 8004458:	20000944 	.word	0x20000944
 800445c:	2000092c 	.word	0x2000092c

08004460 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	334c      	adds	r3, #76	@ 0x4c
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fe81 	bl	8005174 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fb6c 	bl	8004b54 <vPortFree>
			vPortFree( pxTCB );
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fb69 	bl	8004b54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004492:	4b0c      	ldr	r3, [pc, #48]	@ (80044c4 <prvResetNextTaskUnblockTime+0x38>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d104      	bne.n	80044a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800449c:	4b0a      	ldr	r3, [pc, #40]	@ (80044c8 <prvResetNextTaskUnblockTime+0x3c>)
 800449e:	f04f 32ff 	mov.w	r2, #4294967295
 80044a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044a4:	e008      	b.n	80044b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a6:	4b07      	ldr	r3, [pc, #28]	@ (80044c4 <prvResetNextTaskUnblockTime+0x38>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4a04      	ldr	r2, [pc, #16]	@ (80044c8 <prvResetNextTaskUnblockTime+0x3c>)
 80044b6:	6013      	str	r3, [r2, #0]
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	200008fc 	.word	0x200008fc
 80044c8:	20000964 	.word	0x20000964

080044cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044d6:	4b29      	ldr	r3, [pc, #164]	@ (800457c <prvAddCurrentTaskToDelayedList+0xb0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044dc:	4b28      	ldr	r3, [pc, #160]	@ (8004580 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3304      	adds	r3, #4
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff fadf 	bl	8003aa6 <uxListRemove>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10b      	bne.n	8004506 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80044ee:	4b24      	ldr	r3, [pc, #144]	@ (8004580 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	2201      	movs	r2, #1
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43da      	mvns	r2, r3
 80044fc:	4b21      	ldr	r3, [pc, #132]	@ (8004584 <prvAddCurrentTaskToDelayedList+0xb8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4013      	ands	r3, r2
 8004502:	4a20      	ldr	r2, [pc, #128]	@ (8004584 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004504:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450c:	d10a      	bne.n	8004524 <prvAddCurrentTaskToDelayedList+0x58>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004514:	4b1a      	ldr	r3, [pc, #104]	@ (8004580 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3304      	adds	r3, #4
 800451a:	4619      	mov	r1, r3
 800451c:	481a      	ldr	r0, [pc, #104]	@ (8004588 <prvAddCurrentTaskToDelayedList+0xbc>)
 800451e:	f7ff fa65 	bl	80039ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004522:	e026      	b.n	8004572 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4413      	add	r3, r2
 800452a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800452c:	4b14      	ldr	r3, [pc, #80]	@ (8004580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	429a      	cmp	r2, r3
 800453a:	d209      	bcs.n	8004550 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800453c:	4b13      	ldr	r3, [pc, #76]	@ (800458c <prvAddCurrentTaskToDelayedList+0xc0>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b0f      	ldr	r3, [pc, #60]	@ (8004580 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3304      	adds	r3, #4
 8004546:	4619      	mov	r1, r3
 8004548:	4610      	mov	r0, r2
 800454a:	f7ff fa73 	bl	8003a34 <vListInsert>
}
 800454e:	e010      	b.n	8004572 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004550:	4b0f      	ldr	r3, [pc, #60]	@ (8004590 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4b0a      	ldr	r3, [pc, #40]	@ (8004580 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3304      	adds	r3, #4
 800455a:	4619      	mov	r1, r3
 800455c:	4610      	mov	r0, r2
 800455e:	f7ff fa69 	bl	8003a34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004562:	4b0c      	ldr	r3, [pc, #48]	@ (8004594 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	429a      	cmp	r2, r3
 800456a:	d202      	bcs.n	8004572 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800456c:	4a09      	ldr	r2, [pc, #36]	@ (8004594 <prvAddCurrentTaskToDelayedList+0xc8>)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	6013      	str	r3, [r2, #0]
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000948 	.word	0x20000948
 8004580:	20000844 	.word	0x20000844
 8004584:	2000094c 	.word	0x2000094c
 8004588:	20000930 	.word	0x20000930
 800458c:	20000900 	.word	0x20000900
 8004590:	200008fc 	.word	0x200008fc
 8004594:	20000964 	.word	0x20000964

08004598 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3b04      	subs	r3, #4
 80045a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3b04      	subs	r3, #4
 80045b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3b04      	subs	r3, #4
 80045c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045c8:	4a0c      	ldr	r2, [pc, #48]	@ (80045fc <pxPortInitialiseStack+0x64>)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3b14      	subs	r3, #20
 80045d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3b04      	subs	r3, #4
 80045de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f06f 0202 	mvn.w	r2, #2
 80045e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3b20      	subs	r3, #32
 80045ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	08004601 	.word	0x08004601

08004600 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800460a:	4b13      	ldr	r3, [pc, #76]	@ (8004658 <prvTaskExitError+0x58>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004612:	d00b      	beq.n	800462c <prvTaskExitError+0x2c>
	__asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	60fb      	str	r3, [r7, #12]
}
 8004626:	bf00      	nop
 8004628:	bf00      	nop
 800462a:	e7fd      	b.n	8004628 <prvTaskExitError+0x28>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	60bb      	str	r3, [r7, #8]
}
 800463e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004640:	bf00      	nop
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0fc      	beq.n	8004642 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	2000000c 	.word	0x2000000c
 800465c:	00000000 	.word	0x00000000

08004660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004660:	4b07      	ldr	r3, [pc, #28]	@ (8004680 <pxCurrentTCBConst2>)
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	6808      	ldr	r0, [r1, #0]
 8004666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466a:	f380 8809 	msr	PSP, r0
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f380 8811 	msr	BASEPRI, r0
 800467a:	4770      	bx	lr
 800467c:	f3af 8000 	nop.w

08004680 <pxCurrentTCBConst2>:
 8004680:	20000844 	.word	0x20000844
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop

08004688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004688:	4808      	ldr	r0, [pc, #32]	@ (80046ac <prvPortStartFirstTask+0x24>)
 800468a:	6800      	ldr	r0, [r0, #0]
 800468c:	6800      	ldr	r0, [r0, #0]
 800468e:	f380 8808 	msr	MSP, r0
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f380 8814 	msr	CONTROL, r0
 800469a:	b662      	cpsie	i
 800469c:	b661      	cpsie	f
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	df00      	svc	0
 80046a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046aa:	bf00      	nop
 80046ac:	e000ed08 	.word	0xe000ed08

080046b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046b6:	4b47      	ldr	r3, [pc, #284]	@ (80047d4 <xPortStartScheduler+0x124>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a47      	ldr	r2, [pc, #284]	@ (80047d8 <xPortStartScheduler+0x128>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d10b      	bne.n	80046d8 <xPortStartScheduler+0x28>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	613b      	str	r3, [r7, #16]
}
 80046d2:	bf00      	nop
 80046d4:	bf00      	nop
 80046d6:	e7fd      	b.n	80046d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046d8:	4b3e      	ldr	r3, [pc, #248]	@ (80047d4 <xPortStartScheduler+0x124>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a3f      	ldr	r2, [pc, #252]	@ (80047dc <xPortStartScheduler+0x12c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d10b      	bne.n	80046fa <xPortStartScheduler+0x4a>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	60fb      	str	r3, [r7, #12]
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop
 80046f8:	e7fd      	b.n	80046f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046fa:	4b39      	ldr	r3, [pc, #228]	@ (80047e0 <xPortStartScheduler+0x130>)
 80046fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	22ff      	movs	r2, #255	@ 0xff
 800470a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4b31      	ldr	r3, [pc, #196]	@ (80047e4 <xPortStartScheduler+0x134>)
 8004720:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004722:	4b31      	ldr	r3, [pc, #196]	@ (80047e8 <xPortStartScheduler+0x138>)
 8004724:	2207      	movs	r2, #7
 8004726:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004728:	e009      	b.n	800473e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800472a:	4b2f      	ldr	r3, [pc, #188]	@ (80047e8 <xPortStartScheduler+0x138>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3b01      	subs	r3, #1
 8004730:	4a2d      	ldr	r2, [pc, #180]	@ (80047e8 <xPortStartScheduler+0x138>)
 8004732:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	b2db      	uxtb	r3, r3
 800473c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004746:	2b80      	cmp	r3, #128	@ 0x80
 8004748:	d0ef      	beq.n	800472a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800474a:	4b27      	ldr	r3, [pc, #156]	@ (80047e8 <xPortStartScheduler+0x138>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f1c3 0307 	rsb	r3, r3, #7
 8004752:	2b04      	cmp	r3, #4
 8004754:	d00b      	beq.n	800476e <xPortStartScheduler+0xbe>
	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	60bb      	str	r3, [r7, #8]
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	e7fd      	b.n	800476a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800476e:	4b1e      	ldr	r3, [pc, #120]	@ (80047e8 <xPortStartScheduler+0x138>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	4a1c      	ldr	r2, [pc, #112]	@ (80047e8 <xPortStartScheduler+0x138>)
 8004776:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004778:	4b1b      	ldr	r3, [pc, #108]	@ (80047e8 <xPortStartScheduler+0x138>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004780:	4a19      	ldr	r2, [pc, #100]	@ (80047e8 <xPortStartScheduler+0x138>)
 8004782:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	b2da      	uxtb	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800478c:	4b17      	ldr	r3, [pc, #92]	@ (80047ec <xPortStartScheduler+0x13c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a16      	ldr	r2, [pc, #88]	@ (80047ec <xPortStartScheduler+0x13c>)
 8004792:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004796:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004798:	4b14      	ldr	r3, [pc, #80]	@ (80047ec <xPortStartScheduler+0x13c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a13      	ldr	r2, [pc, #76]	@ (80047ec <xPortStartScheduler+0x13c>)
 800479e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80047a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047a4:	f000 f8da 	bl	800495c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047a8:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <xPortStartScheduler+0x140>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047ae:	f000 f8f9 	bl	80049a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047b2:	4b10      	ldr	r3, [pc, #64]	@ (80047f4 <xPortStartScheduler+0x144>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a0f      	ldr	r2, [pc, #60]	@ (80047f4 <xPortStartScheduler+0x144>)
 80047b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80047bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047be:	f7ff ff63 	bl	8004688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047c2:	f7ff fd63 	bl	800428c <vTaskSwitchContext>
	prvTaskExitError();
 80047c6:	f7ff ff1b 	bl	8004600 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	e000ed00 	.word	0xe000ed00
 80047d8:	410fc271 	.word	0x410fc271
 80047dc:	410fc270 	.word	0x410fc270
 80047e0:	e000e400 	.word	0xe000e400
 80047e4:	20000970 	.word	0x20000970
 80047e8:	20000974 	.word	0x20000974
 80047ec:	e000ed20 	.word	0xe000ed20
 80047f0:	2000000c 	.word	0x2000000c
 80047f4:	e000ef34 	.word	0xe000ef34

080047f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	607b      	str	r3, [r7, #4]
}
 8004810:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004812:	4b10      	ldr	r3, [pc, #64]	@ (8004854 <vPortEnterCritical+0x5c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3301      	adds	r3, #1
 8004818:	4a0e      	ldr	r2, [pc, #56]	@ (8004854 <vPortEnterCritical+0x5c>)
 800481a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800481c:	4b0d      	ldr	r3, [pc, #52]	@ (8004854 <vPortEnterCritical+0x5c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d110      	bne.n	8004846 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004824:	4b0c      	ldr	r3, [pc, #48]	@ (8004858 <vPortEnterCritical+0x60>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <vPortEnterCritical+0x4e>
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	603b      	str	r3, [r7, #0]
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	e7fd      	b.n	8004842 <vPortEnterCritical+0x4a>
	}
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	2000000c 	.word	0x2000000c
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004862:	4b12      	ldr	r3, [pc, #72]	@ (80048ac <vPortExitCritical+0x50>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10b      	bne.n	8004882 <vPortExitCritical+0x26>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	607b      	str	r3, [r7, #4]
}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	e7fd      	b.n	800487e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004882:	4b0a      	ldr	r3, [pc, #40]	@ (80048ac <vPortExitCritical+0x50>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3b01      	subs	r3, #1
 8004888:	4a08      	ldr	r2, [pc, #32]	@ (80048ac <vPortExitCritical+0x50>)
 800488a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800488c:	4b07      	ldr	r3, [pc, #28]	@ (80048ac <vPortExitCritical+0x50>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d105      	bne.n	80048a0 <vPortExitCritical+0x44>
 8004894:	2300      	movs	r3, #0
 8004896:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800489e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	2000000c 	.word	0x2000000c

080048b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048b0:	f3ef 8009 	mrs	r0, PSP
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	4b15      	ldr	r3, [pc, #84]	@ (8004910 <pxCurrentTCBConst>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	f01e 0f10 	tst.w	lr, #16
 80048c0:	bf08      	it	eq
 80048c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ca:	6010      	str	r0, [r2, #0]
 80048cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80048d4:	f380 8811 	msr	BASEPRI, r0
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f7ff fcd4 	bl	800428c <vTaskSwitchContext>
 80048e4:	f04f 0000 	mov.w	r0, #0
 80048e8:	f380 8811 	msr	BASEPRI, r0
 80048ec:	bc09      	pop	{r0, r3}
 80048ee:	6819      	ldr	r1, [r3, #0]
 80048f0:	6808      	ldr	r0, [r1, #0]
 80048f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f6:	f01e 0f10 	tst.w	lr, #16
 80048fa:	bf08      	it	eq
 80048fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004900:	f380 8809 	msr	PSP, r0
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	f3af 8000 	nop.w

08004910 <pxCurrentTCBConst>:
 8004910:	20000844 	.word	0x20000844
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop

08004918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	607b      	str	r3, [r7, #4]
}
 8004930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004932:	f7ff fbf1 	bl	8004118 <xTaskIncrementTick>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800493c:	4b06      	ldr	r3, [pc, #24]	@ (8004958 <SysTick_Handler+0x40>)
 800493e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	2300      	movs	r3, #0
 8004946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	f383 8811 	msr	BASEPRI, r3
}
 800494e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004960:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <vPortSetupTimerInterrupt+0x34>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004966:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <vPortSetupTimerInterrupt+0x38>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800496c:	4b0a      	ldr	r3, [pc, #40]	@ (8004998 <vPortSetupTimerInterrupt+0x3c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0a      	ldr	r2, [pc, #40]	@ (800499c <vPortSetupTimerInterrupt+0x40>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	099b      	lsrs	r3, r3, #6
 8004978:	4a09      	ldr	r2, [pc, #36]	@ (80049a0 <vPortSetupTimerInterrupt+0x44>)
 800497a:	3b01      	subs	r3, #1
 800497c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800497e:	4b04      	ldr	r3, [pc, #16]	@ (8004990 <vPortSetupTimerInterrupt+0x34>)
 8004980:	2207      	movs	r2, #7
 8004982:	601a      	str	r2, [r3, #0]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000e010 	.word	0xe000e010
 8004994:	e000e018 	.word	0xe000e018
 8004998:	20000000 	.word	0x20000000
 800499c:	10624dd3 	.word	0x10624dd3
 80049a0:	e000e014 	.word	0xe000e014

080049a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80049b4 <vPortEnableVFP+0x10>
 80049a8:	6801      	ldr	r1, [r0, #0]
 80049aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80049ae:	6001      	str	r1, [r0, #0]
 80049b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049b2:	bf00      	nop
 80049b4:	e000ed88 	.word	0xe000ed88

080049b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	@ 0x28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049c4:	f7ff fafc 	bl	8003fc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049c8:	4b5c      	ldr	r3, [pc, #368]	@ (8004b3c <pvPortMalloc+0x184>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049d0:	f000 f924 	bl	8004c1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004b40 <pvPortMalloc+0x188>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f040 8095 	bne.w	8004b0c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01e      	beq.n	8004a26 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80049e8:	2208      	movs	r2, #8
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4413      	add	r3, r2
 80049ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d015      	beq.n	8004a26 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f023 0307 	bic.w	r3, r3, #7
 8004a00:	3308      	adds	r3, #8
 8004a02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00b      	beq.n	8004a26 <pvPortMalloc+0x6e>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	617b      	str	r3, [r7, #20]
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	e7fd      	b.n	8004a22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d06f      	beq.n	8004b0c <pvPortMalloc+0x154>
 8004a2c:	4b45      	ldr	r3, [pc, #276]	@ (8004b44 <pvPortMalloc+0x18c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d86a      	bhi.n	8004b0c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a36:	4b44      	ldr	r3, [pc, #272]	@ (8004b48 <pvPortMalloc+0x190>)
 8004a38:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a3a:	4b43      	ldr	r3, [pc, #268]	@ (8004b48 <pvPortMalloc+0x190>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a40:	e004      	b.n	8004a4c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d903      	bls.n	8004a5e <pvPortMalloc+0xa6>
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f1      	bne.n	8004a42 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a5e:	4b37      	ldr	r3, [pc, #220]	@ (8004b3c <pvPortMalloc+0x184>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d051      	beq.n	8004b0c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	4413      	add	r3, r2
 8004a70:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	1ad2      	subs	r2, r2, r3
 8004a82:	2308      	movs	r3, #8
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d920      	bls.n	8004acc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4413      	add	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00b      	beq.n	8004ab4 <pvPortMalloc+0xfc>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	613b      	str	r3, [r7, #16]
}
 8004aae:	bf00      	nop
 8004ab0:	bf00      	nop
 8004ab2:	e7fd      	b.n	8004ab0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	1ad2      	subs	r2, r2, r3
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ac6:	69b8      	ldr	r0, [r7, #24]
 8004ac8:	f000 f90a 	bl	8004ce0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004acc:	4b1d      	ldr	r3, [pc, #116]	@ (8004b44 <pvPortMalloc+0x18c>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8004b44 <pvPortMalloc+0x18c>)
 8004ad8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ada:	4b1a      	ldr	r3, [pc, #104]	@ (8004b44 <pvPortMalloc+0x18c>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4b1b      	ldr	r3, [pc, #108]	@ (8004b4c <pvPortMalloc+0x194>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d203      	bcs.n	8004aee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ae6:	4b17      	ldr	r3, [pc, #92]	@ (8004b44 <pvPortMalloc+0x18c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a18      	ldr	r2, [pc, #96]	@ (8004b4c <pvPortMalloc+0x194>)
 8004aec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	4b13      	ldr	r3, [pc, #76]	@ (8004b40 <pvPortMalloc+0x188>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b02:	4b13      	ldr	r3, [pc, #76]	@ (8004b50 <pvPortMalloc+0x198>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3301      	adds	r3, #1
 8004b08:	4a11      	ldr	r2, [pc, #68]	@ (8004b50 <pvPortMalloc+0x198>)
 8004b0a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b0c:	f7ff fa66 	bl	8003fdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <pvPortMalloc+0x17a>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	60fb      	str	r3, [r7, #12]
}
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	e7fd      	b.n	8004b2e <pvPortMalloc+0x176>
	return pvReturn;
 8004b32:	69fb      	ldr	r3, [r7, #28]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3728      	adds	r7, #40	@ 0x28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20004580 	.word	0x20004580
 8004b40:	20004594 	.word	0x20004594
 8004b44:	20004584 	.word	0x20004584
 8004b48:	20004578 	.word	0x20004578
 8004b4c:	20004588 	.word	0x20004588
 8004b50:	2000458c 	.word	0x2000458c

08004b54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d04f      	beq.n	8004c06 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b66:	2308      	movs	r3, #8
 8004b68:	425b      	negs	r3, r3
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	4b25      	ldr	r3, [pc, #148]	@ (8004c10 <vPortFree+0xbc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10b      	bne.n	8004b9a <vPortFree+0x46>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	60fb      	str	r3, [r7, #12]
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	e7fd      	b.n	8004b96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <vPortFree+0x66>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	60bb      	str	r3, [r7, #8]
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop
 8004bb8:	e7fd      	b.n	8004bb6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	4b14      	ldr	r3, [pc, #80]	@ (8004c10 <vPortFree+0xbc>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01e      	beq.n	8004c06 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d11a      	bne.n	8004c06 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8004c10 <vPortFree+0xbc>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	401a      	ands	r2, r3
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004be0:	f7ff f9ee 	bl	8003fc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c14 <vPortFree+0xc0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4413      	add	r3, r2
 8004bee:	4a09      	ldr	r2, [pc, #36]	@ (8004c14 <vPortFree+0xc0>)
 8004bf0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bf2:	6938      	ldr	r0, [r7, #16]
 8004bf4:	f000 f874 	bl	8004ce0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004bf8:	4b07      	ldr	r3, [pc, #28]	@ (8004c18 <vPortFree+0xc4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	4a06      	ldr	r2, [pc, #24]	@ (8004c18 <vPortFree+0xc4>)
 8004c00:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c02:	f7ff f9eb 	bl	8003fdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c06:	bf00      	nop
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20004594 	.word	0x20004594
 8004c14:	20004584 	.word	0x20004584
 8004c18:	20004590 	.word	0x20004590

08004c1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c22:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004c26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c28:	4b27      	ldr	r3, [pc, #156]	@ (8004cc8 <prvHeapInit+0xac>)
 8004c2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3307      	adds	r3, #7
 8004c3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0307 	bic.w	r3, r3, #7
 8004c42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004cc8 <prvHeapInit+0xac>)
 8004c4c:	4413      	add	r3, r2
 8004c4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c54:	4a1d      	ldr	r2, [pc, #116]	@ (8004ccc <prvHeapInit+0xb0>)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ccc <prvHeapInit+0xb0>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	4413      	add	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c68:	2208      	movs	r2, #8
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0307 	bic.w	r3, r3, #7
 8004c76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4a15      	ldr	r2, [pc, #84]	@ (8004cd0 <prvHeapInit+0xb4>)
 8004c7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c7e:	4b14      	ldr	r3, [pc, #80]	@ (8004cd0 <prvHeapInit+0xb4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2200      	movs	r2, #0
 8004c84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c86:	4b12      	ldr	r3, [pc, #72]	@ (8004cd0 <prvHeapInit+0xb4>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	1ad2      	subs	r2, r2, r3
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd0 <prvHeapInit+0xb4>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd4 <prvHeapInit+0xb8>)
 8004caa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	4a09      	ldr	r2, [pc, #36]	@ (8004cd8 <prvHeapInit+0xbc>)
 8004cb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cb4:	4b09      	ldr	r3, [pc, #36]	@ (8004cdc <prvHeapInit+0xc0>)
 8004cb6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004cba:	601a      	str	r2, [r3, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	20000978 	.word	0x20000978
 8004ccc:	20004578 	.word	0x20004578
 8004cd0:	20004580 	.word	0x20004580
 8004cd4:	20004588 	.word	0x20004588
 8004cd8:	20004584 	.word	0x20004584
 8004cdc:	20004594 	.word	0x20004594

08004ce0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ce8:	4b28      	ldr	r3, [pc, #160]	@ (8004d8c <prvInsertBlockIntoFreeList+0xac>)
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e002      	b.n	8004cf4 <prvInsertBlockIntoFreeList+0x14>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d8f7      	bhi.n	8004cee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	4413      	add	r3, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d108      	bne.n	8004d22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	441a      	add	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	441a      	add	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d118      	bne.n	8004d68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4b15      	ldr	r3, [pc, #84]	@ (8004d90 <prvInsertBlockIntoFreeList+0xb0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d00d      	beq.n	8004d5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	441a      	add	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	e008      	b.n	8004d70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d90 <prvInsertBlockIntoFreeList+0xb0>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e003      	b.n	8004d70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d002      	beq.n	8004d7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	20004578 	.word	0x20004578
 8004d90:	20004580 	.word	0x20004580

08004d94 <__sflush_r>:
 8004d94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9c:	0716      	lsls	r6, r2, #28
 8004d9e:	4605      	mov	r5, r0
 8004da0:	460c      	mov	r4, r1
 8004da2:	d454      	bmi.n	8004e4e <__sflush_r+0xba>
 8004da4:	684b      	ldr	r3, [r1, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	dc02      	bgt.n	8004db0 <__sflush_r+0x1c>
 8004daa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	dd48      	ble.n	8004e42 <__sflush_r+0xae>
 8004db0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004db2:	2e00      	cmp	r6, #0
 8004db4:	d045      	beq.n	8004e42 <__sflush_r+0xae>
 8004db6:	2300      	movs	r3, #0
 8004db8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004dbc:	682f      	ldr	r7, [r5, #0]
 8004dbe:	6a21      	ldr	r1, [r4, #32]
 8004dc0:	602b      	str	r3, [r5, #0]
 8004dc2:	d030      	beq.n	8004e26 <__sflush_r+0x92>
 8004dc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004dc6:	89a3      	ldrh	r3, [r4, #12]
 8004dc8:	0759      	lsls	r1, r3, #29
 8004dca:	d505      	bpl.n	8004dd8 <__sflush_r+0x44>
 8004dcc:	6863      	ldr	r3, [r4, #4]
 8004dce:	1ad2      	subs	r2, r2, r3
 8004dd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004dd2:	b10b      	cbz	r3, 8004dd8 <__sflush_r+0x44>
 8004dd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004dd6:	1ad2      	subs	r2, r2, r3
 8004dd8:	2300      	movs	r3, #0
 8004dda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ddc:	6a21      	ldr	r1, [r4, #32]
 8004dde:	4628      	mov	r0, r5
 8004de0:	47b0      	blx	r6
 8004de2:	1c43      	adds	r3, r0, #1
 8004de4:	89a3      	ldrh	r3, [r4, #12]
 8004de6:	d106      	bne.n	8004df6 <__sflush_r+0x62>
 8004de8:	6829      	ldr	r1, [r5, #0]
 8004dea:	291d      	cmp	r1, #29
 8004dec:	d82b      	bhi.n	8004e46 <__sflush_r+0xb2>
 8004dee:	4a2a      	ldr	r2, [pc, #168]	@ (8004e98 <__sflush_r+0x104>)
 8004df0:	410a      	asrs	r2, r1
 8004df2:	07d6      	lsls	r6, r2, #31
 8004df4:	d427      	bmi.n	8004e46 <__sflush_r+0xb2>
 8004df6:	2200      	movs	r2, #0
 8004df8:	6062      	str	r2, [r4, #4]
 8004dfa:	04d9      	lsls	r1, r3, #19
 8004dfc:	6922      	ldr	r2, [r4, #16]
 8004dfe:	6022      	str	r2, [r4, #0]
 8004e00:	d504      	bpl.n	8004e0c <__sflush_r+0x78>
 8004e02:	1c42      	adds	r2, r0, #1
 8004e04:	d101      	bne.n	8004e0a <__sflush_r+0x76>
 8004e06:	682b      	ldr	r3, [r5, #0]
 8004e08:	b903      	cbnz	r3, 8004e0c <__sflush_r+0x78>
 8004e0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e0e:	602f      	str	r7, [r5, #0]
 8004e10:	b1b9      	cbz	r1, 8004e42 <__sflush_r+0xae>
 8004e12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e16:	4299      	cmp	r1, r3
 8004e18:	d002      	beq.n	8004e20 <__sflush_r+0x8c>
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f000 fa64 	bl	80052e8 <_free_r>
 8004e20:	2300      	movs	r3, #0
 8004e22:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e24:	e00d      	b.n	8004e42 <__sflush_r+0xae>
 8004e26:	2301      	movs	r3, #1
 8004e28:	4628      	mov	r0, r5
 8004e2a:	47b0      	blx	r6
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	1c50      	adds	r0, r2, #1
 8004e30:	d1c9      	bne.n	8004dc6 <__sflush_r+0x32>
 8004e32:	682b      	ldr	r3, [r5, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0c6      	beq.n	8004dc6 <__sflush_r+0x32>
 8004e38:	2b1d      	cmp	r3, #29
 8004e3a:	d001      	beq.n	8004e40 <__sflush_r+0xac>
 8004e3c:	2b16      	cmp	r3, #22
 8004e3e:	d11e      	bne.n	8004e7e <__sflush_r+0xea>
 8004e40:	602f      	str	r7, [r5, #0]
 8004e42:	2000      	movs	r0, #0
 8004e44:	e022      	b.n	8004e8c <__sflush_r+0xf8>
 8004e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e4a:	b21b      	sxth	r3, r3
 8004e4c:	e01b      	b.n	8004e86 <__sflush_r+0xf2>
 8004e4e:	690f      	ldr	r7, [r1, #16]
 8004e50:	2f00      	cmp	r7, #0
 8004e52:	d0f6      	beq.n	8004e42 <__sflush_r+0xae>
 8004e54:	0793      	lsls	r3, r2, #30
 8004e56:	680e      	ldr	r6, [r1, #0]
 8004e58:	bf08      	it	eq
 8004e5a:	694b      	ldreq	r3, [r1, #20]
 8004e5c:	600f      	str	r7, [r1, #0]
 8004e5e:	bf18      	it	ne
 8004e60:	2300      	movne	r3, #0
 8004e62:	eba6 0807 	sub.w	r8, r6, r7
 8004e66:	608b      	str	r3, [r1, #8]
 8004e68:	f1b8 0f00 	cmp.w	r8, #0
 8004e6c:	dde9      	ble.n	8004e42 <__sflush_r+0xae>
 8004e6e:	6a21      	ldr	r1, [r4, #32]
 8004e70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e72:	4643      	mov	r3, r8
 8004e74:	463a      	mov	r2, r7
 8004e76:	4628      	mov	r0, r5
 8004e78:	47b0      	blx	r6
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	dc08      	bgt.n	8004e90 <__sflush_r+0xfc>
 8004e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e86:	81a3      	strh	r3, [r4, #12]
 8004e88:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e90:	4407      	add	r7, r0
 8004e92:	eba8 0800 	sub.w	r8, r8, r0
 8004e96:	e7e7      	b.n	8004e68 <__sflush_r+0xd4>
 8004e98:	dfbffffe 	.word	0xdfbffffe

08004e9c <_fflush_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	690b      	ldr	r3, [r1, #16]
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	b913      	cbnz	r3, 8004eac <_fflush_r+0x10>
 8004ea6:	2500      	movs	r5, #0
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
 8004eac:	b118      	cbz	r0, 8004eb6 <_fflush_r+0x1a>
 8004eae:	6a03      	ldr	r3, [r0, #32]
 8004eb0:	b90b      	cbnz	r3, 8004eb6 <_fflush_r+0x1a>
 8004eb2:	f000 f8bb 	bl	800502c <__sinit>
 8004eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f3      	beq.n	8004ea6 <_fflush_r+0xa>
 8004ebe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ec0:	07d0      	lsls	r0, r2, #31
 8004ec2:	d404      	bmi.n	8004ece <_fflush_r+0x32>
 8004ec4:	0599      	lsls	r1, r3, #22
 8004ec6:	d402      	bmi.n	8004ece <_fflush_r+0x32>
 8004ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004eca:	f000 fa0a 	bl	80052e2 <__retarget_lock_acquire_recursive>
 8004ece:	4628      	mov	r0, r5
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	f7ff ff5f 	bl	8004d94 <__sflush_r>
 8004ed6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ed8:	07da      	lsls	r2, r3, #31
 8004eda:	4605      	mov	r5, r0
 8004edc:	d4e4      	bmi.n	8004ea8 <_fflush_r+0xc>
 8004ede:	89a3      	ldrh	r3, [r4, #12]
 8004ee0:	059b      	lsls	r3, r3, #22
 8004ee2:	d4e1      	bmi.n	8004ea8 <_fflush_r+0xc>
 8004ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ee6:	f000 f9fd 	bl	80052e4 <__retarget_lock_release_recursive>
 8004eea:	e7dd      	b.n	8004ea8 <_fflush_r+0xc>

08004eec <fflush>:
 8004eec:	4601      	mov	r1, r0
 8004eee:	b920      	cbnz	r0, 8004efa <fflush+0xe>
 8004ef0:	4a04      	ldr	r2, [pc, #16]	@ (8004f04 <fflush+0x18>)
 8004ef2:	4905      	ldr	r1, [pc, #20]	@ (8004f08 <fflush+0x1c>)
 8004ef4:	4805      	ldr	r0, [pc, #20]	@ (8004f0c <fflush+0x20>)
 8004ef6:	f000 b8b1 	b.w	800505c <_fwalk_sglue>
 8004efa:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <fflush+0x24>)
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	f7ff bfcd 	b.w	8004e9c <_fflush_r>
 8004f02:	bf00      	nop
 8004f04:	20000010 	.word	0x20000010
 8004f08:	08004e9d 	.word	0x08004e9d
 8004f0c:	20000020 	.word	0x20000020
 8004f10:	2000001c 	.word	0x2000001c

08004f14 <std>:
 8004f14:	2300      	movs	r3, #0
 8004f16:	b510      	push	{r4, lr}
 8004f18:	4604      	mov	r4, r0
 8004f1a:	e9c0 3300 	strd	r3, r3, [r0]
 8004f1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f22:	6083      	str	r3, [r0, #8]
 8004f24:	8181      	strh	r1, [r0, #12]
 8004f26:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f28:	81c2      	strh	r2, [r0, #14]
 8004f2a:	6183      	str	r3, [r0, #24]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	2208      	movs	r2, #8
 8004f30:	305c      	adds	r0, #92	@ 0x5c
 8004f32:	f000 f906 	bl	8005142 <memset>
 8004f36:	4b0d      	ldr	r3, [pc, #52]	@ (8004f6c <std+0x58>)
 8004f38:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <std+0x5c>)
 8004f3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f74 <std+0x60>)
 8004f40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f42:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <std+0x64>)
 8004f44:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f46:	4b0d      	ldr	r3, [pc, #52]	@ (8004f7c <std+0x68>)
 8004f48:	6224      	str	r4, [r4, #32]
 8004f4a:	429c      	cmp	r4, r3
 8004f4c:	d006      	beq.n	8004f5c <std+0x48>
 8004f4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f52:	4294      	cmp	r4, r2
 8004f54:	d002      	beq.n	8004f5c <std+0x48>
 8004f56:	33d0      	adds	r3, #208	@ 0xd0
 8004f58:	429c      	cmp	r4, r3
 8004f5a:	d105      	bne.n	8004f68 <std+0x54>
 8004f5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f64:	f000 b9bc 	b.w	80052e0 <__retarget_lock_init_recursive>
 8004f68:	bd10      	pop	{r4, pc}
 8004f6a:	bf00      	nop
 8004f6c:	080050bd 	.word	0x080050bd
 8004f70:	080050df 	.word	0x080050df
 8004f74:	08005117 	.word	0x08005117
 8004f78:	0800513b 	.word	0x0800513b
 8004f7c:	20004598 	.word	0x20004598

08004f80 <stdio_exit_handler>:
 8004f80:	4a02      	ldr	r2, [pc, #8]	@ (8004f8c <stdio_exit_handler+0xc>)
 8004f82:	4903      	ldr	r1, [pc, #12]	@ (8004f90 <stdio_exit_handler+0x10>)
 8004f84:	4803      	ldr	r0, [pc, #12]	@ (8004f94 <stdio_exit_handler+0x14>)
 8004f86:	f000 b869 	b.w	800505c <_fwalk_sglue>
 8004f8a:	bf00      	nop
 8004f8c:	20000010 	.word	0x20000010
 8004f90:	08004e9d 	.word	0x08004e9d
 8004f94:	20000020 	.word	0x20000020

08004f98 <cleanup_stdio>:
 8004f98:	6841      	ldr	r1, [r0, #4]
 8004f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004fcc <cleanup_stdio+0x34>)
 8004f9c:	4299      	cmp	r1, r3
 8004f9e:	b510      	push	{r4, lr}
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	d001      	beq.n	8004fa8 <cleanup_stdio+0x10>
 8004fa4:	f7ff ff7a 	bl	8004e9c <_fflush_r>
 8004fa8:	68a1      	ldr	r1, [r4, #8]
 8004faa:	4b09      	ldr	r3, [pc, #36]	@ (8004fd0 <cleanup_stdio+0x38>)
 8004fac:	4299      	cmp	r1, r3
 8004fae:	d002      	beq.n	8004fb6 <cleanup_stdio+0x1e>
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f7ff ff73 	bl	8004e9c <_fflush_r>
 8004fb6:	68e1      	ldr	r1, [r4, #12]
 8004fb8:	4b06      	ldr	r3, [pc, #24]	@ (8004fd4 <cleanup_stdio+0x3c>)
 8004fba:	4299      	cmp	r1, r3
 8004fbc:	d004      	beq.n	8004fc8 <cleanup_stdio+0x30>
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fc4:	f7ff bf6a 	b.w	8004e9c <_fflush_r>
 8004fc8:	bd10      	pop	{r4, pc}
 8004fca:	bf00      	nop
 8004fcc:	20004598 	.word	0x20004598
 8004fd0:	20004600 	.word	0x20004600
 8004fd4:	20004668 	.word	0x20004668

08004fd8 <global_stdio_init.part.0>:
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	4b0b      	ldr	r3, [pc, #44]	@ (8005008 <global_stdio_init.part.0+0x30>)
 8004fdc:	4c0b      	ldr	r4, [pc, #44]	@ (800500c <global_stdio_init.part.0+0x34>)
 8004fde:	4a0c      	ldr	r2, [pc, #48]	@ (8005010 <global_stdio_init.part.0+0x38>)
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2104      	movs	r1, #4
 8004fe8:	f7ff ff94 	bl	8004f14 <std>
 8004fec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	2109      	movs	r1, #9
 8004ff4:	f7ff ff8e 	bl	8004f14 <std>
 8004ff8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005002:	2112      	movs	r1, #18
 8005004:	f7ff bf86 	b.w	8004f14 <std>
 8005008:	200046d0 	.word	0x200046d0
 800500c:	20004598 	.word	0x20004598
 8005010:	08004f81 	.word	0x08004f81

08005014 <__sfp_lock_acquire>:
 8005014:	4801      	ldr	r0, [pc, #4]	@ (800501c <__sfp_lock_acquire+0x8>)
 8005016:	f000 b964 	b.w	80052e2 <__retarget_lock_acquire_recursive>
 800501a:	bf00      	nop
 800501c:	200046d9 	.word	0x200046d9

08005020 <__sfp_lock_release>:
 8005020:	4801      	ldr	r0, [pc, #4]	@ (8005028 <__sfp_lock_release+0x8>)
 8005022:	f000 b95f 	b.w	80052e4 <__retarget_lock_release_recursive>
 8005026:	bf00      	nop
 8005028:	200046d9 	.word	0x200046d9

0800502c <__sinit>:
 800502c:	b510      	push	{r4, lr}
 800502e:	4604      	mov	r4, r0
 8005030:	f7ff fff0 	bl	8005014 <__sfp_lock_acquire>
 8005034:	6a23      	ldr	r3, [r4, #32]
 8005036:	b11b      	cbz	r3, 8005040 <__sinit+0x14>
 8005038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800503c:	f7ff bff0 	b.w	8005020 <__sfp_lock_release>
 8005040:	4b04      	ldr	r3, [pc, #16]	@ (8005054 <__sinit+0x28>)
 8005042:	6223      	str	r3, [r4, #32]
 8005044:	4b04      	ldr	r3, [pc, #16]	@ (8005058 <__sinit+0x2c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f5      	bne.n	8005038 <__sinit+0xc>
 800504c:	f7ff ffc4 	bl	8004fd8 <global_stdio_init.part.0>
 8005050:	e7f2      	b.n	8005038 <__sinit+0xc>
 8005052:	bf00      	nop
 8005054:	08004f99 	.word	0x08004f99
 8005058:	200046d0 	.word	0x200046d0

0800505c <_fwalk_sglue>:
 800505c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005060:	4607      	mov	r7, r0
 8005062:	4688      	mov	r8, r1
 8005064:	4614      	mov	r4, r2
 8005066:	2600      	movs	r6, #0
 8005068:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800506c:	f1b9 0901 	subs.w	r9, r9, #1
 8005070:	d505      	bpl.n	800507e <_fwalk_sglue+0x22>
 8005072:	6824      	ldr	r4, [r4, #0]
 8005074:	2c00      	cmp	r4, #0
 8005076:	d1f7      	bne.n	8005068 <_fwalk_sglue+0xc>
 8005078:	4630      	mov	r0, r6
 800507a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800507e:	89ab      	ldrh	r3, [r5, #12]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d907      	bls.n	8005094 <_fwalk_sglue+0x38>
 8005084:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005088:	3301      	adds	r3, #1
 800508a:	d003      	beq.n	8005094 <_fwalk_sglue+0x38>
 800508c:	4629      	mov	r1, r5
 800508e:	4638      	mov	r0, r7
 8005090:	47c0      	blx	r8
 8005092:	4306      	orrs	r6, r0
 8005094:	3568      	adds	r5, #104	@ 0x68
 8005096:	e7e9      	b.n	800506c <_fwalk_sglue+0x10>

08005098 <iprintf>:
 8005098:	b40f      	push	{r0, r1, r2, r3}
 800509a:	b507      	push	{r0, r1, r2, lr}
 800509c:	4906      	ldr	r1, [pc, #24]	@ (80050b8 <iprintf+0x20>)
 800509e:	ab04      	add	r3, sp, #16
 80050a0:	6808      	ldr	r0, [r1, #0]
 80050a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80050a6:	6881      	ldr	r1, [r0, #8]
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	f000 fa3f 	bl	800552c <_vfiprintf_r>
 80050ae:	b003      	add	sp, #12
 80050b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050b4:	b004      	add	sp, #16
 80050b6:	4770      	bx	lr
 80050b8:	2000001c 	.word	0x2000001c

080050bc <__sread>:
 80050bc:	b510      	push	{r4, lr}
 80050be:	460c      	mov	r4, r1
 80050c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c4:	f000 f8be 	bl	8005244 <_read_r>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	bfab      	itete	ge
 80050cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80050ce:	89a3      	ldrhlt	r3, [r4, #12]
 80050d0:	181b      	addge	r3, r3, r0
 80050d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80050d6:	bfac      	ite	ge
 80050d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80050da:	81a3      	strhlt	r3, [r4, #12]
 80050dc:	bd10      	pop	{r4, pc}

080050de <__swrite>:
 80050de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e2:	461f      	mov	r7, r3
 80050e4:	898b      	ldrh	r3, [r1, #12]
 80050e6:	05db      	lsls	r3, r3, #23
 80050e8:	4605      	mov	r5, r0
 80050ea:	460c      	mov	r4, r1
 80050ec:	4616      	mov	r6, r2
 80050ee:	d505      	bpl.n	80050fc <__swrite+0x1e>
 80050f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f4:	2302      	movs	r3, #2
 80050f6:	2200      	movs	r2, #0
 80050f8:	f000 f892 	bl	8005220 <_lseek_r>
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005102:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005106:	81a3      	strh	r3, [r4, #12]
 8005108:	4632      	mov	r2, r6
 800510a:	463b      	mov	r3, r7
 800510c:	4628      	mov	r0, r5
 800510e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005112:	f000 b8a9 	b.w	8005268 <_write_r>

08005116 <__sseek>:
 8005116:	b510      	push	{r4, lr}
 8005118:	460c      	mov	r4, r1
 800511a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800511e:	f000 f87f 	bl	8005220 <_lseek_r>
 8005122:	1c43      	adds	r3, r0, #1
 8005124:	89a3      	ldrh	r3, [r4, #12]
 8005126:	bf15      	itete	ne
 8005128:	6560      	strne	r0, [r4, #84]	@ 0x54
 800512a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800512e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005132:	81a3      	strheq	r3, [r4, #12]
 8005134:	bf18      	it	ne
 8005136:	81a3      	strhne	r3, [r4, #12]
 8005138:	bd10      	pop	{r4, pc}

0800513a <__sclose>:
 800513a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800513e:	f000 b809 	b.w	8005154 <_close_r>

08005142 <memset>:
 8005142:	4402      	add	r2, r0
 8005144:	4603      	mov	r3, r0
 8005146:	4293      	cmp	r3, r2
 8005148:	d100      	bne.n	800514c <memset+0xa>
 800514a:	4770      	bx	lr
 800514c:	f803 1b01 	strb.w	r1, [r3], #1
 8005150:	e7f9      	b.n	8005146 <memset+0x4>
	...

08005154 <_close_r>:
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	4d06      	ldr	r5, [pc, #24]	@ (8005170 <_close_r+0x1c>)
 8005158:	2300      	movs	r3, #0
 800515a:	4604      	mov	r4, r0
 800515c:	4608      	mov	r0, r1
 800515e:	602b      	str	r3, [r5, #0]
 8005160:	f000 fe84 	bl	8005e6c <_close>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d102      	bne.n	800516e <_close_r+0x1a>
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	b103      	cbz	r3, 800516e <_close_r+0x1a>
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	200046d4 	.word	0x200046d4

08005174 <_reclaim_reent>:
 8005174:	4b29      	ldr	r3, [pc, #164]	@ (800521c <_reclaim_reent+0xa8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4283      	cmp	r3, r0
 800517a:	b570      	push	{r4, r5, r6, lr}
 800517c:	4604      	mov	r4, r0
 800517e:	d04b      	beq.n	8005218 <_reclaim_reent+0xa4>
 8005180:	69c3      	ldr	r3, [r0, #28]
 8005182:	b1ab      	cbz	r3, 80051b0 <_reclaim_reent+0x3c>
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	b16b      	cbz	r3, 80051a4 <_reclaim_reent+0x30>
 8005188:	2500      	movs	r5, #0
 800518a:	69e3      	ldr	r3, [r4, #28]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	5959      	ldr	r1, [r3, r5]
 8005190:	2900      	cmp	r1, #0
 8005192:	d13b      	bne.n	800520c <_reclaim_reent+0x98>
 8005194:	3504      	adds	r5, #4
 8005196:	2d80      	cmp	r5, #128	@ 0x80
 8005198:	d1f7      	bne.n	800518a <_reclaim_reent+0x16>
 800519a:	69e3      	ldr	r3, [r4, #28]
 800519c:	4620      	mov	r0, r4
 800519e:	68d9      	ldr	r1, [r3, #12]
 80051a0:	f000 f8a2 	bl	80052e8 <_free_r>
 80051a4:	69e3      	ldr	r3, [r4, #28]
 80051a6:	6819      	ldr	r1, [r3, #0]
 80051a8:	b111      	cbz	r1, 80051b0 <_reclaim_reent+0x3c>
 80051aa:	4620      	mov	r0, r4
 80051ac:	f000 f89c 	bl	80052e8 <_free_r>
 80051b0:	6961      	ldr	r1, [r4, #20]
 80051b2:	b111      	cbz	r1, 80051ba <_reclaim_reent+0x46>
 80051b4:	4620      	mov	r0, r4
 80051b6:	f000 f897 	bl	80052e8 <_free_r>
 80051ba:	69e1      	ldr	r1, [r4, #28]
 80051bc:	b111      	cbz	r1, 80051c4 <_reclaim_reent+0x50>
 80051be:	4620      	mov	r0, r4
 80051c0:	f000 f892 	bl	80052e8 <_free_r>
 80051c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80051c6:	b111      	cbz	r1, 80051ce <_reclaim_reent+0x5a>
 80051c8:	4620      	mov	r0, r4
 80051ca:	f000 f88d 	bl	80052e8 <_free_r>
 80051ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051d0:	b111      	cbz	r1, 80051d8 <_reclaim_reent+0x64>
 80051d2:	4620      	mov	r0, r4
 80051d4:	f000 f888 	bl	80052e8 <_free_r>
 80051d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80051da:	b111      	cbz	r1, 80051e2 <_reclaim_reent+0x6e>
 80051dc:	4620      	mov	r0, r4
 80051de:	f000 f883 	bl	80052e8 <_free_r>
 80051e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80051e4:	b111      	cbz	r1, 80051ec <_reclaim_reent+0x78>
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 f87e 	bl	80052e8 <_free_r>
 80051ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80051ee:	b111      	cbz	r1, 80051f6 <_reclaim_reent+0x82>
 80051f0:	4620      	mov	r0, r4
 80051f2:	f000 f879 	bl	80052e8 <_free_r>
 80051f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80051f8:	b111      	cbz	r1, 8005200 <_reclaim_reent+0x8c>
 80051fa:	4620      	mov	r0, r4
 80051fc:	f000 f874 	bl	80052e8 <_free_r>
 8005200:	6a23      	ldr	r3, [r4, #32]
 8005202:	b14b      	cbz	r3, 8005218 <_reclaim_reent+0xa4>
 8005204:	4620      	mov	r0, r4
 8005206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800520a:	4718      	bx	r3
 800520c:	680e      	ldr	r6, [r1, #0]
 800520e:	4620      	mov	r0, r4
 8005210:	f000 f86a 	bl	80052e8 <_free_r>
 8005214:	4631      	mov	r1, r6
 8005216:	e7bb      	b.n	8005190 <_reclaim_reent+0x1c>
 8005218:	bd70      	pop	{r4, r5, r6, pc}
 800521a:	bf00      	nop
 800521c:	2000001c 	.word	0x2000001c

08005220 <_lseek_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4d07      	ldr	r5, [pc, #28]	@ (8005240 <_lseek_r+0x20>)
 8005224:	4604      	mov	r4, r0
 8005226:	4608      	mov	r0, r1
 8005228:	4611      	mov	r1, r2
 800522a:	2200      	movs	r2, #0
 800522c:	602a      	str	r2, [r5, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	f000 fddd 	bl	8005dee <_lseek>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	d102      	bne.n	800523e <_lseek_r+0x1e>
 8005238:	682b      	ldr	r3, [r5, #0]
 800523a:	b103      	cbz	r3, 800523e <_lseek_r+0x1e>
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	200046d4 	.word	0x200046d4

08005244 <_read_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	4d07      	ldr	r5, [pc, #28]	@ (8005264 <_read_r+0x20>)
 8005248:	4604      	mov	r4, r0
 800524a:	4608      	mov	r0, r1
 800524c:	4611      	mov	r1, r2
 800524e:	2200      	movs	r2, #0
 8005250:	602a      	str	r2, [r5, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	f000 fd75 	bl	8005d42 <_read>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d102      	bne.n	8005262 <_read_r+0x1e>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	b103      	cbz	r3, 8005262 <_read_r+0x1e>
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	200046d4 	.word	0x200046d4

08005268 <_write_r>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	4d07      	ldr	r5, [pc, #28]	@ (8005288 <_write_r+0x20>)
 800526c:	4604      	mov	r4, r0
 800526e:	4608      	mov	r0, r1
 8005270:	4611      	mov	r1, r2
 8005272:	2200      	movs	r2, #0
 8005274:	602a      	str	r2, [r5, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	f000 fdcb 	bl	8005e12 <_write>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d102      	bne.n	8005286 <_write_r+0x1e>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	b103      	cbz	r3, 8005286 <_write_r+0x1e>
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	200046d4 	.word	0x200046d4

0800528c <__errno>:
 800528c:	4b01      	ldr	r3, [pc, #4]	@ (8005294 <__errno+0x8>)
 800528e:	6818      	ldr	r0, [r3, #0]
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	2000001c 	.word	0x2000001c

08005298 <__libc_init_array>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	4d0d      	ldr	r5, [pc, #52]	@ (80052d0 <__libc_init_array+0x38>)
 800529c:	4c0d      	ldr	r4, [pc, #52]	@ (80052d4 <__libc_init_array+0x3c>)
 800529e:	1b64      	subs	r4, r4, r5
 80052a0:	10a4      	asrs	r4, r4, #2
 80052a2:	2600      	movs	r6, #0
 80052a4:	42a6      	cmp	r6, r4
 80052a6:	d109      	bne.n	80052bc <__libc_init_array+0x24>
 80052a8:	4d0b      	ldr	r5, [pc, #44]	@ (80052d8 <__libc_init_array+0x40>)
 80052aa:	4c0c      	ldr	r4, [pc, #48]	@ (80052dc <__libc_init_array+0x44>)
 80052ac:	f000 ffa2 	bl	80061f4 <_init>
 80052b0:	1b64      	subs	r4, r4, r5
 80052b2:	10a4      	asrs	r4, r4, #2
 80052b4:	2600      	movs	r6, #0
 80052b6:	42a6      	cmp	r6, r4
 80052b8:	d105      	bne.n	80052c6 <__libc_init_array+0x2e>
 80052ba:	bd70      	pop	{r4, r5, r6, pc}
 80052bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c0:	4798      	blx	r3
 80052c2:	3601      	adds	r6, #1
 80052c4:	e7ee      	b.n	80052a4 <__libc_init_array+0xc>
 80052c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ca:	4798      	blx	r3
 80052cc:	3601      	adds	r6, #1
 80052ce:	e7f2      	b.n	80052b6 <__libc_init_array+0x1e>
 80052d0:	08006358 	.word	0x08006358
 80052d4:	08006358 	.word	0x08006358
 80052d8:	08006358 	.word	0x08006358
 80052dc:	0800635c 	.word	0x0800635c

080052e0 <__retarget_lock_init_recursive>:
 80052e0:	4770      	bx	lr

080052e2 <__retarget_lock_acquire_recursive>:
 80052e2:	4770      	bx	lr

080052e4 <__retarget_lock_release_recursive>:
 80052e4:	4770      	bx	lr
	...

080052e8 <_free_r>:
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	4605      	mov	r5, r0
 80052ec:	2900      	cmp	r1, #0
 80052ee:	d041      	beq.n	8005374 <_free_r+0x8c>
 80052f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f4:	1f0c      	subs	r4, r1, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bfb8      	it	lt
 80052fa:	18e4      	addlt	r4, r4, r3
 80052fc:	f000 f8e0 	bl	80054c0 <__malloc_lock>
 8005300:	4a1d      	ldr	r2, [pc, #116]	@ (8005378 <_free_r+0x90>)
 8005302:	6813      	ldr	r3, [r2, #0]
 8005304:	b933      	cbnz	r3, 8005314 <_free_r+0x2c>
 8005306:	6063      	str	r3, [r4, #4]
 8005308:	6014      	str	r4, [r2, #0]
 800530a:	4628      	mov	r0, r5
 800530c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005310:	f000 b8dc 	b.w	80054cc <__malloc_unlock>
 8005314:	42a3      	cmp	r3, r4
 8005316:	d908      	bls.n	800532a <_free_r+0x42>
 8005318:	6820      	ldr	r0, [r4, #0]
 800531a:	1821      	adds	r1, r4, r0
 800531c:	428b      	cmp	r3, r1
 800531e:	bf01      	itttt	eq
 8005320:	6819      	ldreq	r1, [r3, #0]
 8005322:	685b      	ldreq	r3, [r3, #4]
 8005324:	1809      	addeq	r1, r1, r0
 8005326:	6021      	streq	r1, [r4, #0]
 8005328:	e7ed      	b.n	8005306 <_free_r+0x1e>
 800532a:	461a      	mov	r2, r3
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	b10b      	cbz	r3, 8005334 <_free_r+0x4c>
 8005330:	42a3      	cmp	r3, r4
 8005332:	d9fa      	bls.n	800532a <_free_r+0x42>
 8005334:	6811      	ldr	r1, [r2, #0]
 8005336:	1850      	adds	r0, r2, r1
 8005338:	42a0      	cmp	r0, r4
 800533a:	d10b      	bne.n	8005354 <_free_r+0x6c>
 800533c:	6820      	ldr	r0, [r4, #0]
 800533e:	4401      	add	r1, r0
 8005340:	1850      	adds	r0, r2, r1
 8005342:	4283      	cmp	r3, r0
 8005344:	6011      	str	r1, [r2, #0]
 8005346:	d1e0      	bne.n	800530a <_free_r+0x22>
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	6053      	str	r3, [r2, #4]
 800534e:	4408      	add	r0, r1
 8005350:	6010      	str	r0, [r2, #0]
 8005352:	e7da      	b.n	800530a <_free_r+0x22>
 8005354:	d902      	bls.n	800535c <_free_r+0x74>
 8005356:	230c      	movs	r3, #12
 8005358:	602b      	str	r3, [r5, #0]
 800535a:	e7d6      	b.n	800530a <_free_r+0x22>
 800535c:	6820      	ldr	r0, [r4, #0]
 800535e:	1821      	adds	r1, r4, r0
 8005360:	428b      	cmp	r3, r1
 8005362:	bf04      	itt	eq
 8005364:	6819      	ldreq	r1, [r3, #0]
 8005366:	685b      	ldreq	r3, [r3, #4]
 8005368:	6063      	str	r3, [r4, #4]
 800536a:	bf04      	itt	eq
 800536c:	1809      	addeq	r1, r1, r0
 800536e:	6021      	streq	r1, [r4, #0]
 8005370:	6054      	str	r4, [r2, #4]
 8005372:	e7ca      	b.n	800530a <_free_r+0x22>
 8005374:	bd38      	pop	{r3, r4, r5, pc}
 8005376:	bf00      	nop
 8005378:	200046e0 	.word	0x200046e0

0800537c <sbrk_aligned>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	4e0f      	ldr	r6, [pc, #60]	@ (80053bc <sbrk_aligned+0x40>)
 8005380:	460c      	mov	r4, r1
 8005382:	6831      	ldr	r1, [r6, #0]
 8005384:	4605      	mov	r5, r0
 8005386:	b911      	cbnz	r1, 800538e <sbrk_aligned+0x12>
 8005388:	f000 fc0a 	bl	8005ba0 <_sbrk_r>
 800538c:	6030      	str	r0, [r6, #0]
 800538e:	4621      	mov	r1, r4
 8005390:	4628      	mov	r0, r5
 8005392:	f000 fc05 	bl	8005ba0 <_sbrk_r>
 8005396:	1c43      	adds	r3, r0, #1
 8005398:	d103      	bne.n	80053a2 <sbrk_aligned+0x26>
 800539a:	f04f 34ff 	mov.w	r4, #4294967295
 800539e:	4620      	mov	r0, r4
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	1cc4      	adds	r4, r0, #3
 80053a4:	f024 0403 	bic.w	r4, r4, #3
 80053a8:	42a0      	cmp	r0, r4
 80053aa:	d0f8      	beq.n	800539e <sbrk_aligned+0x22>
 80053ac:	1a21      	subs	r1, r4, r0
 80053ae:	4628      	mov	r0, r5
 80053b0:	f000 fbf6 	bl	8005ba0 <_sbrk_r>
 80053b4:	3001      	adds	r0, #1
 80053b6:	d1f2      	bne.n	800539e <sbrk_aligned+0x22>
 80053b8:	e7ef      	b.n	800539a <sbrk_aligned+0x1e>
 80053ba:	bf00      	nop
 80053bc:	200046dc 	.word	0x200046dc

080053c0 <_malloc_r>:
 80053c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053c4:	1ccd      	adds	r5, r1, #3
 80053c6:	f025 0503 	bic.w	r5, r5, #3
 80053ca:	3508      	adds	r5, #8
 80053cc:	2d0c      	cmp	r5, #12
 80053ce:	bf38      	it	cc
 80053d0:	250c      	movcc	r5, #12
 80053d2:	2d00      	cmp	r5, #0
 80053d4:	4606      	mov	r6, r0
 80053d6:	db01      	blt.n	80053dc <_malloc_r+0x1c>
 80053d8:	42a9      	cmp	r1, r5
 80053da:	d904      	bls.n	80053e6 <_malloc_r+0x26>
 80053dc:	230c      	movs	r3, #12
 80053de:	6033      	str	r3, [r6, #0]
 80053e0:	2000      	movs	r0, #0
 80053e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054bc <_malloc_r+0xfc>
 80053ea:	f000 f869 	bl	80054c0 <__malloc_lock>
 80053ee:	f8d8 3000 	ldr.w	r3, [r8]
 80053f2:	461c      	mov	r4, r3
 80053f4:	bb44      	cbnz	r4, 8005448 <_malloc_r+0x88>
 80053f6:	4629      	mov	r1, r5
 80053f8:	4630      	mov	r0, r6
 80053fa:	f7ff ffbf 	bl	800537c <sbrk_aligned>
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	4604      	mov	r4, r0
 8005402:	d158      	bne.n	80054b6 <_malloc_r+0xf6>
 8005404:	f8d8 4000 	ldr.w	r4, [r8]
 8005408:	4627      	mov	r7, r4
 800540a:	2f00      	cmp	r7, #0
 800540c:	d143      	bne.n	8005496 <_malloc_r+0xd6>
 800540e:	2c00      	cmp	r4, #0
 8005410:	d04b      	beq.n	80054aa <_malloc_r+0xea>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	4639      	mov	r1, r7
 8005416:	4630      	mov	r0, r6
 8005418:	eb04 0903 	add.w	r9, r4, r3
 800541c:	f000 fbc0 	bl	8005ba0 <_sbrk_r>
 8005420:	4581      	cmp	r9, r0
 8005422:	d142      	bne.n	80054aa <_malloc_r+0xea>
 8005424:	6821      	ldr	r1, [r4, #0]
 8005426:	1a6d      	subs	r5, r5, r1
 8005428:	4629      	mov	r1, r5
 800542a:	4630      	mov	r0, r6
 800542c:	f7ff ffa6 	bl	800537c <sbrk_aligned>
 8005430:	3001      	adds	r0, #1
 8005432:	d03a      	beq.n	80054aa <_malloc_r+0xea>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	442b      	add	r3, r5
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	f8d8 3000 	ldr.w	r3, [r8]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	bb62      	cbnz	r2, 800549c <_malloc_r+0xdc>
 8005442:	f8c8 7000 	str.w	r7, [r8]
 8005446:	e00f      	b.n	8005468 <_malloc_r+0xa8>
 8005448:	6822      	ldr	r2, [r4, #0]
 800544a:	1b52      	subs	r2, r2, r5
 800544c:	d420      	bmi.n	8005490 <_malloc_r+0xd0>
 800544e:	2a0b      	cmp	r2, #11
 8005450:	d917      	bls.n	8005482 <_malloc_r+0xc2>
 8005452:	1961      	adds	r1, r4, r5
 8005454:	42a3      	cmp	r3, r4
 8005456:	6025      	str	r5, [r4, #0]
 8005458:	bf18      	it	ne
 800545a:	6059      	strne	r1, [r3, #4]
 800545c:	6863      	ldr	r3, [r4, #4]
 800545e:	bf08      	it	eq
 8005460:	f8c8 1000 	streq.w	r1, [r8]
 8005464:	5162      	str	r2, [r4, r5]
 8005466:	604b      	str	r3, [r1, #4]
 8005468:	4630      	mov	r0, r6
 800546a:	f000 f82f 	bl	80054cc <__malloc_unlock>
 800546e:	f104 000b 	add.w	r0, r4, #11
 8005472:	1d23      	adds	r3, r4, #4
 8005474:	f020 0007 	bic.w	r0, r0, #7
 8005478:	1ac2      	subs	r2, r0, r3
 800547a:	bf1c      	itt	ne
 800547c:	1a1b      	subne	r3, r3, r0
 800547e:	50a3      	strne	r3, [r4, r2]
 8005480:	e7af      	b.n	80053e2 <_malloc_r+0x22>
 8005482:	6862      	ldr	r2, [r4, #4]
 8005484:	42a3      	cmp	r3, r4
 8005486:	bf0c      	ite	eq
 8005488:	f8c8 2000 	streq.w	r2, [r8]
 800548c:	605a      	strne	r2, [r3, #4]
 800548e:	e7eb      	b.n	8005468 <_malloc_r+0xa8>
 8005490:	4623      	mov	r3, r4
 8005492:	6864      	ldr	r4, [r4, #4]
 8005494:	e7ae      	b.n	80053f4 <_malloc_r+0x34>
 8005496:	463c      	mov	r4, r7
 8005498:	687f      	ldr	r7, [r7, #4]
 800549a:	e7b6      	b.n	800540a <_malloc_r+0x4a>
 800549c:	461a      	mov	r2, r3
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	d1fb      	bne.n	800549c <_malloc_r+0xdc>
 80054a4:	2300      	movs	r3, #0
 80054a6:	6053      	str	r3, [r2, #4]
 80054a8:	e7de      	b.n	8005468 <_malloc_r+0xa8>
 80054aa:	230c      	movs	r3, #12
 80054ac:	6033      	str	r3, [r6, #0]
 80054ae:	4630      	mov	r0, r6
 80054b0:	f000 f80c 	bl	80054cc <__malloc_unlock>
 80054b4:	e794      	b.n	80053e0 <_malloc_r+0x20>
 80054b6:	6005      	str	r5, [r0, #0]
 80054b8:	e7d6      	b.n	8005468 <_malloc_r+0xa8>
 80054ba:	bf00      	nop
 80054bc:	200046e0 	.word	0x200046e0

080054c0 <__malloc_lock>:
 80054c0:	4801      	ldr	r0, [pc, #4]	@ (80054c8 <__malloc_lock+0x8>)
 80054c2:	f7ff bf0e 	b.w	80052e2 <__retarget_lock_acquire_recursive>
 80054c6:	bf00      	nop
 80054c8:	200046d8 	.word	0x200046d8

080054cc <__malloc_unlock>:
 80054cc:	4801      	ldr	r0, [pc, #4]	@ (80054d4 <__malloc_unlock+0x8>)
 80054ce:	f7ff bf09 	b.w	80052e4 <__retarget_lock_release_recursive>
 80054d2:	bf00      	nop
 80054d4:	200046d8 	.word	0x200046d8

080054d8 <__sfputc_r>:
 80054d8:	6893      	ldr	r3, [r2, #8]
 80054da:	3b01      	subs	r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	b410      	push	{r4}
 80054e0:	6093      	str	r3, [r2, #8]
 80054e2:	da08      	bge.n	80054f6 <__sfputc_r+0x1e>
 80054e4:	6994      	ldr	r4, [r2, #24]
 80054e6:	42a3      	cmp	r3, r4
 80054e8:	db01      	blt.n	80054ee <__sfputc_r+0x16>
 80054ea:	290a      	cmp	r1, #10
 80054ec:	d103      	bne.n	80054f6 <__sfputc_r+0x1e>
 80054ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054f2:	f000 bac1 	b.w	8005a78 <__swbuf_r>
 80054f6:	6813      	ldr	r3, [r2, #0]
 80054f8:	1c58      	adds	r0, r3, #1
 80054fa:	6010      	str	r0, [r2, #0]
 80054fc:	7019      	strb	r1, [r3, #0]
 80054fe:	4608      	mov	r0, r1
 8005500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005504:	4770      	bx	lr

08005506 <__sfputs_r>:
 8005506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005508:	4606      	mov	r6, r0
 800550a:	460f      	mov	r7, r1
 800550c:	4614      	mov	r4, r2
 800550e:	18d5      	adds	r5, r2, r3
 8005510:	42ac      	cmp	r4, r5
 8005512:	d101      	bne.n	8005518 <__sfputs_r+0x12>
 8005514:	2000      	movs	r0, #0
 8005516:	e007      	b.n	8005528 <__sfputs_r+0x22>
 8005518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800551c:	463a      	mov	r2, r7
 800551e:	4630      	mov	r0, r6
 8005520:	f7ff ffda 	bl	80054d8 <__sfputc_r>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d1f3      	bne.n	8005510 <__sfputs_r+0xa>
 8005528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800552c <_vfiprintf_r>:
 800552c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005530:	460d      	mov	r5, r1
 8005532:	b09d      	sub	sp, #116	@ 0x74
 8005534:	4614      	mov	r4, r2
 8005536:	4698      	mov	r8, r3
 8005538:	4606      	mov	r6, r0
 800553a:	b118      	cbz	r0, 8005544 <_vfiprintf_r+0x18>
 800553c:	6a03      	ldr	r3, [r0, #32]
 800553e:	b90b      	cbnz	r3, 8005544 <_vfiprintf_r+0x18>
 8005540:	f7ff fd74 	bl	800502c <__sinit>
 8005544:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005546:	07d9      	lsls	r1, r3, #31
 8005548:	d405      	bmi.n	8005556 <_vfiprintf_r+0x2a>
 800554a:	89ab      	ldrh	r3, [r5, #12]
 800554c:	059a      	lsls	r2, r3, #22
 800554e:	d402      	bmi.n	8005556 <_vfiprintf_r+0x2a>
 8005550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005552:	f7ff fec6 	bl	80052e2 <__retarget_lock_acquire_recursive>
 8005556:	89ab      	ldrh	r3, [r5, #12]
 8005558:	071b      	lsls	r3, r3, #28
 800555a:	d501      	bpl.n	8005560 <_vfiprintf_r+0x34>
 800555c:	692b      	ldr	r3, [r5, #16]
 800555e:	b99b      	cbnz	r3, 8005588 <_vfiprintf_r+0x5c>
 8005560:	4629      	mov	r1, r5
 8005562:	4630      	mov	r0, r6
 8005564:	f000 fac6 	bl	8005af4 <__swsetup_r>
 8005568:	b170      	cbz	r0, 8005588 <_vfiprintf_r+0x5c>
 800556a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800556c:	07dc      	lsls	r4, r3, #31
 800556e:	d504      	bpl.n	800557a <_vfiprintf_r+0x4e>
 8005570:	f04f 30ff 	mov.w	r0, #4294967295
 8005574:	b01d      	add	sp, #116	@ 0x74
 8005576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557a:	89ab      	ldrh	r3, [r5, #12]
 800557c:	0598      	lsls	r0, r3, #22
 800557e:	d4f7      	bmi.n	8005570 <_vfiprintf_r+0x44>
 8005580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005582:	f7ff feaf 	bl	80052e4 <__retarget_lock_release_recursive>
 8005586:	e7f3      	b.n	8005570 <_vfiprintf_r+0x44>
 8005588:	2300      	movs	r3, #0
 800558a:	9309      	str	r3, [sp, #36]	@ 0x24
 800558c:	2320      	movs	r3, #32
 800558e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005592:	f8cd 800c 	str.w	r8, [sp, #12]
 8005596:	2330      	movs	r3, #48	@ 0x30
 8005598:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005748 <_vfiprintf_r+0x21c>
 800559c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055a0:	f04f 0901 	mov.w	r9, #1
 80055a4:	4623      	mov	r3, r4
 80055a6:	469a      	mov	sl, r3
 80055a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055ac:	b10a      	cbz	r2, 80055b2 <_vfiprintf_r+0x86>
 80055ae:	2a25      	cmp	r2, #37	@ 0x25
 80055b0:	d1f9      	bne.n	80055a6 <_vfiprintf_r+0x7a>
 80055b2:	ebba 0b04 	subs.w	fp, sl, r4
 80055b6:	d00b      	beq.n	80055d0 <_vfiprintf_r+0xa4>
 80055b8:	465b      	mov	r3, fp
 80055ba:	4622      	mov	r2, r4
 80055bc:	4629      	mov	r1, r5
 80055be:	4630      	mov	r0, r6
 80055c0:	f7ff ffa1 	bl	8005506 <__sfputs_r>
 80055c4:	3001      	adds	r0, #1
 80055c6:	f000 80a7 	beq.w	8005718 <_vfiprintf_r+0x1ec>
 80055ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055cc:	445a      	add	r2, fp
 80055ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80055d0:	f89a 3000 	ldrb.w	r3, [sl]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 809f 	beq.w	8005718 <_vfiprintf_r+0x1ec>
 80055da:	2300      	movs	r3, #0
 80055dc:	f04f 32ff 	mov.w	r2, #4294967295
 80055e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055e4:	f10a 0a01 	add.w	sl, sl, #1
 80055e8:	9304      	str	r3, [sp, #16]
 80055ea:	9307      	str	r3, [sp, #28]
 80055ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80055f2:	4654      	mov	r4, sl
 80055f4:	2205      	movs	r2, #5
 80055f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055fa:	4853      	ldr	r0, [pc, #332]	@ (8005748 <_vfiprintf_r+0x21c>)
 80055fc:	f7fa fdf8 	bl	80001f0 <memchr>
 8005600:	9a04      	ldr	r2, [sp, #16]
 8005602:	b9d8      	cbnz	r0, 800563c <_vfiprintf_r+0x110>
 8005604:	06d1      	lsls	r1, r2, #27
 8005606:	bf44      	itt	mi
 8005608:	2320      	movmi	r3, #32
 800560a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800560e:	0713      	lsls	r3, r2, #28
 8005610:	bf44      	itt	mi
 8005612:	232b      	movmi	r3, #43	@ 0x2b
 8005614:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005618:	f89a 3000 	ldrb.w	r3, [sl]
 800561c:	2b2a      	cmp	r3, #42	@ 0x2a
 800561e:	d015      	beq.n	800564c <_vfiprintf_r+0x120>
 8005620:	9a07      	ldr	r2, [sp, #28]
 8005622:	4654      	mov	r4, sl
 8005624:	2000      	movs	r0, #0
 8005626:	f04f 0c0a 	mov.w	ip, #10
 800562a:	4621      	mov	r1, r4
 800562c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005630:	3b30      	subs	r3, #48	@ 0x30
 8005632:	2b09      	cmp	r3, #9
 8005634:	d94b      	bls.n	80056ce <_vfiprintf_r+0x1a2>
 8005636:	b1b0      	cbz	r0, 8005666 <_vfiprintf_r+0x13a>
 8005638:	9207      	str	r2, [sp, #28]
 800563a:	e014      	b.n	8005666 <_vfiprintf_r+0x13a>
 800563c:	eba0 0308 	sub.w	r3, r0, r8
 8005640:	fa09 f303 	lsl.w	r3, r9, r3
 8005644:	4313      	orrs	r3, r2
 8005646:	9304      	str	r3, [sp, #16]
 8005648:	46a2      	mov	sl, r4
 800564a:	e7d2      	b.n	80055f2 <_vfiprintf_r+0xc6>
 800564c:	9b03      	ldr	r3, [sp, #12]
 800564e:	1d19      	adds	r1, r3, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	9103      	str	r1, [sp, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	bfbb      	ittet	lt
 8005658:	425b      	neglt	r3, r3
 800565a:	f042 0202 	orrlt.w	r2, r2, #2
 800565e:	9307      	strge	r3, [sp, #28]
 8005660:	9307      	strlt	r3, [sp, #28]
 8005662:	bfb8      	it	lt
 8005664:	9204      	strlt	r2, [sp, #16]
 8005666:	7823      	ldrb	r3, [r4, #0]
 8005668:	2b2e      	cmp	r3, #46	@ 0x2e
 800566a:	d10a      	bne.n	8005682 <_vfiprintf_r+0x156>
 800566c:	7863      	ldrb	r3, [r4, #1]
 800566e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005670:	d132      	bne.n	80056d8 <_vfiprintf_r+0x1ac>
 8005672:	9b03      	ldr	r3, [sp, #12]
 8005674:	1d1a      	adds	r2, r3, #4
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	9203      	str	r2, [sp, #12]
 800567a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800567e:	3402      	adds	r4, #2
 8005680:	9305      	str	r3, [sp, #20]
 8005682:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005758 <_vfiprintf_r+0x22c>
 8005686:	7821      	ldrb	r1, [r4, #0]
 8005688:	2203      	movs	r2, #3
 800568a:	4650      	mov	r0, sl
 800568c:	f7fa fdb0 	bl	80001f0 <memchr>
 8005690:	b138      	cbz	r0, 80056a2 <_vfiprintf_r+0x176>
 8005692:	9b04      	ldr	r3, [sp, #16]
 8005694:	eba0 000a 	sub.w	r0, r0, sl
 8005698:	2240      	movs	r2, #64	@ 0x40
 800569a:	4082      	lsls	r2, r0
 800569c:	4313      	orrs	r3, r2
 800569e:	3401      	adds	r4, #1
 80056a0:	9304      	str	r3, [sp, #16]
 80056a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a6:	4829      	ldr	r0, [pc, #164]	@ (800574c <_vfiprintf_r+0x220>)
 80056a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056ac:	2206      	movs	r2, #6
 80056ae:	f7fa fd9f 	bl	80001f0 <memchr>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d03f      	beq.n	8005736 <_vfiprintf_r+0x20a>
 80056b6:	4b26      	ldr	r3, [pc, #152]	@ (8005750 <_vfiprintf_r+0x224>)
 80056b8:	bb1b      	cbnz	r3, 8005702 <_vfiprintf_r+0x1d6>
 80056ba:	9b03      	ldr	r3, [sp, #12]
 80056bc:	3307      	adds	r3, #7
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	3308      	adds	r3, #8
 80056c4:	9303      	str	r3, [sp, #12]
 80056c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056c8:	443b      	add	r3, r7
 80056ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80056cc:	e76a      	b.n	80055a4 <_vfiprintf_r+0x78>
 80056ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80056d2:	460c      	mov	r4, r1
 80056d4:	2001      	movs	r0, #1
 80056d6:	e7a8      	b.n	800562a <_vfiprintf_r+0xfe>
 80056d8:	2300      	movs	r3, #0
 80056da:	3401      	adds	r4, #1
 80056dc:	9305      	str	r3, [sp, #20]
 80056de:	4619      	mov	r1, r3
 80056e0:	f04f 0c0a 	mov.w	ip, #10
 80056e4:	4620      	mov	r0, r4
 80056e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056ea:	3a30      	subs	r2, #48	@ 0x30
 80056ec:	2a09      	cmp	r2, #9
 80056ee:	d903      	bls.n	80056f8 <_vfiprintf_r+0x1cc>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0c6      	beq.n	8005682 <_vfiprintf_r+0x156>
 80056f4:	9105      	str	r1, [sp, #20]
 80056f6:	e7c4      	b.n	8005682 <_vfiprintf_r+0x156>
 80056f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80056fc:	4604      	mov	r4, r0
 80056fe:	2301      	movs	r3, #1
 8005700:	e7f0      	b.n	80056e4 <_vfiprintf_r+0x1b8>
 8005702:	ab03      	add	r3, sp, #12
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	462a      	mov	r2, r5
 8005708:	4b12      	ldr	r3, [pc, #72]	@ (8005754 <_vfiprintf_r+0x228>)
 800570a:	a904      	add	r1, sp, #16
 800570c:	4630      	mov	r0, r6
 800570e:	f3af 8000 	nop.w
 8005712:	4607      	mov	r7, r0
 8005714:	1c78      	adds	r0, r7, #1
 8005716:	d1d6      	bne.n	80056c6 <_vfiprintf_r+0x19a>
 8005718:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800571a:	07d9      	lsls	r1, r3, #31
 800571c:	d405      	bmi.n	800572a <_vfiprintf_r+0x1fe>
 800571e:	89ab      	ldrh	r3, [r5, #12]
 8005720:	059a      	lsls	r2, r3, #22
 8005722:	d402      	bmi.n	800572a <_vfiprintf_r+0x1fe>
 8005724:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005726:	f7ff fddd 	bl	80052e4 <__retarget_lock_release_recursive>
 800572a:	89ab      	ldrh	r3, [r5, #12]
 800572c:	065b      	lsls	r3, r3, #25
 800572e:	f53f af1f 	bmi.w	8005570 <_vfiprintf_r+0x44>
 8005732:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005734:	e71e      	b.n	8005574 <_vfiprintf_r+0x48>
 8005736:	ab03      	add	r3, sp, #12
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	462a      	mov	r2, r5
 800573c:	4b05      	ldr	r3, [pc, #20]	@ (8005754 <_vfiprintf_r+0x228>)
 800573e:	a904      	add	r1, sp, #16
 8005740:	4630      	mov	r0, r6
 8005742:	f000 f879 	bl	8005838 <_printf_i>
 8005746:	e7e4      	b.n	8005712 <_vfiprintf_r+0x1e6>
 8005748:	08006300 	.word	0x08006300
 800574c:	0800630a 	.word	0x0800630a
 8005750:	00000000 	.word	0x00000000
 8005754:	08005507 	.word	0x08005507
 8005758:	08006306 	.word	0x08006306

0800575c <_printf_common>:
 800575c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005760:	4616      	mov	r6, r2
 8005762:	4698      	mov	r8, r3
 8005764:	688a      	ldr	r2, [r1, #8]
 8005766:	690b      	ldr	r3, [r1, #16]
 8005768:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800576c:	4293      	cmp	r3, r2
 800576e:	bfb8      	it	lt
 8005770:	4613      	movlt	r3, r2
 8005772:	6033      	str	r3, [r6, #0]
 8005774:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005778:	4607      	mov	r7, r0
 800577a:	460c      	mov	r4, r1
 800577c:	b10a      	cbz	r2, 8005782 <_printf_common+0x26>
 800577e:	3301      	adds	r3, #1
 8005780:	6033      	str	r3, [r6, #0]
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	0699      	lsls	r1, r3, #26
 8005786:	bf42      	ittt	mi
 8005788:	6833      	ldrmi	r3, [r6, #0]
 800578a:	3302      	addmi	r3, #2
 800578c:	6033      	strmi	r3, [r6, #0]
 800578e:	6825      	ldr	r5, [r4, #0]
 8005790:	f015 0506 	ands.w	r5, r5, #6
 8005794:	d106      	bne.n	80057a4 <_printf_common+0x48>
 8005796:	f104 0a19 	add.w	sl, r4, #25
 800579a:	68e3      	ldr	r3, [r4, #12]
 800579c:	6832      	ldr	r2, [r6, #0]
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	42ab      	cmp	r3, r5
 80057a2:	dc26      	bgt.n	80057f2 <_printf_common+0x96>
 80057a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057a8:	6822      	ldr	r2, [r4, #0]
 80057aa:	3b00      	subs	r3, #0
 80057ac:	bf18      	it	ne
 80057ae:	2301      	movne	r3, #1
 80057b0:	0692      	lsls	r2, r2, #26
 80057b2:	d42b      	bmi.n	800580c <_printf_common+0xb0>
 80057b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057b8:	4641      	mov	r1, r8
 80057ba:	4638      	mov	r0, r7
 80057bc:	47c8      	blx	r9
 80057be:	3001      	adds	r0, #1
 80057c0:	d01e      	beq.n	8005800 <_printf_common+0xa4>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	6922      	ldr	r2, [r4, #16]
 80057c6:	f003 0306 	and.w	r3, r3, #6
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	bf02      	ittt	eq
 80057ce:	68e5      	ldreq	r5, [r4, #12]
 80057d0:	6833      	ldreq	r3, [r6, #0]
 80057d2:	1aed      	subeq	r5, r5, r3
 80057d4:	68a3      	ldr	r3, [r4, #8]
 80057d6:	bf0c      	ite	eq
 80057d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057dc:	2500      	movne	r5, #0
 80057de:	4293      	cmp	r3, r2
 80057e0:	bfc4      	itt	gt
 80057e2:	1a9b      	subgt	r3, r3, r2
 80057e4:	18ed      	addgt	r5, r5, r3
 80057e6:	2600      	movs	r6, #0
 80057e8:	341a      	adds	r4, #26
 80057ea:	42b5      	cmp	r5, r6
 80057ec:	d11a      	bne.n	8005824 <_printf_common+0xc8>
 80057ee:	2000      	movs	r0, #0
 80057f0:	e008      	b.n	8005804 <_printf_common+0xa8>
 80057f2:	2301      	movs	r3, #1
 80057f4:	4652      	mov	r2, sl
 80057f6:	4641      	mov	r1, r8
 80057f8:	4638      	mov	r0, r7
 80057fa:	47c8      	blx	r9
 80057fc:	3001      	adds	r0, #1
 80057fe:	d103      	bne.n	8005808 <_printf_common+0xac>
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005808:	3501      	adds	r5, #1
 800580a:	e7c6      	b.n	800579a <_printf_common+0x3e>
 800580c:	18e1      	adds	r1, r4, r3
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	2030      	movs	r0, #48	@ 0x30
 8005812:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005816:	4422      	add	r2, r4
 8005818:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800581c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005820:	3302      	adds	r3, #2
 8005822:	e7c7      	b.n	80057b4 <_printf_common+0x58>
 8005824:	2301      	movs	r3, #1
 8005826:	4622      	mov	r2, r4
 8005828:	4641      	mov	r1, r8
 800582a:	4638      	mov	r0, r7
 800582c:	47c8      	blx	r9
 800582e:	3001      	adds	r0, #1
 8005830:	d0e6      	beq.n	8005800 <_printf_common+0xa4>
 8005832:	3601      	adds	r6, #1
 8005834:	e7d9      	b.n	80057ea <_printf_common+0x8e>
	...

08005838 <_printf_i>:
 8005838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800583c:	7e0f      	ldrb	r7, [r1, #24]
 800583e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005840:	2f78      	cmp	r7, #120	@ 0x78
 8005842:	4691      	mov	r9, r2
 8005844:	4680      	mov	r8, r0
 8005846:	460c      	mov	r4, r1
 8005848:	469a      	mov	sl, r3
 800584a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800584e:	d807      	bhi.n	8005860 <_printf_i+0x28>
 8005850:	2f62      	cmp	r7, #98	@ 0x62
 8005852:	d80a      	bhi.n	800586a <_printf_i+0x32>
 8005854:	2f00      	cmp	r7, #0
 8005856:	f000 80d2 	beq.w	80059fe <_printf_i+0x1c6>
 800585a:	2f58      	cmp	r7, #88	@ 0x58
 800585c:	f000 80b9 	beq.w	80059d2 <_printf_i+0x19a>
 8005860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005864:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005868:	e03a      	b.n	80058e0 <_printf_i+0xa8>
 800586a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800586e:	2b15      	cmp	r3, #21
 8005870:	d8f6      	bhi.n	8005860 <_printf_i+0x28>
 8005872:	a101      	add	r1, pc, #4	@ (adr r1, 8005878 <_printf_i+0x40>)
 8005874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005878:	080058d1 	.word	0x080058d1
 800587c:	080058e5 	.word	0x080058e5
 8005880:	08005861 	.word	0x08005861
 8005884:	08005861 	.word	0x08005861
 8005888:	08005861 	.word	0x08005861
 800588c:	08005861 	.word	0x08005861
 8005890:	080058e5 	.word	0x080058e5
 8005894:	08005861 	.word	0x08005861
 8005898:	08005861 	.word	0x08005861
 800589c:	08005861 	.word	0x08005861
 80058a0:	08005861 	.word	0x08005861
 80058a4:	080059e5 	.word	0x080059e5
 80058a8:	0800590f 	.word	0x0800590f
 80058ac:	0800599f 	.word	0x0800599f
 80058b0:	08005861 	.word	0x08005861
 80058b4:	08005861 	.word	0x08005861
 80058b8:	08005a07 	.word	0x08005a07
 80058bc:	08005861 	.word	0x08005861
 80058c0:	0800590f 	.word	0x0800590f
 80058c4:	08005861 	.word	0x08005861
 80058c8:	08005861 	.word	0x08005861
 80058cc:	080059a7 	.word	0x080059a7
 80058d0:	6833      	ldr	r3, [r6, #0]
 80058d2:	1d1a      	adds	r2, r3, #4
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6032      	str	r2, [r6, #0]
 80058d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058e0:	2301      	movs	r3, #1
 80058e2:	e09d      	b.n	8005a20 <_printf_i+0x1e8>
 80058e4:	6833      	ldr	r3, [r6, #0]
 80058e6:	6820      	ldr	r0, [r4, #0]
 80058e8:	1d19      	adds	r1, r3, #4
 80058ea:	6031      	str	r1, [r6, #0]
 80058ec:	0606      	lsls	r6, r0, #24
 80058ee:	d501      	bpl.n	80058f4 <_printf_i+0xbc>
 80058f0:	681d      	ldr	r5, [r3, #0]
 80058f2:	e003      	b.n	80058fc <_printf_i+0xc4>
 80058f4:	0645      	lsls	r5, r0, #25
 80058f6:	d5fb      	bpl.n	80058f0 <_printf_i+0xb8>
 80058f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058fc:	2d00      	cmp	r5, #0
 80058fe:	da03      	bge.n	8005908 <_printf_i+0xd0>
 8005900:	232d      	movs	r3, #45	@ 0x2d
 8005902:	426d      	negs	r5, r5
 8005904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005908:	4859      	ldr	r0, [pc, #356]	@ (8005a70 <_printf_i+0x238>)
 800590a:	230a      	movs	r3, #10
 800590c:	e011      	b.n	8005932 <_printf_i+0xfa>
 800590e:	6821      	ldr	r1, [r4, #0]
 8005910:	6833      	ldr	r3, [r6, #0]
 8005912:	0608      	lsls	r0, r1, #24
 8005914:	f853 5b04 	ldr.w	r5, [r3], #4
 8005918:	d402      	bmi.n	8005920 <_printf_i+0xe8>
 800591a:	0649      	lsls	r1, r1, #25
 800591c:	bf48      	it	mi
 800591e:	b2ad      	uxthmi	r5, r5
 8005920:	2f6f      	cmp	r7, #111	@ 0x6f
 8005922:	4853      	ldr	r0, [pc, #332]	@ (8005a70 <_printf_i+0x238>)
 8005924:	6033      	str	r3, [r6, #0]
 8005926:	bf14      	ite	ne
 8005928:	230a      	movne	r3, #10
 800592a:	2308      	moveq	r3, #8
 800592c:	2100      	movs	r1, #0
 800592e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005932:	6866      	ldr	r6, [r4, #4]
 8005934:	60a6      	str	r6, [r4, #8]
 8005936:	2e00      	cmp	r6, #0
 8005938:	bfa2      	ittt	ge
 800593a:	6821      	ldrge	r1, [r4, #0]
 800593c:	f021 0104 	bicge.w	r1, r1, #4
 8005940:	6021      	strge	r1, [r4, #0]
 8005942:	b90d      	cbnz	r5, 8005948 <_printf_i+0x110>
 8005944:	2e00      	cmp	r6, #0
 8005946:	d04b      	beq.n	80059e0 <_printf_i+0x1a8>
 8005948:	4616      	mov	r6, r2
 800594a:	fbb5 f1f3 	udiv	r1, r5, r3
 800594e:	fb03 5711 	mls	r7, r3, r1, r5
 8005952:	5dc7      	ldrb	r7, [r0, r7]
 8005954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005958:	462f      	mov	r7, r5
 800595a:	42bb      	cmp	r3, r7
 800595c:	460d      	mov	r5, r1
 800595e:	d9f4      	bls.n	800594a <_printf_i+0x112>
 8005960:	2b08      	cmp	r3, #8
 8005962:	d10b      	bne.n	800597c <_printf_i+0x144>
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	07df      	lsls	r7, r3, #31
 8005968:	d508      	bpl.n	800597c <_printf_i+0x144>
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	6861      	ldr	r1, [r4, #4]
 800596e:	4299      	cmp	r1, r3
 8005970:	bfde      	ittt	le
 8005972:	2330      	movle	r3, #48	@ 0x30
 8005974:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005978:	f106 36ff 	addle.w	r6, r6, #4294967295
 800597c:	1b92      	subs	r2, r2, r6
 800597e:	6122      	str	r2, [r4, #16]
 8005980:	f8cd a000 	str.w	sl, [sp]
 8005984:	464b      	mov	r3, r9
 8005986:	aa03      	add	r2, sp, #12
 8005988:	4621      	mov	r1, r4
 800598a:	4640      	mov	r0, r8
 800598c:	f7ff fee6 	bl	800575c <_printf_common>
 8005990:	3001      	adds	r0, #1
 8005992:	d14a      	bne.n	8005a2a <_printf_i+0x1f2>
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	b004      	add	sp, #16
 800599a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	f043 0320 	orr.w	r3, r3, #32
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	4833      	ldr	r0, [pc, #204]	@ (8005a74 <_printf_i+0x23c>)
 80059a8:	2778      	movs	r7, #120	@ 0x78
 80059aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	6831      	ldr	r1, [r6, #0]
 80059b2:	061f      	lsls	r7, r3, #24
 80059b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80059b8:	d402      	bmi.n	80059c0 <_printf_i+0x188>
 80059ba:	065f      	lsls	r7, r3, #25
 80059bc:	bf48      	it	mi
 80059be:	b2ad      	uxthmi	r5, r5
 80059c0:	6031      	str	r1, [r6, #0]
 80059c2:	07d9      	lsls	r1, r3, #31
 80059c4:	bf44      	itt	mi
 80059c6:	f043 0320 	orrmi.w	r3, r3, #32
 80059ca:	6023      	strmi	r3, [r4, #0]
 80059cc:	b11d      	cbz	r5, 80059d6 <_printf_i+0x19e>
 80059ce:	2310      	movs	r3, #16
 80059d0:	e7ac      	b.n	800592c <_printf_i+0xf4>
 80059d2:	4827      	ldr	r0, [pc, #156]	@ (8005a70 <_printf_i+0x238>)
 80059d4:	e7e9      	b.n	80059aa <_printf_i+0x172>
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	f023 0320 	bic.w	r3, r3, #32
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	e7f6      	b.n	80059ce <_printf_i+0x196>
 80059e0:	4616      	mov	r6, r2
 80059e2:	e7bd      	b.n	8005960 <_printf_i+0x128>
 80059e4:	6833      	ldr	r3, [r6, #0]
 80059e6:	6825      	ldr	r5, [r4, #0]
 80059e8:	6961      	ldr	r1, [r4, #20]
 80059ea:	1d18      	adds	r0, r3, #4
 80059ec:	6030      	str	r0, [r6, #0]
 80059ee:	062e      	lsls	r6, r5, #24
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	d501      	bpl.n	80059f8 <_printf_i+0x1c0>
 80059f4:	6019      	str	r1, [r3, #0]
 80059f6:	e002      	b.n	80059fe <_printf_i+0x1c6>
 80059f8:	0668      	lsls	r0, r5, #25
 80059fa:	d5fb      	bpl.n	80059f4 <_printf_i+0x1bc>
 80059fc:	8019      	strh	r1, [r3, #0]
 80059fe:	2300      	movs	r3, #0
 8005a00:	6123      	str	r3, [r4, #16]
 8005a02:	4616      	mov	r6, r2
 8005a04:	e7bc      	b.n	8005980 <_printf_i+0x148>
 8005a06:	6833      	ldr	r3, [r6, #0]
 8005a08:	1d1a      	adds	r2, r3, #4
 8005a0a:	6032      	str	r2, [r6, #0]
 8005a0c:	681e      	ldr	r6, [r3, #0]
 8005a0e:	6862      	ldr	r2, [r4, #4]
 8005a10:	2100      	movs	r1, #0
 8005a12:	4630      	mov	r0, r6
 8005a14:	f7fa fbec 	bl	80001f0 <memchr>
 8005a18:	b108      	cbz	r0, 8005a1e <_printf_i+0x1e6>
 8005a1a:	1b80      	subs	r0, r0, r6
 8005a1c:	6060      	str	r0, [r4, #4]
 8005a1e:	6863      	ldr	r3, [r4, #4]
 8005a20:	6123      	str	r3, [r4, #16]
 8005a22:	2300      	movs	r3, #0
 8005a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a28:	e7aa      	b.n	8005980 <_printf_i+0x148>
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	4632      	mov	r2, r6
 8005a2e:	4649      	mov	r1, r9
 8005a30:	4640      	mov	r0, r8
 8005a32:	47d0      	blx	sl
 8005a34:	3001      	adds	r0, #1
 8005a36:	d0ad      	beq.n	8005994 <_printf_i+0x15c>
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	079b      	lsls	r3, r3, #30
 8005a3c:	d413      	bmi.n	8005a66 <_printf_i+0x22e>
 8005a3e:	68e0      	ldr	r0, [r4, #12]
 8005a40:	9b03      	ldr	r3, [sp, #12]
 8005a42:	4298      	cmp	r0, r3
 8005a44:	bfb8      	it	lt
 8005a46:	4618      	movlt	r0, r3
 8005a48:	e7a6      	b.n	8005998 <_printf_i+0x160>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	4632      	mov	r2, r6
 8005a4e:	4649      	mov	r1, r9
 8005a50:	4640      	mov	r0, r8
 8005a52:	47d0      	blx	sl
 8005a54:	3001      	adds	r0, #1
 8005a56:	d09d      	beq.n	8005994 <_printf_i+0x15c>
 8005a58:	3501      	adds	r5, #1
 8005a5a:	68e3      	ldr	r3, [r4, #12]
 8005a5c:	9903      	ldr	r1, [sp, #12]
 8005a5e:	1a5b      	subs	r3, r3, r1
 8005a60:	42ab      	cmp	r3, r5
 8005a62:	dcf2      	bgt.n	8005a4a <_printf_i+0x212>
 8005a64:	e7eb      	b.n	8005a3e <_printf_i+0x206>
 8005a66:	2500      	movs	r5, #0
 8005a68:	f104 0619 	add.w	r6, r4, #25
 8005a6c:	e7f5      	b.n	8005a5a <_printf_i+0x222>
 8005a6e:	bf00      	nop
 8005a70:	08006311 	.word	0x08006311
 8005a74:	08006322 	.word	0x08006322

08005a78 <__swbuf_r>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	460e      	mov	r6, r1
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	4605      	mov	r5, r0
 8005a80:	b118      	cbz	r0, 8005a8a <__swbuf_r+0x12>
 8005a82:	6a03      	ldr	r3, [r0, #32]
 8005a84:	b90b      	cbnz	r3, 8005a8a <__swbuf_r+0x12>
 8005a86:	f7ff fad1 	bl	800502c <__sinit>
 8005a8a:	69a3      	ldr	r3, [r4, #24]
 8005a8c:	60a3      	str	r3, [r4, #8]
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	071a      	lsls	r2, r3, #28
 8005a92:	d501      	bpl.n	8005a98 <__swbuf_r+0x20>
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	b943      	cbnz	r3, 8005aaa <__swbuf_r+0x32>
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f000 f82a 	bl	8005af4 <__swsetup_r>
 8005aa0:	b118      	cbz	r0, 8005aaa <__swbuf_r+0x32>
 8005aa2:	f04f 37ff 	mov.w	r7, #4294967295
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	6922      	ldr	r2, [r4, #16]
 8005aae:	1a98      	subs	r0, r3, r2
 8005ab0:	6963      	ldr	r3, [r4, #20]
 8005ab2:	b2f6      	uxtb	r6, r6
 8005ab4:	4283      	cmp	r3, r0
 8005ab6:	4637      	mov	r7, r6
 8005ab8:	dc05      	bgt.n	8005ac6 <__swbuf_r+0x4e>
 8005aba:	4621      	mov	r1, r4
 8005abc:	4628      	mov	r0, r5
 8005abe:	f7ff f9ed 	bl	8004e9c <_fflush_r>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d1ed      	bne.n	8005aa2 <__swbuf_r+0x2a>
 8005ac6:	68a3      	ldr	r3, [r4, #8]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	60a3      	str	r3, [r4, #8]
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	6022      	str	r2, [r4, #0]
 8005ad2:	701e      	strb	r6, [r3, #0]
 8005ad4:	6962      	ldr	r2, [r4, #20]
 8005ad6:	1c43      	adds	r3, r0, #1
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d004      	beq.n	8005ae6 <__swbuf_r+0x6e>
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	07db      	lsls	r3, r3, #31
 8005ae0:	d5e1      	bpl.n	8005aa6 <__swbuf_r+0x2e>
 8005ae2:	2e0a      	cmp	r6, #10
 8005ae4:	d1df      	bne.n	8005aa6 <__swbuf_r+0x2e>
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f7ff f9d7 	bl	8004e9c <_fflush_r>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d0d9      	beq.n	8005aa6 <__swbuf_r+0x2e>
 8005af2:	e7d6      	b.n	8005aa2 <__swbuf_r+0x2a>

08005af4 <__swsetup_r>:
 8005af4:	b538      	push	{r3, r4, r5, lr}
 8005af6:	4b29      	ldr	r3, [pc, #164]	@ (8005b9c <__swsetup_r+0xa8>)
 8005af8:	4605      	mov	r5, r0
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	460c      	mov	r4, r1
 8005afe:	b118      	cbz	r0, 8005b08 <__swsetup_r+0x14>
 8005b00:	6a03      	ldr	r3, [r0, #32]
 8005b02:	b90b      	cbnz	r3, 8005b08 <__swsetup_r+0x14>
 8005b04:	f7ff fa92 	bl	800502c <__sinit>
 8005b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b0c:	0719      	lsls	r1, r3, #28
 8005b0e:	d422      	bmi.n	8005b56 <__swsetup_r+0x62>
 8005b10:	06da      	lsls	r2, r3, #27
 8005b12:	d407      	bmi.n	8005b24 <__swsetup_r+0x30>
 8005b14:	2209      	movs	r2, #9
 8005b16:	602a      	str	r2, [r5, #0]
 8005b18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b1c:	81a3      	strh	r3, [r4, #12]
 8005b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b22:	e033      	b.n	8005b8c <__swsetup_r+0x98>
 8005b24:	0758      	lsls	r0, r3, #29
 8005b26:	d512      	bpl.n	8005b4e <__swsetup_r+0x5a>
 8005b28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b2a:	b141      	cbz	r1, 8005b3e <__swsetup_r+0x4a>
 8005b2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b30:	4299      	cmp	r1, r3
 8005b32:	d002      	beq.n	8005b3a <__swsetup_r+0x46>
 8005b34:	4628      	mov	r0, r5
 8005b36:	f7ff fbd7 	bl	80052e8 <_free_r>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b44:	81a3      	strh	r3, [r4, #12]
 8005b46:	2300      	movs	r3, #0
 8005b48:	6063      	str	r3, [r4, #4]
 8005b4a:	6923      	ldr	r3, [r4, #16]
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	f043 0308 	orr.w	r3, r3, #8
 8005b54:	81a3      	strh	r3, [r4, #12]
 8005b56:	6923      	ldr	r3, [r4, #16]
 8005b58:	b94b      	cbnz	r3, 8005b6e <__swsetup_r+0x7a>
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b64:	d003      	beq.n	8005b6e <__swsetup_r+0x7a>
 8005b66:	4621      	mov	r1, r4
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f000 f84f 	bl	8005c0c <__smakebuf_r>
 8005b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b72:	f013 0201 	ands.w	r2, r3, #1
 8005b76:	d00a      	beq.n	8005b8e <__swsetup_r+0x9a>
 8005b78:	2200      	movs	r2, #0
 8005b7a:	60a2      	str	r2, [r4, #8]
 8005b7c:	6962      	ldr	r2, [r4, #20]
 8005b7e:	4252      	negs	r2, r2
 8005b80:	61a2      	str	r2, [r4, #24]
 8005b82:	6922      	ldr	r2, [r4, #16]
 8005b84:	b942      	cbnz	r2, 8005b98 <__swsetup_r+0xa4>
 8005b86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b8a:	d1c5      	bne.n	8005b18 <__swsetup_r+0x24>
 8005b8c:	bd38      	pop	{r3, r4, r5, pc}
 8005b8e:	0799      	lsls	r1, r3, #30
 8005b90:	bf58      	it	pl
 8005b92:	6962      	ldrpl	r2, [r4, #20]
 8005b94:	60a2      	str	r2, [r4, #8]
 8005b96:	e7f4      	b.n	8005b82 <__swsetup_r+0x8e>
 8005b98:	2000      	movs	r0, #0
 8005b9a:	e7f7      	b.n	8005b8c <__swsetup_r+0x98>
 8005b9c:	2000001c 	.word	0x2000001c

08005ba0 <_sbrk_r>:
 8005ba0:	b538      	push	{r3, r4, r5, lr}
 8005ba2:	4d06      	ldr	r5, [pc, #24]	@ (8005bbc <_sbrk_r+0x1c>)
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	4608      	mov	r0, r1
 8005baa:	602b      	str	r3, [r5, #0]
 8005bac:	f7fb f9b2 	bl	8000f14 <_sbrk>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_sbrk_r+0x1a>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_sbrk_r+0x1a>
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	200046d4 	.word	0x200046d4

08005bc0 <__swhatbuf_r>:
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc8:	2900      	cmp	r1, #0
 8005bca:	b096      	sub	sp, #88	@ 0x58
 8005bcc:	4615      	mov	r5, r2
 8005bce:	461e      	mov	r6, r3
 8005bd0:	da0d      	bge.n	8005bee <__swhatbuf_r+0x2e>
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005bd8:	f04f 0100 	mov.w	r1, #0
 8005bdc:	bf14      	ite	ne
 8005bde:	2340      	movne	r3, #64	@ 0x40
 8005be0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005be4:	2000      	movs	r0, #0
 8005be6:	6031      	str	r1, [r6, #0]
 8005be8:	602b      	str	r3, [r5, #0]
 8005bea:	b016      	add	sp, #88	@ 0x58
 8005bec:	bd70      	pop	{r4, r5, r6, pc}
 8005bee:	466a      	mov	r2, sp
 8005bf0:	f000 f848 	bl	8005c84 <_fstat_r>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	dbec      	blt.n	8005bd2 <__swhatbuf_r+0x12>
 8005bf8:	9901      	ldr	r1, [sp, #4]
 8005bfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005bfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c02:	4259      	negs	r1, r3
 8005c04:	4159      	adcs	r1, r3
 8005c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c0a:	e7eb      	b.n	8005be4 <__swhatbuf_r+0x24>

08005c0c <__smakebuf_r>:
 8005c0c:	898b      	ldrh	r3, [r1, #12]
 8005c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c10:	079d      	lsls	r5, r3, #30
 8005c12:	4606      	mov	r6, r0
 8005c14:	460c      	mov	r4, r1
 8005c16:	d507      	bpl.n	8005c28 <__smakebuf_r+0x1c>
 8005c18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	6123      	str	r3, [r4, #16]
 8005c20:	2301      	movs	r3, #1
 8005c22:	6163      	str	r3, [r4, #20]
 8005c24:	b003      	add	sp, #12
 8005c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c28:	ab01      	add	r3, sp, #4
 8005c2a:	466a      	mov	r2, sp
 8005c2c:	f7ff ffc8 	bl	8005bc0 <__swhatbuf_r>
 8005c30:	9f00      	ldr	r7, [sp, #0]
 8005c32:	4605      	mov	r5, r0
 8005c34:	4639      	mov	r1, r7
 8005c36:	4630      	mov	r0, r6
 8005c38:	f7ff fbc2 	bl	80053c0 <_malloc_r>
 8005c3c:	b948      	cbnz	r0, 8005c52 <__smakebuf_r+0x46>
 8005c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c42:	059a      	lsls	r2, r3, #22
 8005c44:	d4ee      	bmi.n	8005c24 <__smakebuf_r+0x18>
 8005c46:	f023 0303 	bic.w	r3, r3, #3
 8005c4a:	f043 0302 	orr.w	r3, r3, #2
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	e7e2      	b.n	8005c18 <__smakebuf_r+0xc>
 8005c52:	89a3      	ldrh	r3, [r4, #12]
 8005c54:	6020      	str	r0, [r4, #0]
 8005c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c5a:	81a3      	strh	r3, [r4, #12]
 8005c5c:	9b01      	ldr	r3, [sp, #4]
 8005c5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c62:	b15b      	cbz	r3, 8005c7c <__smakebuf_r+0x70>
 8005c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f000 f81d 	bl	8005ca8 <_isatty_r>
 8005c6e:	b128      	cbz	r0, 8005c7c <__smakebuf_r+0x70>
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	f023 0303 	bic.w	r3, r3, #3
 8005c76:	f043 0301 	orr.w	r3, r3, #1
 8005c7a:	81a3      	strh	r3, [r4, #12]
 8005c7c:	89a3      	ldrh	r3, [r4, #12]
 8005c7e:	431d      	orrs	r5, r3
 8005c80:	81a5      	strh	r5, [r4, #12]
 8005c82:	e7cf      	b.n	8005c24 <__smakebuf_r+0x18>

08005c84 <_fstat_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4d07      	ldr	r5, [pc, #28]	@ (8005ca4 <_fstat_r+0x20>)
 8005c88:	2300      	movs	r3, #0
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	4608      	mov	r0, r1
 8005c8e:	4611      	mov	r1, r2
 8005c90:	602b      	str	r3, [r5, #0]
 8005c92:	f000 f92e 	bl	8005ef2 <_fstat>
 8005c96:	1c43      	adds	r3, r0, #1
 8005c98:	d102      	bne.n	8005ca0 <_fstat_r+0x1c>
 8005c9a:	682b      	ldr	r3, [r5, #0]
 8005c9c:	b103      	cbz	r3, 8005ca0 <_fstat_r+0x1c>
 8005c9e:	6023      	str	r3, [r4, #0]
 8005ca0:	bd38      	pop	{r3, r4, r5, pc}
 8005ca2:	bf00      	nop
 8005ca4:	200046d4 	.word	0x200046d4

08005ca8 <_isatty_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4d06      	ldr	r5, [pc, #24]	@ (8005cc4 <_isatty_r+0x1c>)
 8005cac:	2300      	movs	r3, #0
 8005cae:	4604      	mov	r4, r0
 8005cb0:	4608      	mov	r0, r1
 8005cb2:	602b      	str	r3, [r5, #0]
 8005cb4:	f000 fa80 	bl	80061b8 <_isatty>
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	d102      	bne.n	8005cc2 <_isatty_r+0x1a>
 8005cbc:	682b      	ldr	r3, [r5, #0]
 8005cbe:	b103      	cbz	r3, 8005cc2 <_isatty_r+0x1a>
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	bd38      	pop	{r3, r4, r5, pc}
 8005cc4:	200046d4 	.word	0x200046d4

08005cc8 <findslot>:
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf4 <findslot+0x2c>)
 8005cca:	b510      	push	{r4, lr}
 8005ccc:	4604      	mov	r4, r0
 8005cce:	6818      	ldr	r0, [r3, #0]
 8005cd0:	b118      	cbz	r0, 8005cda <findslot+0x12>
 8005cd2:	6a03      	ldr	r3, [r0, #32]
 8005cd4:	b90b      	cbnz	r3, 8005cda <findslot+0x12>
 8005cd6:	f7ff f9a9 	bl	800502c <__sinit>
 8005cda:	2c13      	cmp	r4, #19
 8005cdc:	d807      	bhi.n	8005cee <findslot+0x26>
 8005cde:	4806      	ldr	r0, [pc, #24]	@ (8005cf8 <findslot+0x30>)
 8005ce0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005ce4:	3201      	adds	r2, #1
 8005ce6:	d002      	beq.n	8005cee <findslot+0x26>
 8005ce8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005cec:	bd10      	pop	{r4, pc}
 8005cee:	2000      	movs	r0, #0
 8005cf0:	e7fc      	b.n	8005cec <findslot+0x24>
 8005cf2:	bf00      	nop
 8005cf4:	2000001c 	.word	0x2000001c
 8005cf8:	200046f0 	.word	0x200046f0

08005cfc <error>:
 8005cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfe:	4604      	mov	r4, r0
 8005d00:	f7ff fac4 	bl	800528c <__errno>
 8005d04:	2613      	movs	r6, #19
 8005d06:	4605      	mov	r5, r0
 8005d08:	2700      	movs	r7, #0
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	4639      	mov	r1, r7
 8005d0e:	beab      	bkpt	0x00ab
 8005d10:	4606      	mov	r6, r0
 8005d12:	602e      	str	r6, [r5, #0]
 8005d14:	4620      	mov	r0, r4
 8005d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d18 <checkerror>:
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d101      	bne.n	8005d20 <checkerror+0x8>
 8005d1c:	f7ff bfee 	b.w	8005cfc <error>
 8005d20:	4770      	bx	lr

08005d22 <_swiread>:
 8005d22:	b530      	push	{r4, r5, lr}
 8005d24:	b085      	sub	sp, #20
 8005d26:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005d2a:	9203      	str	r2, [sp, #12]
 8005d2c:	2406      	movs	r4, #6
 8005d2e:	ad01      	add	r5, sp, #4
 8005d30:	4620      	mov	r0, r4
 8005d32:	4629      	mov	r1, r5
 8005d34:	beab      	bkpt	0x00ab
 8005d36:	4604      	mov	r4, r0
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f7ff ffed 	bl	8005d18 <checkerror>
 8005d3e:	b005      	add	sp, #20
 8005d40:	bd30      	pop	{r4, r5, pc}

08005d42 <_read>:
 8005d42:	b570      	push	{r4, r5, r6, lr}
 8005d44:	460e      	mov	r6, r1
 8005d46:	4614      	mov	r4, r2
 8005d48:	f7ff ffbe 	bl	8005cc8 <findslot>
 8005d4c:	4605      	mov	r5, r0
 8005d4e:	b930      	cbnz	r0, 8005d5e <_read+0x1c>
 8005d50:	f7ff fa9c 	bl	800528c <__errno>
 8005d54:	2309      	movs	r3, #9
 8005d56:	6003      	str	r3, [r0, #0]
 8005d58:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5c:	bd70      	pop	{r4, r5, r6, pc}
 8005d5e:	6800      	ldr	r0, [r0, #0]
 8005d60:	4622      	mov	r2, r4
 8005d62:	4631      	mov	r1, r6
 8005d64:	f7ff ffdd 	bl	8005d22 <_swiread>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d0f5      	beq.n	8005d58 <_read+0x16>
 8005d6c:	686b      	ldr	r3, [r5, #4]
 8005d6e:	1a20      	subs	r0, r4, r0
 8005d70:	4403      	add	r3, r0
 8005d72:	606b      	str	r3, [r5, #4]
 8005d74:	e7f2      	b.n	8005d5c <_read+0x1a>

08005d76 <_swilseek>:
 8005d76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d78:	460c      	mov	r4, r1
 8005d7a:	4616      	mov	r6, r2
 8005d7c:	f7ff ffa4 	bl	8005cc8 <findslot>
 8005d80:	4605      	mov	r5, r0
 8005d82:	b940      	cbnz	r0, 8005d96 <_swilseek+0x20>
 8005d84:	f7ff fa82 	bl	800528c <__errno>
 8005d88:	2309      	movs	r3, #9
 8005d8a:	6003      	str	r3, [r0, #0]
 8005d8c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d90:	4620      	mov	r0, r4
 8005d92:	b003      	add	sp, #12
 8005d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d96:	2e02      	cmp	r6, #2
 8005d98:	d903      	bls.n	8005da2 <_swilseek+0x2c>
 8005d9a:	f7ff fa77 	bl	800528c <__errno>
 8005d9e:	2316      	movs	r3, #22
 8005da0:	e7f3      	b.n	8005d8a <_swilseek+0x14>
 8005da2:	2e01      	cmp	r6, #1
 8005da4:	d112      	bne.n	8005dcc <_swilseek+0x56>
 8005da6:	6843      	ldr	r3, [r0, #4]
 8005da8:	18e4      	adds	r4, r4, r3
 8005daa:	d4f6      	bmi.n	8005d9a <_swilseek+0x24>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	260a      	movs	r6, #10
 8005db0:	e9cd 3400 	strd	r3, r4, [sp]
 8005db4:	466f      	mov	r7, sp
 8005db6:	4630      	mov	r0, r6
 8005db8:	4639      	mov	r1, r7
 8005dba:	beab      	bkpt	0x00ab
 8005dbc:	4606      	mov	r6, r0
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f7ff ffaa 	bl	8005d18 <checkerror>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	dbe1      	blt.n	8005d8c <_swilseek+0x16>
 8005dc8:	606c      	str	r4, [r5, #4]
 8005dca:	e7e1      	b.n	8005d90 <_swilseek+0x1a>
 8005dcc:	2e02      	cmp	r6, #2
 8005dce:	6803      	ldr	r3, [r0, #0]
 8005dd0:	d1ec      	bne.n	8005dac <_swilseek+0x36>
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	260c      	movs	r6, #12
 8005dd6:	466f      	mov	r7, sp
 8005dd8:	4630      	mov	r0, r6
 8005dda:	4639      	mov	r1, r7
 8005ddc:	beab      	bkpt	0x00ab
 8005dde:	4606      	mov	r6, r0
 8005de0:	4630      	mov	r0, r6
 8005de2:	f7ff ff99 	bl	8005d18 <checkerror>
 8005de6:	1c43      	adds	r3, r0, #1
 8005de8:	d0d0      	beq.n	8005d8c <_swilseek+0x16>
 8005dea:	4404      	add	r4, r0
 8005dec:	e7de      	b.n	8005dac <_swilseek+0x36>

08005dee <_lseek>:
 8005dee:	f7ff bfc2 	b.w	8005d76 <_swilseek>

08005df2 <_swiwrite>:
 8005df2:	b530      	push	{r4, r5, lr}
 8005df4:	b085      	sub	sp, #20
 8005df6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005dfa:	9203      	str	r2, [sp, #12]
 8005dfc:	2405      	movs	r4, #5
 8005dfe:	ad01      	add	r5, sp, #4
 8005e00:	4620      	mov	r0, r4
 8005e02:	4629      	mov	r1, r5
 8005e04:	beab      	bkpt	0x00ab
 8005e06:	4604      	mov	r4, r0
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f7ff ff85 	bl	8005d18 <checkerror>
 8005e0e:	b005      	add	sp, #20
 8005e10:	bd30      	pop	{r4, r5, pc}

08005e12 <_write>:
 8005e12:	b570      	push	{r4, r5, r6, lr}
 8005e14:	460e      	mov	r6, r1
 8005e16:	4615      	mov	r5, r2
 8005e18:	f7ff ff56 	bl	8005cc8 <findslot>
 8005e1c:	4604      	mov	r4, r0
 8005e1e:	b930      	cbnz	r0, 8005e2e <_write+0x1c>
 8005e20:	f7ff fa34 	bl	800528c <__errno>
 8005e24:	2309      	movs	r3, #9
 8005e26:	6003      	str	r3, [r0, #0]
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2c:	bd70      	pop	{r4, r5, r6, pc}
 8005e2e:	6800      	ldr	r0, [r0, #0]
 8005e30:	462a      	mov	r2, r5
 8005e32:	4631      	mov	r1, r6
 8005e34:	f7ff ffdd 	bl	8005df2 <_swiwrite>
 8005e38:	1e03      	subs	r3, r0, #0
 8005e3a:	dbf5      	blt.n	8005e28 <_write+0x16>
 8005e3c:	6862      	ldr	r2, [r4, #4]
 8005e3e:	1ae8      	subs	r0, r5, r3
 8005e40:	4402      	add	r2, r0
 8005e42:	42ab      	cmp	r3, r5
 8005e44:	6062      	str	r2, [r4, #4]
 8005e46:	d1f1      	bne.n	8005e2c <_write+0x1a>
 8005e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	f7ff bf55 	b.w	8005cfc <error>

08005e52 <_swiclose>:
 8005e52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e54:	2402      	movs	r4, #2
 8005e56:	9001      	str	r0, [sp, #4]
 8005e58:	ad01      	add	r5, sp, #4
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	beab      	bkpt	0x00ab
 8005e60:	4604      	mov	r4, r0
 8005e62:	4620      	mov	r0, r4
 8005e64:	f7ff ff58 	bl	8005d18 <checkerror>
 8005e68:	b003      	add	sp, #12
 8005e6a:	bd30      	pop	{r4, r5, pc}

08005e6c <_close>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	4605      	mov	r5, r0
 8005e70:	f7ff ff2a 	bl	8005cc8 <findslot>
 8005e74:	4604      	mov	r4, r0
 8005e76:	b930      	cbnz	r0, 8005e86 <_close+0x1a>
 8005e78:	f7ff fa08 	bl	800528c <__errno>
 8005e7c:	2309      	movs	r3, #9
 8005e7e:	6003      	str	r3, [r0, #0]
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	bd38      	pop	{r3, r4, r5, pc}
 8005e86:	3d01      	subs	r5, #1
 8005e88:	2d01      	cmp	r5, #1
 8005e8a:	d809      	bhi.n	8005ea0 <_close+0x34>
 8005e8c:	4b07      	ldr	r3, [pc, #28]	@ (8005eac <_close+0x40>)
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d104      	bne.n	8005ea0 <_close+0x34>
 8005e96:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9a:	6023      	str	r3, [r4, #0]
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	e7f1      	b.n	8005e84 <_close+0x18>
 8005ea0:	6820      	ldr	r0, [r4, #0]
 8005ea2:	f7ff ffd6 	bl	8005e52 <_swiclose>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d0f5      	beq.n	8005e96 <_close+0x2a>
 8005eaa:	e7eb      	b.n	8005e84 <_close+0x18>
 8005eac:	200046f0 	.word	0x200046f0

08005eb0 <_swistat>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	f7ff ff08 	bl	8005cc8 <findslot>
 8005eb8:	4605      	mov	r5, r0
 8005eba:	b930      	cbnz	r0, 8005eca <_swistat+0x1a>
 8005ebc:	f7ff f9e6 	bl	800528c <__errno>
 8005ec0:	2309      	movs	r3, #9
 8005ec2:	6003      	str	r3, [r0, #0]
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	bd70      	pop	{r4, r5, r6, pc}
 8005eca:	6863      	ldr	r3, [r4, #4]
 8005ecc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005ed0:	6063      	str	r3, [r4, #4]
 8005ed2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ed6:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005ed8:	260c      	movs	r6, #12
 8005eda:	4630      	mov	r0, r6
 8005edc:	4629      	mov	r1, r5
 8005ede:	beab      	bkpt	0x00ab
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f7ff ff18 	bl	8005d18 <checkerror>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	d0eb      	beq.n	8005ec4 <_swistat+0x14>
 8005eec:	6120      	str	r0, [r4, #16]
 8005eee:	2000      	movs	r0, #0
 8005ef0:	e7ea      	b.n	8005ec8 <_swistat+0x18>

08005ef2 <_fstat>:
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	4604      	mov	r4, r0
 8005efa:	2258      	movs	r2, #88	@ 0x58
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff f920 	bl	8005142 <memset>
 8005f02:	4601      	mov	r1, r0
 8005f04:	4620      	mov	r0, r4
 8005f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f0a:	f7ff bfd1 	b.w	8005eb0 <_swistat>

08005f0e <_stat>:
 8005f0e:	b538      	push	{r3, r4, r5, lr}
 8005f10:	460d      	mov	r5, r1
 8005f12:	4604      	mov	r4, r0
 8005f14:	2258      	movs	r2, #88	@ 0x58
 8005f16:	2100      	movs	r1, #0
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f7ff f912 	bl	8005142 <memset>
 8005f1e:	4620      	mov	r0, r4
 8005f20:	2100      	movs	r1, #0
 8005f22:	f000 f811 	bl	8005f48 <_swiopen>
 8005f26:	1c43      	adds	r3, r0, #1
 8005f28:	4604      	mov	r4, r0
 8005f2a:	d00b      	beq.n	8005f44 <_stat+0x36>
 8005f2c:	686b      	ldr	r3, [r5, #4]
 8005f2e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005f32:	606b      	str	r3, [r5, #4]
 8005f34:	4629      	mov	r1, r5
 8005f36:	f7ff ffbb 	bl	8005eb0 <_swistat>
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f7ff ff95 	bl	8005e6c <_close>
 8005f42:	462c      	mov	r4, r5
 8005f44:	4620      	mov	r0, r4
 8005f46:	bd38      	pop	{r3, r4, r5, pc}

08005f48 <_swiopen>:
 8005f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f4c:	4f29      	ldr	r7, [pc, #164]	@ (8005ff4 <_swiopen+0xac>)
 8005f4e:	b096      	sub	sp, #88	@ 0x58
 8005f50:	4682      	mov	sl, r0
 8005f52:	460e      	mov	r6, r1
 8005f54:	2400      	movs	r4, #0
 8005f56:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8005f60:	d00c      	beq.n	8005f7c <_swiopen+0x34>
 8005f62:	3401      	adds	r4, #1
 8005f64:	2c14      	cmp	r4, #20
 8005f66:	d1f6      	bne.n	8005f56 <_swiopen+0xe>
 8005f68:	f7ff f990 	bl	800528c <__errno>
 8005f6c:	2318      	movs	r3, #24
 8005f6e:	6003      	str	r3, [r0, #0]
 8005f70:	f04f 34ff 	mov.w	r4, #4294967295
 8005f74:	4620      	mov	r0, r4
 8005f76:	b016      	add	sp, #88	@ 0x58
 8005f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f7c:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8005f80:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005f84:	46e9      	mov	r9, sp
 8005f86:	d109      	bne.n	8005f9c <_swiopen+0x54>
 8005f88:	4649      	mov	r1, r9
 8005f8a:	4650      	mov	r0, sl
 8005f8c:	f7ff ffbf 	bl	8005f0e <_stat>
 8005f90:	3001      	adds	r0, #1
 8005f92:	d003      	beq.n	8005f9c <_swiopen+0x54>
 8005f94:	f7ff f97a 	bl	800528c <__errno>
 8005f98:	2311      	movs	r3, #17
 8005f9a:	e7e8      	b.n	8005f6e <_swiopen+0x26>
 8005f9c:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8005fa0:	f240 6301 	movw	r3, #1537	@ 0x601
 8005fa4:	07b2      	lsls	r2, r6, #30
 8005fa6:	bf48      	it	mi
 8005fa8:	f045 0502 	orrmi.w	r5, r5, #2
 8005fac:	421e      	tst	r6, r3
 8005fae:	bf18      	it	ne
 8005fb0:	f045 0504 	orrne.w	r5, r5, #4
 8005fb4:	0733      	lsls	r3, r6, #28
 8005fb6:	bf48      	it	mi
 8005fb8:	f025 0504 	bicmi.w	r5, r5, #4
 8005fbc:	4650      	mov	r0, sl
 8005fbe:	bf48      	it	mi
 8005fc0:	f045 0508 	orrmi.w	r5, r5, #8
 8005fc4:	f8cd a000 	str.w	sl, [sp]
 8005fc8:	f7fa f962 	bl	8000290 <strlen>
 8005fcc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8005fd0:	2501      	movs	r5, #1
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	beab      	bkpt	0x00ab
 8005fd8:	4605      	mov	r5, r0
 8005fda:	2d00      	cmp	r5, #0
 8005fdc:	db05      	blt.n	8005fea <_swiopen+0xa2>
 8005fde:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8005fe2:	4447      	add	r7, r8
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	607b      	str	r3, [r7, #4]
 8005fe8:	e7c4      	b.n	8005f74 <_swiopen+0x2c>
 8005fea:	4628      	mov	r0, r5
 8005fec:	f7ff fe86 	bl	8005cfc <error>
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	e7bf      	b.n	8005f74 <_swiopen+0x2c>
 8005ff4:	200046f0 	.word	0x200046f0

08005ff8 <_get_semihosting_exts>:
 8005ff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ffc:	4606      	mov	r6, r0
 8005ffe:	460f      	mov	r7, r1
 8006000:	4829      	ldr	r0, [pc, #164]	@ (80060a8 <_get_semihosting_exts+0xb0>)
 8006002:	2100      	movs	r1, #0
 8006004:	4615      	mov	r5, r2
 8006006:	f7ff ff9f 	bl	8005f48 <_swiopen>
 800600a:	462a      	mov	r2, r5
 800600c:	4604      	mov	r4, r0
 800600e:	2100      	movs	r1, #0
 8006010:	4630      	mov	r0, r6
 8006012:	f7ff f896 	bl	8005142 <memset>
 8006016:	1c63      	adds	r3, r4, #1
 8006018:	d014      	beq.n	8006044 <_get_semihosting_exts+0x4c>
 800601a:	4620      	mov	r0, r4
 800601c:	f7ff fe54 	bl	8005cc8 <findslot>
 8006020:	f04f 080c 	mov.w	r8, #12
 8006024:	4681      	mov	r9, r0
 8006026:	4640      	mov	r0, r8
 8006028:	4649      	mov	r1, r9
 800602a:	beab      	bkpt	0x00ab
 800602c:	4680      	mov	r8, r0
 800602e:	4640      	mov	r0, r8
 8006030:	f7ff fe72 	bl	8005d18 <checkerror>
 8006034:	2803      	cmp	r0, #3
 8006036:	dd02      	ble.n	800603e <_get_semihosting_exts+0x46>
 8006038:	1ec3      	subs	r3, r0, #3
 800603a:	42ab      	cmp	r3, r5
 800603c:	dc07      	bgt.n	800604e <_get_semihosting_exts+0x56>
 800603e:	4620      	mov	r0, r4
 8006040:	f7ff ff14 	bl	8005e6c <_close>
 8006044:	f04f 30ff 	mov.w	r0, #4294967295
 8006048:	b003      	add	sp, #12
 800604a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800604e:	2204      	movs	r2, #4
 8006050:	eb0d 0102 	add.w	r1, sp, r2
 8006054:	4620      	mov	r0, r4
 8006056:	f7ff fe74 	bl	8005d42 <_read>
 800605a:	2803      	cmp	r0, #3
 800605c:	ddef      	ble.n	800603e <_get_semihosting_exts+0x46>
 800605e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006062:	2b53      	cmp	r3, #83	@ 0x53
 8006064:	d1eb      	bne.n	800603e <_get_semihosting_exts+0x46>
 8006066:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800606a:	2b48      	cmp	r3, #72	@ 0x48
 800606c:	d1e7      	bne.n	800603e <_get_semihosting_exts+0x46>
 800606e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006072:	2b46      	cmp	r3, #70	@ 0x46
 8006074:	d1e3      	bne.n	800603e <_get_semihosting_exts+0x46>
 8006076:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800607a:	2b42      	cmp	r3, #66	@ 0x42
 800607c:	d1df      	bne.n	800603e <_get_semihosting_exts+0x46>
 800607e:	2201      	movs	r2, #1
 8006080:	4639      	mov	r1, r7
 8006082:	4620      	mov	r0, r4
 8006084:	f7ff fe77 	bl	8005d76 <_swilseek>
 8006088:	2800      	cmp	r0, #0
 800608a:	dbd8      	blt.n	800603e <_get_semihosting_exts+0x46>
 800608c:	462a      	mov	r2, r5
 800608e:	4631      	mov	r1, r6
 8006090:	4620      	mov	r0, r4
 8006092:	f7ff fe56 	bl	8005d42 <_read>
 8006096:	4605      	mov	r5, r0
 8006098:	4620      	mov	r0, r4
 800609a:	f7ff fee7 	bl	8005e6c <_close>
 800609e:	4628      	mov	r0, r5
 80060a0:	f7ff fe3a 	bl	8005d18 <checkerror>
 80060a4:	e7d0      	b.n	8006048 <_get_semihosting_exts+0x50>
 80060a6:	bf00      	nop
 80060a8:	08006333 	.word	0x08006333

080060ac <initialise_semihosting_exts>:
 80060ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060ae:	4d0a      	ldr	r5, [pc, #40]	@ (80060d8 <initialise_semihosting_exts+0x2c>)
 80060b0:	4c0a      	ldr	r4, [pc, #40]	@ (80060dc <initialise_semihosting_exts+0x30>)
 80060b2:	2100      	movs	r1, #0
 80060b4:	2201      	movs	r2, #1
 80060b6:	a801      	add	r0, sp, #4
 80060b8:	6029      	str	r1, [r5, #0]
 80060ba:	6022      	str	r2, [r4, #0]
 80060bc:	f7ff ff9c 	bl	8005ff8 <_get_semihosting_exts>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	dd07      	ble.n	80060d4 <initialise_semihosting_exts+0x28>
 80060c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80060c8:	f003 0201 	and.w	r2, r3, #1
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	602a      	str	r2, [r5, #0]
 80060d2:	6023      	str	r3, [r4, #0]
 80060d4:	b003      	add	sp, #12
 80060d6:	bd30      	pop	{r4, r5, pc}
 80060d8:	20000070 	.word	0x20000070
 80060dc:	2000006c 	.word	0x2000006c

080060e0 <_has_ext_stdout_stderr>:
 80060e0:	b510      	push	{r4, lr}
 80060e2:	4c04      	ldr	r4, [pc, #16]	@ (80060f4 <_has_ext_stdout_stderr+0x14>)
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	da01      	bge.n	80060ee <_has_ext_stdout_stderr+0xe>
 80060ea:	f7ff ffdf 	bl	80060ac <initialise_semihosting_exts>
 80060ee:	6820      	ldr	r0, [r4, #0]
 80060f0:	bd10      	pop	{r4, pc}
 80060f2:	bf00      	nop
 80060f4:	2000006c 	.word	0x2000006c

080060f8 <initialise_monitor_handles>:
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	b085      	sub	sp, #20
 80060fe:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80061b0 <initialise_monitor_handles+0xb8>
 8006102:	f8cd 9004 	str.w	r9, [sp, #4]
 8006106:	2303      	movs	r3, #3
 8006108:	2400      	movs	r4, #0
 800610a:	9303      	str	r3, [sp, #12]
 800610c:	af01      	add	r7, sp, #4
 800610e:	9402      	str	r4, [sp, #8]
 8006110:	2501      	movs	r5, #1
 8006112:	4628      	mov	r0, r5
 8006114:	4639      	mov	r1, r7
 8006116:	beab      	bkpt	0x00ab
 8006118:	4605      	mov	r5, r0
 800611a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80061b4 <initialise_monitor_handles+0xbc>
 800611e:	4623      	mov	r3, r4
 8006120:	4c20      	ldr	r4, [pc, #128]	@ (80061a4 <initialise_monitor_handles+0xac>)
 8006122:	f8c8 5000 	str.w	r5, [r8]
 8006126:	f04f 32ff 	mov.w	r2, #4294967295
 800612a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800612e:	3301      	adds	r3, #1
 8006130:	2b14      	cmp	r3, #20
 8006132:	d1fa      	bne.n	800612a <initialise_monitor_handles+0x32>
 8006134:	f7ff ffd4 	bl	80060e0 <_has_ext_stdout_stderr>
 8006138:	4d1b      	ldr	r5, [pc, #108]	@ (80061a8 <initialise_monitor_handles+0xb0>)
 800613a:	b1d0      	cbz	r0, 8006172 <initialise_monitor_handles+0x7a>
 800613c:	f04f 0a03 	mov.w	sl, #3
 8006140:	2304      	movs	r3, #4
 8006142:	f8cd 9004 	str.w	r9, [sp, #4]
 8006146:	2601      	movs	r6, #1
 8006148:	f8cd a00c 	str.w	sl, [sp, #12]
 800614c:	9302      	str	r3, [sp, #8]
 800614e:	4630      	mov	r0, r6
 8006150:	4639      	mov	r1, r7
 8006152:	beab      	bkpt	0x00ab
 8006154:	4683      	mov	fp, r0
 8006156:	4b15      	ldr	r3, [pc, #84]	@ (80061ac <initialise_monitor_handles+0xb4>)
 8006158:	f8cd 9004 	str.w	r9, [sp, #4]
 800615c:	f8c3 b000 	str.w	fp, [r3]
 8006160:	2308      	movs	r3, #8
 8006162:	f8cd a00c 	str.w	sl, [sp, #12]
 8006166:	9302      	str	r3, [sp, #8]
 8006168:	4630      	mov	r0, r6
 800616a:	4639      	mov	r1, r7
 800616c:	beab      	bkpt	0x00ab
 800616e:	4606      	mov	r6, r0
 8006170:	602e      	str	r6, [r5, #0]
 8006172:	682b      	ldr	r3, [r5, #0]
 8006174:	3301      	adds	r3, #1
 8006176:	bf02      	ittt	eq
 8006178:	4b0c      	ldreq	r3, [pc, #48]	@ (80061ac <initialise_monitor_handles+0xb4>)
 800617a:	681b      	ldreq	r3, [r3, #0]
 800617c:	602b      	streq	r3, [r5, #0]
 800617e:	2600      	movs	r6, #0
 8006180:	f8d8 3000 	ldr.w	r3, [r8]
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	6066      	str	r6, [r4, #4]
 8006188:	f7ff ffaa 	bl	80060e0 <_has_ext_stdout_stderr>
 800618c:	b130      	cbz	r0, 800619c <initialise_monitor_handles+0xa4>
 800618e:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <initialise_monitor_handles+0xb4>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006196:	682b      	ldr	r3, [r5, #0]
 8006198:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800619c:	b005      	add	sp, #20
 800619e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a2:	bf00      	nop
 80061a4:	200046f0 	.word	0x200046f0
 80061a8:	200046e4 	.word	0x200046e4
 80061ac:	200046e8 	.word	0x200046e8
 80061b0:	08006349 	.word	0x08006349
 80061b4:	200046ec 	.word	0x200046ec

080061b8 <_isatty>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	f7ff fd85 	bl	8005cc8 <findslot>
 80061be:	2409      	movs	r4, #9
 80061c0:	4605      	mov	r5, r0
 80061c2:	b920      	cbnz	r0, 80061ce <_isatty+0x16>
 80061c4:	f7ff f862 	bl	800528c <__errno>
 80061c8:	6004      	str	r4, [r0, #0]
 80061ca:	2000      	movs	r0, #0
 80061cc:	bd70      	pop	{r4, r5, r6, pc}
 80061ce:	4620      	mov	r0, r4
 80061d0:	4629      	mov	r1, r5
 80061d2:	beab      	bkpt	0x00ab
 80061d4:	4604      	mov	r4, r0
 80061d6:	2c01      	cmp	r4, #1
 80061d8:	4620      	mov	r0, r4
 80061da:	d0f7      	beq.n	80061cc <_isatty+0x14>
 80061dc:	f7ff f856 	bl	800528c <__errno>
 80061e0:	2513      	movs	r5, #19
 80061e2:	4604      	mov	r4, r0
 80061e4:	2600      	movs	r6, #0
 80061e6:	4628      	mov	r0, r5
 80061e8:	4631      	mov	r1, r6
 80061ea:	beab      	bkpt	0x00ab
 80061ec:	4605      	mov	r5, r0
 80061ee:	6025      	str	r5, [r4, #0]
 80061f0:	e7eb      	b.n	80061ca <_isatty+0x12>
	...

080061f4 <_init>:
 80061f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f6:	bf00      	nop
 80061f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061fa:	bc08      	pop	{r3}
 80061fc:	469e      	mov	lr, r3
 80061fe:	4770      	bx	lr

08006200 <_fini>:
 8006200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006202:	bf00      	nop
 8006204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006206:	bc08      	pop	{r3}
 8006208:	469e      	mov	lr, r3
 800620a:	4770      	bx	lr
