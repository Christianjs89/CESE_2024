
freertos_book_Example001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f60  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006110  08006110  00007110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006240  08006240  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  08006240  08006240  00007240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006248  08006248  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006248  08006248  00007248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800624c  0800624c  0000724c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006250  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008074  2**0
                  CONTENTS
 10 .bss          00004718  20000074  20000074  00008074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000478c  2000478c  00008074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018bf3  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000351f  00000000  00000000  00020c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  000241b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c6  00000000  00000000  00025748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003e2a  00000000  00000000  0002680e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182f4  00000000  00000000  0002a638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb5c7  00000000  00000000  0004292c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012def3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066b4  00000000  00000000  0012df38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  001345ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080060f8 	.word	0x080060f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080060f8 	.word	0x080060f8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b08c      	sub	sp, #48	@ 0x30
 8000594:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000596:	f005 fd31 	bl	8005ffc <initialise_monitor_handles>
	const char *pcTextForMain = "freertos_book_Example001 is running: Creating tasks\r\n\n";
 800059a:	4b2d      	ldr	r3, [pc, #180]	@ (8000650 <main+0xc0>)
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fd37 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f863 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f971 	bl	800088c <MX_GPIO_Init>
  MX_ETH_Init();
 80005aa:	f000 f8c9 	bl	8000740 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005ae:	f000 f915 	bl	80007dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b2:	f000 f93d 	bl	8000830 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
	/* Print out the name of this Example. */
  	vPrintString( pcTextForMain );
 80005b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80005b8:	f000 fc9e 	bl	8000ef8 <vPrintString>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005bc:	4b25      	ldr	r3, [pc, #148]	@ (8000654 <main+0xc4>)
 80005be:	1d3c      	adds	r4, r7, #4
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	682b      	ldr	r3, [r5, #0]
 80005c8:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 f9b0 	bl	8003934 <osThreadCreate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a20      	ldr	r2, [pc, #128]	@ (8000658 <main+0xc8>)
 80005d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	BaseType_t ret;

	/* Task 1 thread at priority 1 */
	ret = xTaskCreate( vTask1,						/* Pointer to the function thats implement the task. */
 80005da:	2300      	movs	r3, #0
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2301      	movs	r3, #1
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005e8:	491c      	ldr	r1, [pc, #112]	@ (800065c <main+0xcc>)
 80005ea:	481d      	ldr	r0, [pc, #116]	@ (8000660 <main+0xd0>)
 80005ec:	f003 fa98 	bl	8003b20 <xTaskCreate>
 80005f0:	6238      	str	r0, [r7, #32]
					   NULL,						/* We are not using the task parameter.		*/
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 		*/
		               NULL );                   	/* We are not using the task handle. */

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 80005f2:	6a3b      	ldr	r3, [r7, #32]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d00b      	beq.n	8000610 <main+0x80>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80005f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <main+0x7c>

	/* Task 2 thread at priority 1 */
	ret = xTaskCreate( vTask2,						/* Pointer to the function thats implement the task. */
 8000610:	2300      	movs	r3, #0
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	2301      	movs	r3, #1
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800061e:	4911      	ldr	r1, [pc, #68]	@ (8000664 <main+0xd4>)
 8000620:	4811      	ldr	r0, [pc, #68]	@ (8000668 <main+0xd8>)
 8000622:	f003 fa7d 	bl	8003b20 <xTaskCreate>
 8000626:	6238      	str	r0, [r7, #32]
					   NULL,						/* We are not using the task parameter.		*/
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 		*/
		               NULL );                   	/* We are not using the task handle. */

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 8000628:	6a3b      	ldr	r3, [r7, #32]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d00b      	beq.n	8000646 <main+0xb6>
	__asm volatile
 800062e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000632:	f383 8811 	msr	BASEPRI, r3
 8000636:	f3bf 8f6f 	isb	sy
 800063a:	f3bf 8f4f 	dsb	sy
 800063e:	61bb      	str	r3, [r7, #24]
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <main+0xb2>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000646:	f003 f96e 	bl	8003926 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064a:	bf00      	nop
 800064c:	e7fd      	b.n	800064a <main+0xba>
 800064e:	bf00      	nop
 8000650:	08006110 	.word	0x08006110
 8000654:	08006164 	.word	0x08006164
 8000658:	200007e4 	.word	0x200007e4
 800065c:	08006148 	.word	0x08006148
 8000660:	080009e9 	.word	0x080009e9
 8000664:	08006150 	.word	0x08006150
 8000668:	08000a19 	.word	0x08000a19

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	@ 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	@ 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 fce3 	bl	8005046 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	4a27      	ldr	r2, [pc, #156]	@ (8000738 <SystemClock_Config+0xcc>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a0:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b22      	ldr	r3, [pc, #136]	@ (800073c <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a21      	ldr	r2, [pc, #132]	@ (800073c <SystemClock_Config+0xd0>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006cc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006e0:	23a8      	movs	r3, #168	@ 0xa8
 80006e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e8:	2307      	movs	r3, #7
 80006ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fbd1 	bl	8001e98 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006fc:	f000 f9c0 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2105      	movs	r1, #5
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fe32 	bl	8002388 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800072a:	f000 f9a9 	bl	8000a80 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	@ 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <MX_ETH_Init+0x84>)
 8000746:	4a20      	ldr	r2, [pc, #128]	@ (80007c8 <MX_ETH_Init+0x88>)
 8000748:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800074a:	4b20      	ldr	r3, [pc, #128]	@ (80007cc <MX_ETH_Init+0x8c>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000750:	4b1e      	ldr	r3, [pc, #120]	@ (80007cc <MX_ETH_Init+0x8c>)
 8000752:	2280      	movs	r2, #128	@ 0x80
 8000754:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000756:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <MX_ETH_Init+0x8c>)
 8000758:	22e1      	movs	r2, #225	@ 0xe1
 800075a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800075c:	4b1b      	ldr	r3, [pc, #108]	@ (80007cc <MX_ETH_Init+0x8c>)
 800075e:	2200      	movs	r2, #0
 8000760:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000762:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <MX_ETH_Init+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000768:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <MX_ETH_Init+0x8c>)
 800076a:	2200      	movs	r2, #0
 800076c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <MX_ETH_Init+0x84>)
 8000770:	4a16      	ldr	r2, [pc, #88]	@ (80007cc <MX_ETH_Init+0x8c>)
 8000772:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <MX_ETH_Init+0x84>)
 8000776:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800077a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_ETH_Init+0x84>)
 800077e:	4a14      	ldr	r2, [pc, #80]	@ (80007d0 <MX_ETH_Init+0x90>)
 8000780:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <MX_ETH_Init+0x84>)
 8000784:	4a13      	ldr	r2, [pc, #76]	@ (80007d4 <MX_ETH_Init+0x94>)
 8000786:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000788:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_ETH_Init+0x84>)
 800078a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800078e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000790:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <MX_ETH_Init+0x84>)
 8000792:	f000 fd85 	bl	80012a0 <HAL_ETH_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 f970 	bl	8000a80 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007a0:	2238      	movs	r2, #56	@ 0x38
 80007a2:	2100      	movs	r1, #0
 80007a4:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <MX_ETH_Init+0x98>)
 80007a6:	f004 fc4e 	bl	8005046 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_ETH_Init+0x98>)
 80007ac:	2221      	movs	r2, #33	@ 0x21
 80007ae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_ETH_Init+0x98>)
 80007b2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80007b6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <MX_ETH_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000208 	.word	0x20000208
 80007c8:	40028000 	.word	0x40028000
 80007cc:	200007e8 	.word	0x200007e8
 80007d0:	20000168 	.word	0x20000168
 80007d4:	200000c8 	.word	0x200000c8
 80007d8:	20000090 	.word	0x20000090

080007dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_USART3_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	@ (800082c <MX_USART3_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1200;
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_USART3_UART_Init+0x4c>)
 80007e8:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80007ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_USART3_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_USART3_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_USART3_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_USART3_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <MX_USART3_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_USART3_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_USART3_UART_Init+0x4c>)
 8000814:	f002 faac 	bl	8002d70 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f000 f92f 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200002b8 	.word	0x200002b8
 800082c:	40004800 	.word	0x40004800

08000830 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800083a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083e:	2204      	movs	r2, #4
 8000840:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000844:	2202      	movs	r2, #2
 8000846:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000850:	2202      	movs	r2, #2
 8000852:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	2201      	movs	r2, #1
 8000858:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000860:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2201      	movs	r2, #1
 800086a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	f001 fa01 	bl	8001c7a <HAL_PCD_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800087e:	f000 f8ff 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000300 	.word	0x20000300

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	@ 0x30
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	4b4c      	ldr	r3, [pc, #304]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a4b      	ldr	r2, [pc, #300]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b49      	ldr	r3, [pc, #292]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	4b45      	ldr	r3, [pc, #276]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a44      	ldr	r2, [pc, #272]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b42      	ldr	r3, [pc, #264]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b3e      	ldr	r3, [pc, #248]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a3d      	ldr	r2, [pc, #244]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b3b      	ldr	r3, [pc, #236]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b37      	ldr	r3, [pc, #220]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a36      	ldr	r2, [pc, #216]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b34      	ldr	r3, [pc, #208]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b30      	ldr	r3, [pc, #192]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a2f      	ldr	r2, [pc, #188]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b2d      	ldr	r3, [pc, #180]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a28      	ldr	r2, [pc, #160]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 8000938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <MX_GPIO_Init+0x14c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000950:	4822      	ldr	r0, [pc, #136]	@ (80009dc <MX_GPIO_Init+0x150>)
 8000952:	f001 f979 	bl	8001c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2140      	movs	r1, #64	@ 0x40
 800095a:	4821      	ldr	r0, [pc, #132]	@ (80009e0 <MX_GPIO_Init+0x154>)
 800095c:	f001 f974 	bl	8001c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000960:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000966:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	481b      	ldr	r0, [pc, #108]	@ (80009e4 <MX_GPIO_Init+0x158>)
 8000978:	f000 ffba 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800097c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4811      	ldr	r0, [pc, #68]	@ (80009dc <MX_GPIO_Init+0x150>)
 8000996:	f000 ffab 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800099a:	2340      	movs	r3, #64	@ 0x40
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <MX_GPIO_Init+0x154>)
 80009b2:	f000 ff9d 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b6:	2380      	movs	r3, #128	@ 0x80
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_GPIO_Init+0x154>)
 80009ca:	f000 ff91 	bl	80018f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ce:	bf00      	nop
 80009d0:	3730      	adds	r7, #48	@ 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40021800 	.word	0x40021800
 80009e4:	40020800 	.word	0x40020800

080009e8 <vTask1>:
  * @retval None
  */
/* USER CODE END Header_vTask1 */
void vTask1( void *pvParameters )

{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	const char *pcTaskName = "Task 1 is running \r\n";
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <vTask1+0x2c>)
 80009f2:	60fb      	str	r3, [r7, #12]

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		/* Print out the name of this task. */
	    vPrintString( pcTaskName );
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f000 fa7f 	bl	8000ef8 <vPrintString>

	    /* Delay for a period. */
	    for( ul = 0; ul < mainDELAY_LOOP_COUNT; ul++ )
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	e002      	b.n	8000a06 <vTask1+0x1e>
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	3301      	adds	r3, #1
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d3f7      	bcc.n	8000a00 <vTask1+0x18>
	    vPrintString( pcTaskName );
 8000a10:	e7f0      	b.n	80009f4 <vTask1+0xc>
 8000a12:	bf00      	nop
 8000a14:	08006178 	.word	0x08006178

08000a18 <vTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTask2 */
void vTask2( void *pvParameters )
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	const char *pcTaskName = "Task 2 is running \r\n";
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <vTask2+0x2c>)
 8000a22:	60fb      	str	r3, [r7, #12]

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		/* Print out the name of this task. */
		vPrintString( pcTaskName );
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f000 fa67 	bl	8000ef8 <vPrintString>

		/* Delay for a period. */
		for( ul = 0; ul < mainDELAY_LOOP_COUNT; ul++ )
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	e002      	b.n	8000a36 <vTask2+0x1e>
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	3301      	adds	r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d3f7      	bcc.n	8000a30 <vTask2+0x18>
		vPrintString( pcTaskName );
 8000a40:	e7f0      	b.n	8000a24 <vTask2+0xc>
 8000a42:	bf00      	nop
 8000a44:	08006190 	.word	0x08006190

08000a48 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50000);
 8000a50:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000a54:	f002 ff96 	bl	8003984 <osDelay>
 8000a58:	e7fa      	b.n	8000a50 <StartDefaultTask+0x8>
	...

08000a5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6e:	f000 faf1 	bl	8001054 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40001400 	.word	0x40001400

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <Error_Handler+0x8>

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <HAL_MspInit+0x54>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	4a11      	ldr	r2, [pc, #68]	@ (8000ae0 <HAL_MspInit+0x54>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <HAL_MspInit+0x54>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <HAL_MspInit+0x54>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <HAL_MspInit+0x54>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <HAL_MspInit+0x54>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	210f      	movs	r1, #15
 8000ace:	f06f 0001 	mvn.w	r0, #1
 8000ad2:	f000 fbbb 	bl	800124c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	@ 0x38
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a55      	ldr	r2, [pc, #340]	@ (8000c58 <HAL_ETH_MspInit+0x174>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	f040 80a4 	bne.w	8000c50 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
 8000b0c:	4b53      	ldr	r3, [pc, #332]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b10:	4a52      	ldr	r2, [pc, #328]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b16:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b18:	4b50      	ldr	r3, [pc, #320]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b20:	623b      	str	r3, [r7, #32]
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
 8000b28:	4b4c      	ldr	r3, [pc, #304]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2c:	4a4b      	ldr	r2, [pc, #300]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b34:	4b49      	ldr	r3, [pc, #292]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	4b45      	ldr	r3, [pc, #276]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	4a44      	ldr	r2, [pc, #272]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b50:	4b42      	ldr	r3, [pc, #264]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b58:	61bb      	str	r3, [r7, #24]
 8000b5a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	4b3e      	ldr	r3, [pc, #248]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	4a3d      	ldr	r2, [pc, #244]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	4b37      	ldr	r3, [pc, #220]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b80:	4a36      	ldr	r2, [pc, #216]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b88:	4b34      	ldr	r3, [pc, #208]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	4b30      	ldr	r3, [pc, #192]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9c:	4a2f      	ldr	r2, [pc, #188]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	4b29      	ldr	r3, [pc, #164]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb8:	4a28      	ldr	r2, [pc, #160]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc0:	4b26      	ldr	r3, [pc, #152]	@ (8000c5c <HAL_ETH_MspInit+0x178>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bcc:	2332      	movs	r3, #50	@ 0x32
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bdc:	230b      	movs	r3, #11
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	481e      	ldr	r0, [pc, #120]	@ (8000c60 <HAL_ETH_MspInit+0x17c>)
 8000be8:	f000 fe82 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bec:	2386      	movs	r3, #134	@ 0x86
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfc:	230b      	movs	r3, #11
 8000bfe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	4817      	ldr	r0, [pc, #92]	@ (8000c64 <HAL_ETH_MspInit+0x180>)
 8000c08:	f000 fe72 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c1e:	230b      	movs	r3, #11
 8000c20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	480f      	ldr	r0, [pc, #60]	@ (8000c68 <HAL_ETH_MspInit+0x184>)
 8000c2a:	f000 fe61 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c2e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c40:	230b      	movs	r3, #11
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4808      	ldr	r0, [pc, #32]	@ (8000c6c <HAL_ETH_MspInit+0x188>)
 8000c4c:	f000 fe50 	bl	80018f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	3738      	adds	r7, #56	@ 0x38
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40028000 	.word	0x40028000
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020000 	.word	0x40020000
 8000c68:	40020400 	.word	0x40020400
 8000c6c:	40021800 	.word	0x40021800

08000c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	@ 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a19      	ldr	r2, [pc, #100]	@ (8000cf4 <HAL_UART_MspInit+0x84>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d12c      	bne.n	8000cec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <HAL_UART_MspInit+0x88>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	4a17      	ldr	r2, [pc, #92]	@ (8000cf8 <HAL_UART_MspInit+0x88>)
 8000c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <HAL_UART_MspInit+0x88>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <HAL_UART_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a10      	ldr	r2, [pc, #64]	@ (8000cf8 <HAL_UART_MspInit+0x88>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <HAL_UART_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <HAL_UART_MspInit+0x8c>)
 8000ce8:	f000 fe02 	bl	80018f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	@ 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40004800 	.word	0x40004800
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020c00 	.word	0x40020c00

08000d00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d20:	d13f      	bne.n	8000da2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b21      	ldr	r3, [pc, #132]	@ (8000dac <HAL_PCD_MspInit+0xac>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a20      	ldr	r2, [pc, #128]	@ (8000dac <HAL_PCD_MspInit+0xac>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b1e      	ldr	r3, [pc, #120]	@ (8000dac <HAL_PCD_MspInit+0xac>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d3e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d50:	230a      	movs	r3, #10
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4815      	ldr	r0, [pc, #84]	@ (8000db0 <HAL_PCD_MspInit+0xb0>)
 8000d5c:	f000 fdc8 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	480e      	ldr	r0, [pc, #56]	@ (8000db0 <HAL_PCD_MspInit+0xb0>)
 8000d76:	f000 fdbb 	bl	80018f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <HAL_PCD_MspInit+0xac>)
 8000d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000dac <HAL_PCD_MspInit+0xac>)
 8000d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d84:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <HAL_PCD_MspInit+0xac>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8e:	4a07      	ldr	r2, [pc, #28]	@ (8000dac <HAL_PCD_MspInit+0xac>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d96:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <HAL_PCD_MspInit+0xac>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	@ 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000

08000db4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08e      	sub	sp, #56	@ 0x38
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	4b33      	ldr	r3, [pc, #204]	@ (8000e98 <HAL_InitTick+0xe4>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dcc:	4a32      	ldr	r2, [pc, #200]	@ (8000e98 <HAL_InitTick+0xe4>)
 8000dce:	f043 0320 	orr.w	r3, r3, #32
 8000dd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd4:	4b30      	ldr	r3, [pc, #192]	@ (8000e98 <HAL_InitTick+0xe4>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	f003 0320 	and.w	r3, r3, #32
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000de0:	f107 0210 	add.w	r2, r7, #16
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4611      	mov	r1, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 fcec 	bl	80027c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000df0:	6a3b      	ldr	r3, [r7, #32]
 8000df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d103      	bne.n	8000e02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dfa:	f001 fcbd 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 8000dfe:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e00:	e004      	b.n	8000e0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e02:	f001 fcb9 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 8000e06:	4603      	mov	r3, r0
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e0e:	4a23      	ldr	r2, [pc, #140]	@ (8000e9c <HAL_InitTick+0xe8>)
 8000e10:	fba2 2303 	umull	r2, r3, r2, r3
 8000e14:	0c9b      	lsrs	r3, r3, #18
 8000e16:	3b01      	subs	r3, #1
 8000e18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000e1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ea0 <HAL_InitTick+0xec>)
 8000e1c:	4a21      	ldr	r2, [pc, #132]	@ (8000ea4 <HAL_InitTick+0xf0>)
 8000e1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea0 <HAL_InitTick+0xec>)
 8000e22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e26:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000e28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea0 <HAL_InitTick+0xec>)
 8000e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e2c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea0 <HAL_InitTick+0xec>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <HAL_InitTick+0xec>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <HAL_InitTick+0xec>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000e40:	4817      	ldr	r0, [pc, #92]	@ (8000ea0 <HAL_InitTick+0xec>)
 8000e42:	f001 fcf3 	bl	800282c <HAL_TIM_Base_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d11b      	bne.n	8000e8c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000e54:	4812      	ldr	r0, [pc, #72]	@ (8000ea0 <HAL_InitTick+0xec>)
 8000e56:	f001 fd43 	bl	80028e0 <HAL_TIM_Base_Start_IT>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d111      	bne.n	8000e8c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e68:	2037      	movs	r0, #55	@ 0x37
 8000e6a:	f000 fa0b 	bl	8001284 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d808      	bhi.n	8000e86 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	2037      	movs	r0, #55	@ 0x37
 8000e7a:	f000 f9e7 	bl	800124c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <HAL_InitTick+0xf4>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	e002      	b.n	8000e8c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3738      	adds	r7, #56	@ 0x38
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	431bde83 	.word	0x431bde83
 8000ea0:	200007f0 	.word	0x200007f0
 8000ea4:	40001400 	.word	0x40001400
 8000ea8:	20000004 	.word	0x20000004

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ee8:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <TIM7_IRQHandler+0x10>)
 8000eea:	f001 fd69 	bl	80029c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200007f0 	.word	0x200007f0

08000ef8 <vPrintString>:
}

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 8000f00:	f003 fc02 	bl	8004708 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	4807      	ldr	r0, [pc, #28]	@ (8000f24 <vPrintString+0x2c>)
 8000f08:	f004 f848 	bl	8004f9c <iprintf>
		fflush( stdout );
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <vPrintString+0x30>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f003 ff6c 	bl	8004df0 <fflush>
	}
	taskEXIT_CRITICAL();
 8000f18:	f003 fc28 	bl	800476c <vPortExitCritical>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	080061a8 	.word	0x080061a8
 8000f28:	2000001c 	.word	0x2000001c

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	@ (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	@ (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f004 f918 	bl	8005190 <__errno>
 8000f60:	4603      	mov	r3, r0
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20030000 	.word	0x20030000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	20000838 	.word	0x20000838
 8000f94:	20004790 	.word	0x20004790

08000f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <SystemInit+0x20>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fa2:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <SystemInit+0x20>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc0:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fc2:	490e      	ldr	r1, [pc, #56]	@ (8000ffc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8001000 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	@ (8001004 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd8:	4c0b      	ldr	r4, [pc, #44]	@ (8001008 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe6:	f7ff ffd7 	bl	8000f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fea:	f004 f8d7 	bl	800519c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff facf 	bl	8000590 <main>
  bx  lr    
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ff4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001000:	08006250 	.word	0x08006250
  ldr r2, =_sbss
 8001004:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001008:	2000478c 	.word	0x2000478c

0800100c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001014:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0d      	ldr	r2, [pc, #52]	@ (8001050 <HAL_Init+0x40>)
 800101a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800101e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001020:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <HAL_Init+0x40>)
 8001026:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800102a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a07      	ldr	r2, [pc, #28]	@ (8001050 <HAL_Init+0x40>)
 8001032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001036:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 f8fc 	bl	8001236 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	200f      	movs	r0, #15
 8001040:	f7ff feb8 	bl	8000db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001044:	f7ff fd22 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023c00 	.word	0x40023c00

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008
 8001078:	2000083c 	.word	0x2000083c

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2000083c 	.word	0x2000083c

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	@ (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	@ (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	@ (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	@ 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff4c 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125e:	f7ff ff61 	bl	8001124 <__NVIC_GetPriorityGrouping>
 8001262:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	68b9      	ldr	r1, [r7, #8]
 8001268:	6978      	ldr	r0, [r7, #20]
 800126a:	f7ff ffb1 	bl	80011d0 <NVIC_EncodePriority>
 800126e:	4602      	mov	r2, r0
 8001270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff80 	bl	800117c <__NVIC_SetPriority>
}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff54 	bl	8001140 <__NVIC_EnableIRQ>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e06c      	b.n	800138c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2223      	movs	r2, #35	@ 0x23
 80012c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fc0d 	bl	8000ae4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	4b31      	ldr	r3, [pc, #196]	@ (8001394 <HAL_ETH_Init+0xf4>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	4a30      	ldr	r2, [pc, #192]	@ (8001394 <HAL_ETH_Init+0xf4>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012da:	4b2e      	ldr	r3, [pc, #184]	@ (8001394 <HAL_ETH_Init+0xf4>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001398 <HAL_ETH_Init+0xf8>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001398 <HAL_ETH_Init+0xf8>)
 80012ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80012f0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012f2:	4b29      	ldr	r3, [pc, #164]	@ (8001398 <HAL_ETH_Init+0xf8>)
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	4927      	ldr	r1, [pc, #156]	@ (8001398 <HAL_ETH_Init+0xf8>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001300:	4b25      	ldr	r3, [pc, #148]	@ (8001398 <HAL_ETH_Init+0xf8>)
 8001302:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800131a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800131c:	f7ff feae 	bl	800107c <HAL_GetTick>
 8001320:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001322:	e011      	b.n	8001348 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001324:	f7ff feaa 	bl	800107c <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001332:	d909      	bls.n	8001348 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2204      	movs	r2, #4
 8001338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	22e0      	movs	r2, #224	@ 0xe0
 8001340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e021      	b.n	800138c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1e4      	bne.n	8001324 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f958 	bl	8001610 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f9ff 	bl	8001764 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fa55 	bl	8001816 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	461a      	mov	r2, r3
 8001372:	2100      	movs	r1, #0
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f9bd 	bl	80016f4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2210      	movs	r2, #16
 8001386:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	40013800 	.word	0x40013800

0800139c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4b51      	ldr	r3, [pc, #324]	@ (80014f8 <ETH_SetMACConfig+0x15c>)
 80013b2:	4013      	ands	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	7c1b      	ldrb	r3, [r3, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <ETH_SetMACConfig+0x28>
 80013be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013c2:	e000      	b.n	80013c6 <ETH_SetMACConfig+0x2a>
 80013c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	7c5b      	ldrb	r3, [r3, #17]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <ETH_SetMACConfig+0x38>
 80013ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013d2:	e000      	b.n	80013d6 <ETH_SetMACConfig+0x3a>
 80013d4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013d6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	7fdb      	ldrb	r3, [r3, #31]
 80013e2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013e4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	7f92      	ldrb	r2, [r2, #30]
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	d102      	bne.n	80013fa <ETH_SetMACConfig+0x5e>
 80013f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013f8:	e000      	b.n	80013fc <ETH_SetMACConfig+0x60>
 80013fa:	2200      	movs	r2, #0
                        macconf->Speed |
 80013fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	7f1b      	ldrb	r3, [r3, #28]
 8001402:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001404:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800140a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	791b      	ldrb	r3, [r3, #4]
 8001410:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001412:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	f892 2020 	ldrb.w	r2, [r2, #32]
 800141a:	2a00      	cmp	r2, #0
 800141c:	d102      	bne.n	8001424 <ETH_SetMACConfig+0x88>
 800141e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001422:	e000      	b.n	8001426 <ETH_SetMACConfig+0x8a>
 8001424:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001426:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	7bdb      	ldrb	r3, [r3, #15]
 800142c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800142e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001434:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800143c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800143e:	4313      	orrs	r3, r2
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001456:	2001      	movs	r0, #1
 8001458:	f7ff fe1c 	bl	8001094 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001472:	4013      	ands	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001482:	2a00      	cmp	r2, #0
 8001484:	d101      	bne.n	800148a <ETH_SetMACConfig+0xee>
 8001486:	2280      	movs	r2, #128	@ 0x80
 8001488:	e000      	b.n	800148c <ETH_SetMACConfig+0xf0>
 800148a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800148c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001492:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800149a:	2a01      	cmp	r2, #1
 800149c:	d101      	bne.n	80014a2 <ETH_SetMACConfig+0x106>
 800149e:	2208      	movs	r2, #8
 80014a0:	e000      	b.n	80014a4 <ETH_SetMACConfig+0x108>
 80014a2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014a4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80014ac:	2a01      	cmp	r2, #1
 80014ae:	d101      	bne.n	80014b4 <ETH_SetMACConfig+0x118>
 80014b0:	2204      	movs	r2, #4
 80014b2:	e000      	b.n	80014b6 <ETH_SetMACConfig+0x11a>
 80014b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80014be:	2a01      	cmp	r2, #1
 80014c0:	d101      	bne.n	80014c6 <ETH_SetMACConfig+0x12a>
 80014c2:	2202      	movs	r2, #2
 80014c4:	e000      	b.n	80014c8 <ETH_SetMACConfig+0x12c>
 80014c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014c8:	4313      	orrs	r3, r2
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014e0:	2001      	movs	r0, #1
 80014e2:	f7ff fdd7 	bl	8001094 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	619a      	str	r2, [r3, #24]
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	ff20810f 	.word	0xff20810f

080014fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4b3d      	ldr	r3, [pc, #244]	@ (800160c <ETH_SetDMAConfig+0x110>)
 8001516:	4013      	ands	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	7b1b      	ldrb	r3, [r3, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <ETH_SetDMAConfig+0x2c>
 8001522:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001526:	e000      	b.n	800152a <ETH_SetDMAConfig+0x2e>
 8001528:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	7b5b      	ldrb	r3, [r3, #13]
 800152e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001530:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	7f52      	ldrb	r2, [r2, #29]
 8001536:	2a00      	cmp	r2, #0
 8001538:	d102      	bne.n	8001540 <ETH_SetDMAConfig+0x44>
 800153a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800153e:	e000      	b.n	8001542 <ETH_SetDMAConfig+0x46>
 8001540:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001542:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	7b9b      	ldrb	r3, [r3, #14]
 8001548:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800154a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001550:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	7f1b      	ldrb	r3, [r3, #28]
 8001556:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001558:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	7f9b      	ldrb	r3, [r3, #30]
 800155e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001560:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001566:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800156e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001570:	4313      	orrs	r3, r2
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001580:	461a      	mov	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001592:	2001      	movs	r0, #1
 8001594:	f7ff fd7e 	bl	8001094 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015a0:	461a      	mov	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	791b      	ldrb	r3, [r3, #4]
 80015aa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015b0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015b6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015bc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015c4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015c6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015cc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015ce:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015d4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015e2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff fd4f 	bl	8001094 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	f8de3f23 	.word	0xf8de3f23

08001610 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b0a6      	sub	sp, #152	@ 0x98
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001618:	2301      	movs	r3, #1
 800161a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001624:	2300      	movs	r3, #0
 8001626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800162e:	2301      	movs	r3, #1
 8001630:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800163a:	2301      	movs	r3, #1
 800163c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800164c:	2300      	movs	r3, #0
 800164e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001656:	2300      	movs	r3, #0
 8001658:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001672:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001676:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001678:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800167c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001684:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001688:	4619      	mov	r1, r3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fe86 	bl	800139c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001690:	2301      	movs	r3, #1
 8001692:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001694:	2301      	movs	r3, #1
 8001696:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001698:	2301      	movs	r3, #1
 800169a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800169e:	2301      	movs	r3, #1
 80016a0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016b6:	2301      	movs	r3, #1
 80016b8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016bc:	2301      	movs	r3, #1
 80016be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016c4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016d0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016d2:	2301      	movs	r3, #1
 80016d4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	4619      	mov	r1, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ff08 	bl	80014fc <ETH_SetDMAConfig>
}
 80016ec:	bf00      	nop
 80016ee:	3798      	adds	r7, #152	@ 0x98
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3305      	adds	r3, #5
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	3204      	adds	r2, #4
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	4313      	orrs	r3, r2
 8001710:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4b11      	ldr	r3, [pc, #68]	@ (800175c <ETH_MACAddressConfig+0x68>)
 8001716:	4413      	add	r3, r2
 8001718:	461a      	mov	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3303      	adds	r3, #3
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	061a      	lsls	r2, r3, #24
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3302      	adds	r3, #2
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3301      	adds	r3, #1
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	4313      	orrs	r3, r2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	7812      	ldrb	r2, [r2, #0]
 800173e:	4313      	orrs	r3, r2
 8001740:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <ETH_MACAddressConfig+0x6c>)
 8001746:	4413      	add	r3, r2
 8001748:	461a      	mov	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	6013      	str	r3, [r2, #0]
}
 800174e:	bf00      	nop
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40028040 	.word	0x40028040
 8001760:	40028044 	.word	0x40028044

08001764 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e03e      	b.n	80017f0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68d9      	ldr	r1, [r3, #12]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	440b      	add	r3, r1
 8001782:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	3206      	adds	r2, #6
 80017a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d80c      	bhi.n	80017d4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68d9      	ldr	r1, [r3, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	461a      	mov	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	e004      	b.n	80017de <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	461a      	mov	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3301      	adds	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d9bd      	bls.n	8001772 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001808:	611a      	str	r2, [r3, #16]
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001816:	b480      	push	{r7}
 8001818:	b085      	sub	sp, #20
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	e046      	b.n	80018b2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6919      	ldr	r1, [r3, #16]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2200      	movs	r2, #0
 8001840:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001860:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001868:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001876:	68b9      	ldr	r1, [r7, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	3212      	adds	r2, #18
 800187e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d80c      	bhi.n	80018a2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6919      	ldr	r1, [r3, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	461a      	mov	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	e004      	b.n	80018ac <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	461a      	mov	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d9b5      	bls.n	8001824 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018e2:	60da      	str	r2, [r3, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	@ 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e177      	b.n	8001bfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800190c:	2201      	movs	r2, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	429a      	cmp	r2, r3
 8001926:	f040 8166 	bne.w	8001bf6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	2b01      	cmp	r3, #1
 8001934:	d005      	beq.n	8001942 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193e:	2b02      	cmp	r3, #2
 8001940:	d130      	bne.n	80019a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001978:	2201      	movs	r2, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	f003 0201 	and.w	r2, r3, #1
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d017      	beq.n	80019e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d123      	bne.n	8001a34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	08da      	lsrs	r2, r3, #3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3208      	adds	r2, #8
 80019f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	220f      	movs	r2, #15
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	08da      	lsrs	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3208      	adds	r2, #8
 8001a2e:	69b9      	ldr	r1, [r7, #24]
 8001a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0203 	and.w	r2, r3, #3
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80c0 	beq.w	8001bf6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b66      	ldr	r3, [pc, #408]	@ (8001c14 <HAL_GPIO_Init+0x324>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	4a65      	ldr	r2, [pc, #404]	@ (8001c14 <HAL_GPIO_Init+0x324>)
 8001a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a86:	4b63      	ldr	r3, [pc, #396]	@ (8001c14 <HAL_GPIO_Init+0x324>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a92:	4a61      	ldr	r2, [pc, #388]	@ (8001c18 <HAL_GPIO_Init+0x328>)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a58      	ldr	r2, [pc, #352]	@ (8001c1c <HAL_GPIO_Init+0x32c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d037      	beq.n	8001b2e <HAL_GPIO_Init+0x23e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a57      	ldr	r2, [pc, #348]	@ (8001c20 <HAL_GPIO_Init+0x330>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d031      	beq.n	8001b2a <HAL_GPIO_Init+0x23a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a56      	ldr	r2, [pc, #344]	@ (8001c24 <HAL_GPIO_Init+0x334>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d02b      	beq.n	8001b26 <HAL_GPIO_Init+0x236>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a55      	ldr	r2, [pc, #340]	@ (8001c28 <HAL_GPIO_Init+0x338>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d025      	beq.n	8001b22 <HAL_GPIO_Init+0x232>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a54      	ldr	r2, [pc, #336]	@ (8001c2c <HAL_GPIO_Init+0x33c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d01f      	beq.n	8001b1e <HAL_GPIO_Init+0x22e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a53      	ldr	r2, [pc, #332]	@ (8001c30 <HAL_GPIO_Init+0x340>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d019      	beq.n	8001b1a <HAL_GPIO_Init+0x22a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a52      	ldr	r2, [pc, #328]	@ (8001c34 <HAL_GPIO_Init+0x344>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_GPIO_Init+0x226>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a51      	ldr	r2, [pc, #324]	@ (8001c38 <HAL_GPIO_Init+0x348>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00d      	beq.n	8001b12 <HAL_GPIO_Init+0x222>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a50      	ldr	r2, [pc, #320]	@ (8001c3c <HAL_GPIO_Init+0x34c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d007      	beq.n	8001b0e <HAL_GPIO_Init+0x21e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4f      	ldr	r2, [pc, #316]	@ (8001c40 <HAL_GPIO_Init+0x350>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_GPIO_Init+0x21a>
 8001b06:	2309      	movs	r3, #9
 8001b08:	e012      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	e010      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b0e:	2308      	movs	r3, #8
 8001b10:	e00e      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b12:	2307      	movs	r3, #7
 8001b14:	e00c      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b16:	2306      	movs	r3, #6
 8001b18:	e00a      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	e008      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b1e:	2304      	movs	r3, #4
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b22:	2303      	movs	r3, #3
 8001b24:	e004      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e002      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	f002 0203 	and.w	r2, r2, #3
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	4093      	lsls	r3, r2
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b40:	4935      	ldr	r1, [pc, #212]	@ (8001c18 <HAL_GPIO_Init+0x328>)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c44 <HAL_GPIO_Init+0x354>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b72:	4a34      	ldr	r2, [pc, #208]	@ (8001c44 <HAL_GPIO_Init+0x354>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b78:	4b32      	ldr	r3, [pc, #200]	@ (8001c44 <HAL_GPIO_Init+0x354>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b9c:	4a29      	ldr	r2, [pc, #164]	@ (8001c44 <HAL_GPIO_Init+0x354>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ba2:	4b28      	ldr	r3, [pc, #160]	@ (8001c44 <HAL_GPIO_Init+0x354>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c44 <HAL_GPIO_Init+0x354>)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <HAL_GPIO_Init+0x354>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf0:	4a14      	ldr	r2, [pc, #80]	@ (8001c44 <HAL_GPIO_Init+0x354>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	2b0f      	cmp	r3, #15
 8001c00:	f67f ae84 	bls.w	800190c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3724      	adds	r7, #36	@ 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40013800 	.word	0x40013800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	40020400 	.word	0x40020400
 8001c24:	40020800 	.word	0x40020800
 8001c28:	40020c00 	.word	0x40020c00
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40021400 	.word	0x40021400
 8001c34:	40021800 	.word	0x40021800
 8001c38:	40021c00 	.word	0x40021c00
 8001c3c:	40022000 	.word	0x40022000
 8001c40:	40022400 	.word	0x40022400
 8001c44:	40013c00 	.word	0x40013c00

08001c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	807b      	strh	r3, [r7, #2]
 8001c54:	4613      	mov	r3, r2
 8001c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c58:	787b      	ldrb	r3, [r7, #1]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c5e:	887a      	ldrh	r2, [r7, #2]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c64:	e003      	b.n	8001c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	041a      	lsls	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	619a      	str	r2, [r3, #24]
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af02      	add	r7, sp, #8
 8001c80:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e101      	b.n	8001e90 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d106      	bne.n	8001cac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff f82a 	bl	8000d00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2203      	movs	r2, #3
 8001cb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cba:	d102      	bne.n	8001cc2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 fb7a 	bl	80033c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7c1a      	ldrb	r2, [r3, #16]
 8001cd4:	f88d 2000 	strb.w	r2, [sp]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cdc:	f001 fb0c 	bl	80032f8 <USB_CoreInit>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0ce      	b.n	8001e90 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 fb72 	bl	80033e2 <USB_SetCurrentMode>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0bf      	b.n	8001e90 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]
 8001d14:	e04a      	b.n	8001dac <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	3315      	adds	r3, #21
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3314      	adds	r3, #20
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	b298      	uxth	r0, r3
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	332e      	adds	r3, #46	@ 0x2e
 8001d52:	4602      	mov	r2, r0
 8001d54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	3318      	adds	r3, #24
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	331c      	adds	r3, #28
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3320      	adds	r3, #32
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	3324      	adds	r3, #36	@ 0x24
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	3301      	adds	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	791b      	ldrb	r3, [r3, #4]
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d3af      	bcc.n	8001d16 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	e044      	b.n	8001e46 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	3301      	adds	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	791b      	ldrb	r3, [r3, #4]
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d3b5      	bcc.n	8001dbc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7c1a      	ldrb	r2, [r3, #16]
 8001e58:	f88d 2000 	strb.w	r2, [sp]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e60:	f001 fb0c 	bl	800347c <USB_DevInit>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00c      	b.n	8001e90 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f001 fcd4 	bl	8003836 <USB_DevDisconnect>

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e267      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d075      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb6:	4b88      	ldr	r3, [pc, #544]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d00c      	beq.n	8001edc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec2:	4b85      	ldr	r3, [pc, #532]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d112      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ece:	4b82      	ldr	r3, [pc, #520]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eda:	d10b      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	4b7e      	ldr	r3, [pc, #504]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d05b      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x108>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d157      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e242      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001efc:	d106      	bne.n	8001f0c <HAL_RCC_OscConfig+0x74>
 8001efe:	4b76      	ldr	r3, [pc, #472]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a75      	ldr	r2, [pc, #468]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e01d      	b.n	8001f48 <HAL_RCC_OscConfig+0xb0>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x98>
 8001f16:	4b70      	ldr	r3, [pc, #448]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a6f      	ldr	r2, [pc, #444]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b6d      	ldr	r3, [pc, #436]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a6c      	ldr	r2, [pc, #432]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0xb0>
 8001f30:	4b69      	ldr	r3, [pc, #420]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a68      	ldr	r2, [pc, #416]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b66      	ldr	r3, [pc, #408]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a65      	ldr	r2, [pc, #404]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff f894 	bl	800107c <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff f890 	bl	800107c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	@ 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e207      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0xc0>
 8001f76:	e014      	b.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff f880 	bl	800107c <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff f87c 	bl	800107c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	@ 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1f3      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	4b51      	ldr	r3, [pc, #324]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0xe8>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d063      	beq.n	8002076 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fae:	4b4a      	ldr	r3, [pc, #296]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fba:	4b47      	ldr	r3, [pc, #284]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d11c      	bne.n	8002000 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc6:	4b44      	ldr	r3, [pc, #272]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d116      	bne.n	8002000 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd2:	4b41      	ldr	r3, [pc, #260]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_RCC_OscConfig+0x152>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e1c7      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fea:	4b3b      	ldr	r3, [pc, #236]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4937      	ldr	r1, [pc, #220]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	e03a      	b.n	8002076 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002008:	4b34      	ldr	r3, [pc, #208]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7ff f835 	bl	800107c <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002016:	f7ff f831 	bl	800107c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e1a8      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	4b2b      	ldr	r3, [pc, #172]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b28      	ldr	r3, [pc, #160]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4925      	ldr	r1, [pc, #148]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]
 8002048:	e015      	b.n	8002076 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204a:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff f814 	bl	800107c <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002058:	f7ff f810 	bl	800107c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e187      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d036      	beq.n	80020f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d016      	beq.n	80020b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208a:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <HAL_RCC_OscConfig+0x248>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7fe fff4 	bl	800107c <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002098:	f7fe fff0 	bl	800107c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e167      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 80020ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x200>
 80020b6:	e01b      	b.n	80020f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b8:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <HAL_RCC_OscConfig+0x248>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7fe ffdd 	bl	800107c <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	e00e      	b.n	80020e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c6:	f7fe ffd9 	bl	800107c <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d907      	bls.n	80020e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e150      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
 80020d8:	40023800 	.word	0x40023800
 80020dc:	42470000 	.word	0x42470000
 80020e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e4:	4b88      	ldr	r3, [pc, #544]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80020e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1ea      	bne.n	80020c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8097 	beq.w	800222c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002102:	4b81      	ldr	r3, [pc, #516]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10f      	bne.n	800212e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	4b7d      	ldr	r3, [pc, #500]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	4a7c      	ldr	r2, [pc, #496]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800211c:	6413      	str	r3, [r2, #64]	@ 0x40
 800211e:	4b7a      	ldr	r3, [pc, #488]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212a:	2301      	movs	r3, #1
 800212c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	4b77      	ldr	r3, [pc, #476]	@ (800230c <HAL_RCC_OscConfig+0x474>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d118      	bne.n	800216c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213a:	4b74      	ldr	r3, [pc, #464]	@ (800230c <HAL_RCC_OscConfig+0x474>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a73      	ldr	r2, [pc, #460]	@ (800230c <HAL_RCC_OscConfig+0x474>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002146:	f7fe ff99 	bl	800107c <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214e:	f7fe ff95 	bl	800107c <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e10c      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	4b6a      	ldr	r3, [pc, #424]	@ (800230c <HAL_RCC_OscConfig+0x474>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d106      	bne.n	8002182 <HAL_RCC_OscConfig+0x2ea>
 8002174:	4b64      	ldr	r3, [pc, #400]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002178:	4a63      	ldr	r2, [pc, #396]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002180:	e01c      	b.n	80021bc <HAL_RCC_OscConfig+0x324>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b05      	cmp	r3, #5
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x30c>
 800218a:	4b5f      	ldr	r3, [pc, #380]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218e:	4a5e      	ldr	r2, [pc, #376]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6713      	str	r3, [r2, #112]	@ 0x70
 8002196:	4b5c      	ldr	r3, [pc, #368]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219a:	4a5b      	ldr	r2, [pc, #364]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0x324>
 80021a4:	4b58      	ldr	r3, [pc, #352]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a8:	4a57      	ldr	r2, [pc, #348]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b0:	4b55      	ldr	r3, [pc, #340]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b4:	4a54      	ldr	r2, [pc, #336]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80021b6:	f023 0304 	bic.w	r3, r3, #4
 80021ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d015      	beq.n	80021f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c4:	f7fe ff5a 	bl	800107c <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021cc:	f7fe ff56 	bl	800107c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e0cb      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0ee      	beq.n	80021cc <HAL_RCC_OscConfig+0x334>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f0:	f7fe ff44 	bl	800107c <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7fe ff40 	bl	800107c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e0b5      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220e:	4b3e      	ldr	r3, [pc, #248]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ee      	bne.n	80021f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800221a:	7dfb      	ldrb	r3, [r7, #23]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d105      	bne.n	800222c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002220:	4b39      	ldr	r3, [pc, #228]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	4a38      	ldr	r2, [pc, #224]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800222a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80a1 	beq.w	8002378 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002236:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b08      	cmp	r3, #8
 8002240:	d05c      	beq.n	80022fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d141      	bne.n	80022ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224a:	4b31      	ldr	r3, [pc, #196]	@ (8002310 <HAL_RCC_OscConfig+0x478>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe ff14 	bl	800107c <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe ff10 	bl	800107c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e087      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	4b27      	ldr	r3, [pc, #156]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	019b      	lsls	r3, r3, #6
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228c:	085b      	lsrs	r3, r3, #1
 800228e:	3b01      	subs	r3, #1
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002298:	061b      	lsls	r3, r3, #24
 800229a:	491b      	ldr	r1, [pc, #108]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <HAL_RCC_OscConfig+0x478>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7fe fee9 	bl	800107c <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ae:	f7fe fee5 	bl	800107c <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e05c      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x416>
 80022cc:	e054      	b.n	8002378 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ce:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <HAL_RCC_OscConfig+0x478>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe fed2 	bl	800107c <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022dc:	f7fe fece 	bl	800107c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e045      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x444>
 80022fa:	e03d      	b.n	8002378 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d107      	bne.n	8002314 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e038      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
 8002308:	40023800 	.word	0x40023800
 800230c:	40007000 	.word	0x40007000
 8002310:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002314:	4b1b      	ldr	r3, [pc, #108]	@ (8002384 <HAL_RCC_OscConfig+0x4ec>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d028      	beq.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d121      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d11a      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002344:	4013      	ands	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800234a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800234c:	4293      	cmp	r3, r2
 800234e:	d111      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235a:	085b      	lsrs	r3, r3, #1
 800235c:	3b01      	subs	r3, #1
 800235e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d107      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0cc      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800239c:	4b68      	ldr	r3, [pc, #416]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d90c      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b65      	ldr	r3, [pc, #404]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b63      	ldr	r3, [pc, #396]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b8      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b59      	ldr	r3, [pc, #356]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a58      	ldr	r2, [pc, #352]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f4:	4b53      	ldr	r3, [pc, #332]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a52      	ldr	r2, [pc, #328]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b50      	ldr	r3, [pc, #320]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	494d      	ldr	r1, [pc, #308]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d044      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b47      	ldr	r3, [pc, #284]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d119      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d003      	beq.n	8002446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002442:	2b03      	cmp	r3, #3
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	4b3f      	ldr	r3, [pc, #252]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	4b3b      	ldr	r3, [pc, #236]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e067      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b37      	ldr	r3, [pc, #220]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4934      	ldr	r1, [pc, #208]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7fe fe00 	bl	800107c <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7fe fdfc 	bl	800107c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e04f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b2b      	ldr	r3, [pc, #172]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b25      	ldr	r3, [pc, #148]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d20c      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b20      	ldr	r3, [pc, #128]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e032      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024dc:	4b19      	ldr	r3, [pc, #100]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4916      	ldr	r1, [pc, #88]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fa:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	490e      	ldr	r1, [pc, #56]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800250e:	f000 f821 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	490a      	ldr	r1, [pc, #40]	@ (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	5ccb      	ldrb	r3, [r1, r3]
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	4a09      	ldr	r2, [pc, #36]	@ (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fc40 	bl	8000db4 <HAL_InitTick>

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00
 8002544:	40023800 	.word	0x40023800
 8002548:	080061d8 	.word	0x080061d8
 800254c:	20000000 	.word	0x20000000
 8002550:	20000004 	.word	0x20000004

08002554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002558:	b094      	sub	sp, #80	@ 0x50
 800255a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002560:	2300      	movs	r3, #0
 8002562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002564:	2300      	movs	r3, #0
 8002566:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800256c:	4b79      	ldr	r3, [pc, #484]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d00d      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x40>
 8002578:	2b08      	cmp	r3, #8
 800257a:	f200 80e1 	bhi.w	8002740 <HAL_RCC_GetSysClockFreq+0x1ec>
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x34>
 8002582:	2b04      	cmp	r3, #4
 8002584:	d003      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0x3a>
 8002586:	e0db      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002588:	4b73      	ldr	r3, [pc, #460]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x204>)
 800258a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800258c:	e0db      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800258e:	4b73      	ldr	r3, [pc, #460]	@ (800275c <HAL_RCC_GetSysClockFreq+0x208>)
 8002590:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002592:	e0d8      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002594:	4b6f      	ldr	r3, [pc, #444]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800259c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800259e:	4b6d      	ldr	r3, [pc, #436]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d063      	beq.n	8002672 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	099b      	lsrs	r3, r3, #6
 80025b0:	2200      	movs	r2, #0
 80025b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80025be:	2300      	movs	r3, #0
 80025c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80025c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025c6:	4622      	mov	r2, r4
 80025c8:	462b      	mov	r3, r5
 80025ca:	f04f 0000 	mov.w	r0, #0
 80025ce:	f04f 0100 	mov.w	r1, #0
 80025d2:	0159      	lsls	r1, r3, #5
 80025d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d8:	0150      	lsls	r0, r2, #5
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4621      	mov	r1, r4
 80025e0:	1a51      	subs	r1, r2, r1
 80025e2:	6139      	str	r1, [r7, #16]
 80025e4:	4629      	mov	r1, r5
 80025e6:	eb63 0301 	sbc.w	r3, r3, r1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025f8:	4659      	mov	r1, fp
 80025fa:	018b      	lsls	r3, r1, #6
 80025fc:	4651      	mov	r1, sl
 80025fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002602:	4651      	mov	r1, sl
 8002604:	018a      	lsls	r2, r1, #6
 8002606:	4651      	mov	r1, sl
 8002608:	ebb2 0801 	subs.w	r8, r2, r1
 800260c:	4659      	mov	r1, fp
 800260e:	eb63 0901 	sbc.w	r9, r3, r1
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800261e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002626:	4690      	mov	r8, r2
 8002628:	4699      	mov	r9, r3
 800262a:	4623      	mov	r3, r4
 800262c:	eb18 0303 	adds.w	r3, r8, r3
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	462b      	mov	r3, r5
 8002634:	eb49 0303 	adc.w	r3, r9, r3
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002646:	4629      	mov	r1, r5
 8002648:	024b      	lsls	r3, r1, #9
 800264a:	4621      	mov	r1, r4
 800264c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002650:	4621      	mov	r1, r4
 8002652:	024a      	lsls	r2, r1, #9
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800265a:	2200      	movs	r2, #0
 800265c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800265e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002660:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002664:	f7fd fe1c 	bl	80002a0 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002670:	e058      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002672:	4b38      	ldr	r3, [pc, #224]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	099b      	lsrs	r3, r3, #6
 8002678:	2200      	movs	r2, #0
 800267a:	4618      	mov	r0, r3
 800267c:	4611      	mov	r1, r2
 800267e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002682:	623b      	str	r3, [r7, #32]
 8002684:	2300      	movs	r3, #0
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
 8002688:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800268c:	4642      	mov	r2, r8
 800268e:	464b      	mov	r3, r9
 8002690:	f04f 0000 	mov.w	r0, #0
 8002694:	f04f 0100 	mov.w	r1, #0
 8002698:	0159      	lsls	r1, r3, #5
 800269a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800269e:	0150      	lsls	r0, r2, #5
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4641      	mov	r1, r8
 80026a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80026aa:	4649      	mov	r1, r9
 80026ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026c4:	ebb2 040a 	subs.w	r4, r2, sl
 80026c8:	eb63 050b 	sbc.w	r5, r3, fp
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	00eb      	lsls	r3, r5, #3
 80026d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026da:	00e2      	lsls	r2, r4, #3
 80026dc:	4614      	mov	r4, r2
 80026de:	461d      	mov	r5, r3
 80026e0:	4643      	mov	r3, r8
 80026e2:	18e3      	adds	r3, r4, r3
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	464b      	mov	r3, r9
 80026e8:	eb45 0303 	adc.w	r3, r5, r3
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026fa:	4629      	mov	r1, r5
 80026fc:	028b      	lsls	r3, r1, #10
 80026fe:	4621      	mov	r1, r4
 8002700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002704:	4621      	mov	r1, r4
 8002706:	028a      	lsls	r2, r1, #10
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800270e:	2200      	movs	r2, #0
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	61fa      	str	r2, [r7, #28]
 8002714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002718:	f7fd fdc2 	bl	80002a0 <__aeabi_uldivmod>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4613      	mov	r3, r2
 8002722:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002724:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	0c1b      	lsrs	r3, r3, #16
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	3301      	adds	r3, #1
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002734:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800273e:	e002      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x204>)
 8002742:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002748:	4618      	mov	r0, r3
 800274a:	3750      	adds	r7, #80	@ 0x50
 800274c:	46bd      	mov	sp, r7
 800274e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	00f42400 	.word	0x00f42400
 800275c:	007a1200 	.word	0x007a1200

08002760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <HAL_RCC_GetHCLKFreq+0x14>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	20000000 	.word	0x20000000

08002778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800277c:	f7ff fff0 	bl	8002760 <HAL_RCC_GetHCLKFreq>
 8002780:	4602      	mov	r2, r0
 8002782:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	0a9b      	lsrs	r3, r3, #10
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	4903      	ldr	r1, [pc, #12]	@ (800279c <HAL_RCC_GetPCLK1Freq+0x24>)
 800278e:	5ccb      	ldrb	r3, [r1, r3]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40023800 	.word	0x40023800
 800279c:	080061e8 	.word	0x080061e8

080027a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027a4:	f7ff ffdc 	bl	8002760 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0b5b      	lsrs	r3, r3, #13
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	@ (80027c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40023800 	.word	0x40023800
 80027c4:	080061e8 	.word	0x080061e8

080027c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	220f      	movs	r2, #15
 80027d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027d8:	4b12      	ldr	r3, [pc, #72]	@ (8002824 <HAL_RCC_GetClockConfig+0x5c>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0203 	and.w	r2, r3, #3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <HAL_RCC_GetClockConfig+0x5c>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <HAL_RCC_GetClockConfig+0x5c>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027fc:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <HAL_RCC_GetClockConfig+0x5c>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	08db      	lsrs	r3, r3, #3
 8002802:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800280a:	4b07      	ldr	r3, [pc, #28]	@ (8002828 <HAL_RCC_GetClockConfig+0x60>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 020f 	and.w	r2, r3, #15
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	601a      	str	r2, [r3, #0]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	40023c00 	.word	0x40023c00

0800282c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e041      	b.n	80028c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f839 	bl	80028ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f000 f9c0 	bl	8002bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d001      	beq.n	80028f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e04e      	b.n	8002996 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a23      	ldr	r2, [pc, #140]	@ (80029a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d022      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x80>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002922:	d01d      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x80>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1f      	ldr	r2, [pc, #124]	@ (80029a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d018      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x80>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1e      	ldr	r2, [pc, #120]	@ (80029ac <HAL_TIM_Base_Start_IT+0xcc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d013      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x80>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1c      	ldr	r2, [pc, #112]	@ (80029b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00e      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x80>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1b      	ldr	r2, [pc, #108]	@ (80029b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d009      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x80>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a19      	ldr	r2, [pc, #100]	@ (80029b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x80>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a18      	ldr	r2, [pc, #96]	@ (80029bc <HAL_TIM_Base_Start_IT+0xdc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d111      	bne.n	8002984 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b06      	cmp	r3, #6
 8002970:	d010      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0201 	orr.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002982:	e007      	b.n	8002994 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40010000 	.word	0x40010000
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40000800 	.word	0x40000800
 80029b0:	40000c00 	.word	0x40000c00
 80029b4:	40010400 	.word	0x40010400
 80029b8:	40014000 	.word	0x40014000
 80029bc:	40001800 	.word	0x40001800

080029c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d020      	beq.n	8002a24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01b      	beq.n	8002a24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0202 	mvn.w	r2, #2
 80029f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f8d2 	bl	8002bb4 <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f8c4 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f8d5 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d020      	beq.n	8002a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01b      	beq.n	8002a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0204 	mvn.w	r2, #4
 8002a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2202      	movs	r2, #2
 8002a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f8ac 	bl	8002bb4 <HAL_TIM_IC_CaptureCallback>
 8002a5c:	e005      	b.n	8002a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f89e 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f8af 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d020      	beq.n	8002abc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01b      	beq.n	8002abc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0208 	mvn.w	r2, #8
 8002a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2204      	movs	r2, #4
 8002a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f886 	bl	8002bb4 <HAL_TIM_IC_CaptureCallback>
 8002aa8:	e005      	b.n	8002ab6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f878 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f889 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d020      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01b      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0210 	mvn.w	r2, #16
 8002ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2208      	movs	r2, #8
 8002ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f860 	bl	8002bb4 <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f852 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f863 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00c      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0201 	mvn.w	r2, #1
 8002b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fd ff98 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00c      	beq.n	8002b50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f906 	bl	8002d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00c      	beq.n	8002b74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f834 	bl	8002bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00c      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d007      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0220 	mvn.w	r2, #32
 8002b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f8d8 	bl	8002d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a46      	ldr	r2, [pc, #280]	@ (8002d1c <TIM_Base_SetConfig+0x12c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d013      	beq.n	8002c30 <TIM_Base_SetConfig+0x40>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0e:	d00f      	beq.n	8002c30 <TIM_Base_SetConfig+0x40>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a43      	ldr	r2, [pc, #268]	@ (8002d20 <TIM_Base_SetConfig+0x130>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00b      	beq.n	8002c30 <TIM_Base_SetConfig+0x40>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a42      	ldr	r2, [pc, #264]	@ (8002d24 <TIM_Base_SetConfig+0x134>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d007      	beq.n	8002c30 <TIM_Base_SetConfig+0x40>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a41      	ldr	r2, [pc, #260]	@ (8002d28 <TIM_Base_SetConfig+0x138>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d003      	beq.n	8002c30 <TIM_Base_SetConfig+0x40>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a40      	ldr	r2, [pc, #256]	@ (8002d2c <TIM_Base_SetConfig+0x13c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d108      	bne.n	8002c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a35      	ldr	r2, [pc, #212]	@ (8002d1c <TIM_Base_SetConfig+0x12c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d02b      	beq.n	8002ca2 <TIM_Base_SetConfig+0xb2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c50:	d027      	beq.n	8002ca2 <TIM_Base_SetConfig+0xb2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a32      	ldr	r2, [pc, #200]	@ (8002d20 <TIM_Base_SetConfig+0x130>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d023      	beq.n	8002ca2 <TIM_Base_SetConfig+0xb2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a31      	ldr	r2, [pc, #196]	@ (8002d24 <TIM_Base_SetConfig+0x134>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d01f      	beq.n	8002ca2 <TIM_Base_SetConfig+0xb2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a30      	ldr	r2, [pc, #192]	@ (8002d28 <TIM_Base_SetConfig+0x138>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d01b      	beq.n	8002ca2 <TIM_Base_SetConfig+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a2f      	ldr	r2, [pc, #188]	@ (8002d2c <TIM_Base_SetConfig+0x13c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d017      	beq.n	8002ca2 <TIM_Base_SetConfig+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a2e      	ldr	r2, [pc, #184]	@ (8002d30 <TIM_Base_SetConfig+0x140>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <TIM_Base_SetConfig+0xb2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8002d34 <TIM_Base_SetConfig+0x144>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00f      	beq.n	8002ca2 <TIM_Base_SetConfig+0xb2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a2c      	ldr	r2, [pc, #176]	@ (8002d38 <TIM_Base_SetConfig+0x148>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00b      	beq.n	8002ca2 <TIM_Base_SetConfig+0xb2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002d3c <TIM_Base_SetConfig+0x14c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d007      	beq.n	8002ca2 <TIM_Base_SetConfig+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a2a      	ldr	r2, [pc, #168]	@ (8002d40 <TIM_Base_SetConfig+0x150>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d003      	beq.n	8002ca2 <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a29      	ldr	r2, [pc, #164]	@ (8002d44 <TIM_Base_SetConfig+0x154>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d108      	bne.n	8002cb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a10      	ldr	r2, [pc, #64]	@ (8002d1c <TIM_Base_SetConfig+0x12c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d003      	beq.n	8002ce8 <TIM_Base_SetConfig+0xf8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a12      	ldr	r2, [pc, #72]	@ (8002d2c <TIM_Base_SetConfig+0x13c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d103      	bne.n	8002cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d105      	bne.n	8002d0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f023 0201 	bic.w	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	611a      	str	r2, [r3, #16]
  }
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40000800 	.word	0x40000800
 8002d28:	40000c00 	.word	0x40000c00
 8002d2c:	40010400 	.word	0x40010400
 8002d30:	40014000 	.word	0x40014000
 8002d34:	40014400 	.word	0x40014400
 8002d38:	40014800 	.word	0x40014800
 8002d3c:	40001800 	.word	0x40001800
 8002d40:	40001c00 	.word	0x40001c00
 8002d44:	40002000 	.word	0x40002000

08002d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e042      	b.n	8002e08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fd ff6a 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2224      	movs	r2, #36	@ 0x24
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002db2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f82b 	bl	8002e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002de8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e14:	b0c0      	sub	sp, #256	@ 0x100
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e2c:	68d9      	ldr	r1, [r3, #12]
 8002e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	ea40 0301 	orr.w	r3, r0, r1
 8002e38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e68:	f021 010c 	bic.w	r1, r1, #12
 8002e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e76:	430b      	orrs	r3, r1
 8002e78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8a:	6999      	ldr	r1, [r3, #24]
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	ea40 0301 	orr.w	r3, r0, r1
 8002e96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b8f      	ldr	r3, [pc, #572]	@ (80030dc <UART_SetConfig+0x2cc>)
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d005      	beq.n	8002eb0 <UART_SetConfig+0xa0>
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4b8d      	ldr	r3, [pc, #564]	@ (80030e0 <UART_SetConfig+0x2d0>)
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d104      	bne.n	8002eba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eb0:	f7ff fc76 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8002eb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002eb8:	e003      	b.n	8002ec2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eba:	f7ff fc5d 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 8002ebe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ecc:	f040 810c 	bne.w	80030e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002eda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ede:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	462b      	mov	r3, r5
 8002ee6:	1891      	adds	r1, r2, r2
 8002ee8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002eea:	415b      	adcs	r3, r3
 8002eec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002eee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	eb12 0801 	adds.w	r8, r2, r1
 8002ef8:	4629      	mov	r1, r5
 8002efa:	eb43 0901 	adc.w	r9, r3, r1
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f12:	4690      	mov	r8, r2
 8002f14:	4699      	mov	r9, r3
 8002f16:	4623      	mov	r3, r4
 8002f18:	eb18 0303 	adds.w	r3, r8, r3
 8002f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f20:	462b      	mov	r3, r5
 8002f22:	eb49 0303 	adc.w	r3, r9, r3
 8002f26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f3e:	460b      	mov	r3, r1
 8002f40:	18db      	adds	r3, r3, r3
 8002f42:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f44:	4613      	mov	r3, r2
 8002f46:	eb42 0303 	adc.w	r3, r2, r3
 8002f4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f54:	f7fd f9a4 	bl	80002a0 <__aeabi_uldivmod>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4b61      	ldr	r3, [pc, #388]	@ (80030e4 <UART_SetConfig+0x2d4>)
 8002f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	011c      	lsls	r4, r3, #4
 8002f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f78:	4642      	mov	r2, r8
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	1891      	adds	r1, r2, r2
 8002f7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f80:	415b      	adcs	r3, r3
 8002f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f88:	4641      	mov	r1, r8
 8002f8a:	eb12 0a01 	adds.w	sl, r2, r1
 8002f8e:	4649      	mov	r1, r9
 8002f90:	eb43 0b01 	adc.w	fp, r3, r1
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fa8:	4692      	mov	sl, r2
 8002faa:	469b      	mov	fp, r3
 8002fac:	4643      	mov	r3, r8
 8002fae:	eb1a 0303 	adds.w	r3, sl, r3
 8002fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	eb4b 0303 	adc.w	r3, fp, r3
 8002fbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fcc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	18db      	adds	r3, r3, r3
 8002fd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fda:	4613      	mov	r3, r2
 8002fdc:	eb42 0303 	adc.w	r3, r2, r3
 8002fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fe6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fea:	f7fd f959 	bl	80002a0 <__aeabi_uldivmod>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80030e4 <UART_SetConfig+0x2d4>)
 8002ff6:	fba3 2301 	umull	r2, r3, r3, r1
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2264      	movs	r2, #100	@ 0x64
 8002ffe:	fb02 f303 	mul.w	r3, r2, r3
 8003002:	1acb      	subs	r3, r1, r3
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800300a:	4b36      	ldr	r3, [pc, #216]	@ (80030e4 <UART_SetConfig+0x2d4>)
 800300c:	fba3 2302 	umull	r2, r3, r3, r2
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003018:	441c      	add	r4, r3
 800301a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800301e:	2200      	movs	r2, #0
 8003020:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003024:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003028:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800302c:	4642      	mov	r2, r8
 800302e:	464b      	mov	r3, r9
 8003030:	1891      	adds	r1, r2, r2
 8003032:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003034:	415b      	adcs	r3, r3
 8003036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003038:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800303c:	4641      	mov	r1, r8
 800303e:	1851      	adds	r1, r2, r1
 8003040:	6339      	str	r1, [r7, #48]	@ 0x30
 8003042:	4649      	mov	r1, r9
 8003044:	414b      	adcs	r3, r1
 8003046:	637b      	str	r3, [r7, #52]	@ 0x34
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003054:	4659      	mov	r1, fp
 8003056:	00cb      	lsls	r3, r1, #3
 8003058:	4651      	mov	r1, sl
 800305a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800305e:	4651      	mov	r1, sl
 8003060:	00ca      	lsls	r2, r1, #3
 8003062:	4610      	mov	r0, r2
 8003064:	4619      	mov	r1, r3
 8003066:	4603      	mov	r3, r0
 8003068:	4642      	mov	r2, r8
 800306a:	189b      	adds	r3, r3, r2
 800306c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003070:	464b      	mov	r3, r9
 8003072:	460a      	mov	r2, r1
 8003074:	eb42 0303 	adc.w	r3, r2, r3
 8003078:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003088:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800308c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003090:	460b      	mov	r3, r1
 8003092:	18db      	adds	r3, r3, r3
 8003094:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003096:	4613      	mov	r3, r2
 8003098:	eb42 0303 	adc.w	r3, r2, r3
 800309c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800309e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80030a6:	f7fd f8fb 	bl	80002a0 <__aeabi_uldivmod>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4b0d      	ldr	r3, [pc, #52]	@ (80030e4 <UART_SetConfig+0x2d4>)
 80030b0:	fba3 1302 	umull	r1, r3, r3, r2
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	2164      	movs	r1, #100	@ 0x64
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	3332      	adds	r3, #50	@ 0x32
 80030c2:	4a08      	ldr	r2, [pc, #32]	@ (80030e4 <UART_SetConfig+0x2d4>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	f003 0207 	and.w	r2, r3, #7
 80030ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4422      	add	r2, r4
 80030d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030d8:	e106      	b.n	80032e8 <UART_SetConfig+0x4d8>
 80030da:	bf00      	nop
 80030dc:	40011000 	.word	0x40011000
 80030e0:	40011400 	.word	0x40011400
 80030e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ec:	2200      	movs	r2, #0
 80030ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030fa:	4642      	mov	r2, r8
 80030fc:	464b      	mov	r3, r9
 80030fe:	1891      	adds	r1, r2, r2
 8003100:	6239      	str	r1, [r7, #32]
 8003102:	415b      	adcs	r3, r3
 8003104:	627b      	str	r3, [r7, #36]	@ 0x24
 8003106:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800310a:	4641      	mov	r1, r8
 800310c:	1854      	adds	r4, r2, r1
 800310e:	4649      	mov	r1, r9
 8003110:	eb43 0501 	adc.w	r5, r3, r1
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	00eb      	lsls	r3, r5, #3
 800311e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003122:	00e2      	lsls	r2, r4, #3
 8003124:	4614      	mov	r4, r2
 8003126:	461d      	mov	r5, r3
 8003128:	4643      	mov	r3, r8
 800312a:	18e3      	adds	r3, r4, r3
 800312c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003130:	464b      	mov	r3, r9
 8003132:	eb45 0303 	adc.w	r3, r5, r3
 8003136:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800313a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003146:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003156:	4629      	mov	r1, r5
 8003158:	008b      	lsls	r3, r1, #2
 800315a:	4621      	mov	r1, r4
 800315c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003160:	4621      	mov	r1, r4
 8003162:	008a      	lsls	r2, r1, #2
 8003164:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003168:	f7fd f89a 	bl	80002a0 <__aeabi_uldivmod>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4b60      	ldr	r3, [pc, #384]	@ (80032f4 <UART_SetConfig+0x4e4>)
 8003172:	fba3 2302 	umull	r2, r3, r3, r2
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	011c      	lsls	r4, r3, #4
 800317a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800317e:	2200      	movs	r2, #0
 8003180:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003184:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003188:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800318c:	4642      	mov	r2, r8
 800318e:	464b      	mov	r3, r9
 8003190:	1891      	adds	r1, r2, r2
 8003192:	61b9      	str	r1, [r7, #24]
 8003194:	415b      	adcs	r3, r3
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800319c:	4641      	mov	r1, r8
 800319e:	1851      	adds	r1, r2, r1
 80031a0:	6139      	str	r1, [r7, #16]
 80031a2:	4649      	mov	r1, r9
 80031a4:	414b      	adcs	r3, r1
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b4:	4659      	mov	r1, fp
 80031b6:	00cb      	lsls	r3, r1, #3
 80031b8:	4651      	mov	r1, sl
 80031ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031be:	4651      	mov	r1, sl
 80031c0:	00ca      	lsls	r2, r1, #3
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	4642      	mov	r2, r8
 80031ca:	189b      	adds	r3, r3, r2
 80031cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031d0:	464b      	mov	r3, r9
 80031d2:	460a      	mov	r2, r1
 80031d4:	eb42 0303 	adc.w	r3, r2, r3
 80031d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031f4:	4649      	mov	r1, r9
 80031f6:	008b      	lsls	r3, r1, #2
 80031f8:	4641      	mov	r1, r8
 80031fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031fe:	4641      	mov	r1, r8
 8003200:	008a      	lsls	r2, r1, #2
 8003202:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003206:	f7fd f84b 	bl	80002a0 <__aeabi_uldivmod>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4611      	mov	r1, r2
 8003210:	4b38      	ldr	r3, [pc, #224]	@ (80032f4 <UART_SetConfig+0x4e4>)
 8003212:	fba3 2301 	umull	r2, r3, r3, r1
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	2264      	movs	r2, #100	@ 0x64
 800321a:	fb02 f303 	mul.w	r3, r2, r3
 800321e:	1acb      	subs	r3, r1, r3
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	3332      	adds	r3, #50	@ 0x32
 8003224:	4a33      	ldr	r2, [pc, #204]	@ (80032f4 <UART_SetConfig+0x4e4>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003230:	441c      	add	r4, r3
 8003232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003236:	2200      	movs	r2, #0
 8003238:	673b      	str	r3, [r7, #112]	@ 0x70
 800323a:	677a      	str	r2, [r7, #116]	@ 0x74
 800323c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003240:	4642      	mov	r2, r8
 8003242:	464b      	mov	r3, r9
 8003244:	1891      	adds	r1, r2, r2
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	415b      	adcs	r3, r3
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003250:	4641      	mov	r1, r8
 8003252:	1851      	adds	r1, r2, r1
 8003254:	6039      	str	r1, [r7, #0]
 8003256:	4649      	mov	r1, r9
 8003258:	414b      	adcs	r3, r1
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003268:	4659      	mov	r1, fp
 800326a:	00cb      	lsls	r3, r1, #3
 800326c:	4651      	mov	r1, sl
 800326e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003272:	4651      	mov	r1, sl
 8003274:	00ca      	lsls	r2, r1, #3
 8003276:	4610      	mov	r0, r2
 8003278:	4619      	mov	r1, r3
 800327a:	4603      	mov	r3, r0
 800327c:	4642      	mov	r2, r8
 800327e:	189b      	adds	r3, r3, r2
 8003280:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003282:	464b      	mov	r3, r9
 8003284:	460a      	mov	r2, r1
 8003286:	eb42 0303 	adc.w	r3, r2, r3
 800328a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	663b      	str	r3, [r7, #96]	@ 0x60
 8003296:	667a      	str	r2, [r7, #100]	@ 0x64
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80032a4:	4649      	mov	r1, r9
 80032a6:	008b      	lsls	r3, r1, #2
 80032a8:	4641      	mov	r1, r8
 80032aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ae:	4641      	mov	r1, r8
 80032b0:	008a      	lsls	r2, r1, #2
 80032b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80032b6:	f7fc fff3 	bl	80002a0 <__aeabi_uldivmod>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4b0d      	ldr	r3, [pc, #52]	@ (80032f4 <UART_SetConfig+0x4e4>)
 80032c0:	fba3 1302 	umull	r1, r3, r3, r2
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	2164      	movs	r1, #100	@ 0x64
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	3332      	adds	r3, #50	@ 0x32
 80032d2:	4a08      	ldr	r2, [pc, #32]	@ (80032f4 <UART_SetConfig+0x4e4>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	f003 020f 	and.w	r2, r3, #15
 80032de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4422      	add	r2, r4
 80032e6:	609a      	str	r2, [r3, #8]
}
 80032e8:	bf00      	nop
 80032ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032ee:	46bd      	mov	sp, r7
 80032f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032f4:	51eb851f 	.word	0x51eb851f

080032f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032f8:	b084      	sub	sp, #16
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	f107 001c 	add.w	r0, r7, #28
 8003306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800330a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800330e:	2b01      	cmp	r3, #1
 8003310:	d123      	bne.n	800335a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003316:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003326:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800333a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800333e:	2b01      	cmp	r3, #1
 8003340:	d105      	bne.n	800334e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 faa0 	bl	8003894 <USB_CoreReset>
 8003354:	4603      	mov	r3, r0
 8003356:	73fb      	strb	r3, [r7, #15]
 8003358:	e01b      	b.n	8003392 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fa94 	bl	8003894 <USB_CoreReset>
 800336c:	4603      	mov	r3, r0
 800336e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003370:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003374:	2b00      	cmp	r3, #0
 8003376:	d106      	bne.n	8003386 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	639a      	str	r2, [r3, #56]	@ 0x38
 8003384:	e005      	b.n	8003392 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003392:	7fbb      	ldrb	r3, [r7, #30]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d10b      	bne.n	80033b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f043 0206 	orr.w	r2, r3, #6
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f043 0220 	orr.w	r2, r3, #32
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033bc:	b004      	add	sp, #16
 80033be:	4770      	bx	lr

080033c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 0201 	bic.w	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	460b      	mov	r3, r1
 80033ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80033fe:	78fb      	ldrb	r3, [r7, #3]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d115      	bne.n	8003430 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003410:	200a      	movs	r0, #10
 8003412:	f7fd fe3f 	bl	8001094 <HAL_Delay>
      ms += 10U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	330a      	adds	r3, #10
 800341a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fa2b 	bl	8003878 <USB_GetMode>
 8003422:	4603      	mov	r3, r0
 8003424:	2b01      	cmp	r3, #1
 8003426:	d01e      	beq.n	8003466 <USB_SetCurrentMode+0x84>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2bc7      	cmp	r3, #199	@ 0xc7
 800342c:	d9f0      	bls.n	8003410 <USB_SetCurrentMode+0x2e>
 800342e:	e01a      	b.n	8003466 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d115      	bne.n	8003462 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003442:	200a      	movs	r0, #10
 8003444:	f7fd fe26 	bl	8001094 <HAL_Delay>
      ms += 10U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	330a      	adds	r3, #10
 800344c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa12 	bl	8003878 <USB_GetMode>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <USB_SetCurrentMode+0x84>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2bc7      	cmp	r3, #199	@ 0xc7
 800345e:	d9f0      	bls.n	8003442 <USB_SetCurrentMode+0x60>
 8003460:	e001      	b.n	8003466 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e005      	b.n	8003472 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2bc8      	cmp	r3, #200	@ 0xc8
 800346a:	d101      	bne.n	8003470 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800347c:	b084      	sub	sp, #16
 800347e:	b580      	push	{r7, lr}
 8003480:	b086      	sub	sp, #24
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800348a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	e009      	b.n	80034b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	3340      	adds	r3, #64	@ 0x40
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	2200      	movs	r2, #0
 80034a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	3301      	adds	r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b0e      	cmp	r3, #14
 80034b4:	d9f2      	bls.n	800349c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80034b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d11c      	bne.n	80034f8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80034f6:	e00b      	b.n	8003510 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003508:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003516:	461a      	mov	r2, r3
 8003518:	2300      	movs	r3, #0
 800351a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800351c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003520:	2b01      	cmp	r3, #1
 8003522:	d10d      	bne.n	8003540 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003528:	2b00      	cmp	r3, #0
 800352a:	d104      	bne.n	8003536 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800352c:	2100      	movs	r1, #0
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f968 	bl	8003804 <USB_SetDevSpeed>
 8003534:	e008      	b.n	8003548 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003536:	2101      	movs	r1, #1
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f963 	bl	8003804 <USB_SetDevSpeed>
 800353e:	e003      	b.n	8003548 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003540:	2103      	movs	r1, #3
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f95e 	bl	8003804 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003548:	2110      	movs	r1, #16
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8fa 	bl	8003744 <USB_FlushTxFifo>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f924 	bl	80037a8 <USB_FlushRxFifo>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003570:	461a      	mov	r2, r3
 8003572:	2300      	movs	r3, #0
 8003574:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800357c:	461a      	mov	r2, r3
 800357e:	2300      	movs	r3, #0
 8003580:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003588:	461a      	mov	r2, r3
 800358a:	2300      	movs	r3, #0
 800358c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	e043      	b.n	800361c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035aa:	d118      	bne.n	80035de <USB_DevInit+0x162>
    {
      if (i == 0U)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035be:	461a      	mov	r2, r3
 80035c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e013      	b.n	80035f0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d4:	461a      	mov	r2, r3
 80035d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	e008      	b.n	80035f0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ea:	461a      	mov	r2, r3
 80035ec:	2300      	movs	r3, #0
 80035ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035fc:	461a      	mov	r2, r3
 80035fe:	2300      	movs	r3, #0
 8003600:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800360e:	461a      	mov	r2, r3
 8003610:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003614:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	3301      	adds	r3, #1
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003620:	461a      	mov	r2, r3
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4293      	cmp	r3, r2
 8003626:	d3b5      	bcc.n	8003594 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	e043      	b.n	80036b6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003640:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003644:	d118      	bne.n	8003678 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10a      	bne.n	8003662 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003658:	461a      	mov	r2, r3
 800365a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	e013      	b.n	800368a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800366e:	461a      	mov	r2, r3
 8003670:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e008      	b.n	800368a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4413      	add	r3, r2
 8003680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003684:	461a      	mov	r2, r3
 8003686:	2300      	movs	r3, #0
 8003688:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003696:	461a      	mov	r2, r3
 8003698:	2300      	movs	r3, #0
 800369a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a8:	461a      	mov	r2, r3
 80036aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80036ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	3301      	adds	r3, #1
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80036ba:	461a      	mov	r2, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4293      	cmp	r3, r2
 80036c0:	d3b5      	bcc.n	800362e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80036e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80036e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	f043 0210 	orr.w	r2, r3, #16
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699a      	ldr	r2, [r3, #24]
 80036fc:	4b10      	ldr	r3, [pc, #64]	@ (8003740 <USB_DevInit+0x2c4>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003704:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f043 0208 	orr.w	r2, r3, #8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003718:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800371c:	2b01      	cmp	r3, #1
 800371e:	d107      	bne.n	8003730 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003730:	7dfb      	ldrb	r3, [r7, #23]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800373c:	b004      	add	sp, #16
 800373e:	4770      	bx	lr
 8003740:	803c3800 	.word	0x803c3800

08003744 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3301      	adds	r3, #1
 8003756:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800375e:	d901      	bls.n	8003764 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e01b      	b.n	800379c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	daf2      	bge.n	8003752 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	019b      	lsls	r3, r3, #6
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3301      	adds	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003788:	d901      	bls.n	800378e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e006      	b.n	800379c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b20      	cmp	r3, #32
 8003798:	d0f0      	beq.n	800377c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3301      	adds	r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037c0:	d901      	bls.n	80037c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e018      	b.n	80037f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	daf2      	bge.n	80037b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2210      	movs	r2, #16
 80037d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3301      	adds	r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037e4:	d901      	bls.n	80037ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e006      	b.n	80037f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d0f0      	beq.n	80037d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	68f9      	ldr	r1, [r7, #12]
 8003820:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003824:	4313      	orrs	r3, r2
 8003826:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003850:	f023 0303 	bic.w	r3, r3, #3
 8003854:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f003 0301 	and.w	r3, r3, #1
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3301      	adds	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80038ac:	d901      	bls.n	80038b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e01b      	b.n	80038ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	daf2      	bge.n	80038a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3301      	adds	r3, #1
 80038ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80038d6:	d901      	bls.n	80038dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e006      	b.n	80038ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d0f0      	beq.n	80038ca <USB_CoreReset+0x36>

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	4603      	mov	r3, r0
 80038fe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003904:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003908:	2b84      	cmp	r3, #132	@ 0x84
 800390a:	d005      	beq.n	8003918 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800390c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	3303      	adds	r3, #3
 8003916:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003918:	68fb      	ldr	r3, [r7, #12]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800392a:	f000 fa7b 	bl	8003e24 <vTaskStartScheduler>
  
  return osOK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}

08003934 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003936:	b087      	sub	sp, #28
 8003938:	af02      	add	r7, sp, #8
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685c      	ldr	r4, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800394a:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ffcf 	bl	80038f6 <makeFreeRtosPriority>
 8003958:	4602      	mov	r2, r0
 800395a:	f107 030c 	add.w	r3, r7, #12
 800395e:	9301      	str	r3, [sp, #4]
 8003960:	9200      	str	r2, [sp, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	4632      	mov	r2, r6
 8003966:	4629      	mov	r1, r5
 8003968:	4620      	mov	r0, r4
 800396a:	f000 f8d9 	bl	8003b20 <xTaskCreate>
 800396e:	4603      	mov	r3, r0
 8003970:	2b01      	cmp	r3, #1
 8003972:	d001      	beq.n	8003978 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003974:	2300      	movs	r3, #0
 8003976:	e000      	b.n	800397a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003978:	68fb      	ldr	r3, [r7, #12]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003984 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a09      	ldr	r2, [pc, #36]	@ (80039b4 <osDelay+0x30>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	099b      	lsrs	r3, r3, #6
 8003996:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <osDelay+0x1e>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	e000      	b.n	80039a4 <osDelay+0x20>
 80039a2:	2301      	movs	r3, #1
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fa07 	bl	8003db8 <vTaskDelay>
  
  return osOK;
 80039aa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	10624dd3 	.word	0x10624dd3

080039b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f103 0208 	add.w	r2, r3, #8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f04f 32ff 	mov.w	r2, #4294967295
 80039d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f103 0208 	add.w	r2, r3, #8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f103 0208 	add.w	r2, r3, #8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a12:	b480      	push	{r7}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	601a      	str	r2, [r3, #0]
}
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a70:	d103      	bne.n	8003a7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	e00c      	b.n	8003a94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e002      	b.n	8003a88 <vListInsert+0x2e>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d2f6      	bcs.n	8003a82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	601a      	str	r2, [r3, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6892      	ldr	r2, [r2, #8]
 8003ae2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6852      	ldr	r2, [r2, #4]
 8003aec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d103      	bne.n	8003b00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	1e5a      	subs	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08c      	sub	sp, #48	@ 0x30
 8003b24:	af04      	add	r7, sp, #16
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fec1 	bl	80048bc <pvPortMalloc>
 8003b3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00e      	beq.n	8003b60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b42:	20a0      	movs	r0, #160	@ 0xa0
 8003b44:	f000 feba 	bl	80048bc <pvPortMalloc>
 8003b48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b56:	e005      	b.n	8003b64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b58:	6978      	ldr	r0, [r7, #20]
 8003b5a:	f000 ff7d 	bl	8004a58 <vPortFree>
 8003b5e:	e001      	b.n	8003b64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d013      	beq.n	8003b92 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b6a:	88fa      	ldrh	r2, [r7, #6]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	9303      	str	r3, [sp, #12]
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	9302      	str	r3, [sp, #8]
 8003b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f80f 	bl	8003ba4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b86:	69f8      	ldr	r0, [r7, #28]
 8003b88:	f000 f8ac 	bl	8003ce4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	e002      	b.n	8003b98 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295
 8003b96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b98:	69bb      	ldr	r3, [r7, #24]
	}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f023 0307 	bic.w	r3, r3, #7
 8003bca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00b      	beq.n	8003bee <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	617b      	str	r3, [r7, #20]
}
 8003be8:	bf00      	nop
 8003bea:	bf00      	nop
 8003bec:	e7fd      	b.n	8003bea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01f      	beq.n	8003c34 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
 8003bf8:	e012      	b.n	8003c20 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	4413      	add	r3, r2
 8003c00:	7819      	ldrb	r1, [r3, #0]
 8003c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	4413      	add	r3, r2
 8003c08:	3334      	adds	r3, #52	@ 0x34
 8003c0a:	460a      	mov	r2, r1
 8003c0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	4413      	add	r3, r2
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d006      	beq.n	8003c28 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	61fb      	str	r3, [r7, #28]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	2b0f      	cmp	r3, #15
 8003c24:	d9e9      	bls.n	8003bfa <prvInitialiseNewTask+0x56>
 8003c26:	e000      	b.n	8003c2a <prvInitialiseNewTask+0x86>
			{
				break;
 8003c28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c32:	e003      	b.n	8003c3c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3e:	2b06      	cmp	r3, #6
 8003c40:	d901      	bls.n	8003c46 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c42:	2306      	movs	r3, #6
 8003c44:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c50:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c54:	2200      	movs	r2, #0
 8003c56:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fecb 	bl	80039f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c64:	3318      	adds	r3, #24
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff fec6 	bl	80039f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c74:	f1c3 0207 	rsb	r2, r3, #7
 8003c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c80:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c84:	2200      	movs	r2, #0
 8003c86:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c94:	334c      	adds	r3, #76	@ 0x4c
 8003c96:	224c      	movs	r2, #76	@ 0x4c
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 f9d3 	bl	8005046 <memset>
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca2:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd8 <prvInitialiseNewTask+0x134>)
 8003ca4:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8003cdc <prvInitialiseNewTask+0x138>)
 8003caa:	655a      	str	r2, [r3, #84]	@ 0x54
 8003cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cae:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce0 <prvInitialiseNewTask+0x13c>)
 8003cb0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	68f9      	ldr	r1, [r7, #12]
 8003cb6:	69b8      	ldr	r0, [r7, #24]
 8003cb8:	f000 fbf2 	bl	80044a0 <pxPortInitialiseStack>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ccc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cce:	bf00      	nop
 8003cd0:	3720      	adds	r7, #32
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20004594 	.word	0x20004594
 8003cdc:	200045fc 	.word	0x200045fc
 8003ce0:	20004664 	.word	0x20004664

08003ce4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cec:	f000 fd0c 	bl	8004708 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d9c <prvAddNewTaskToReadyList+0xb8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	4a29      	ldr	r2, [pc, #164]	@ (8003d9c <prvAddNewTaskToReadyList+0xb8>)
 8003cf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cfa:	4b29      	ldr	r3, [pc, #164]	@ (8003da0 <prvAddNewTaskToReadyList+0xbc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d02:	4a27      	ldr	r2, [pc, #156]	@ (8003da0 <prvAddNewTaskToReadyList+0xbc>)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d08:	4b24      	ldr	r3, [pc, #144]	@ (8003d9c <prvAddNewTaskToReadyList+0xb8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d110      	bne.n	8003d32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d10:	f000 fabc 	bl	800428c <prvInitialiseTaskLists>
 8003d14:	e00d      	b.n	8003d32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d16:	4b23      	ldr	r3, [pc, #140]	@ (8003da4 <prvAddNewTaskToReadyList+0xc0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d1e:	4b20      	ldr	r3, [pc, #128]	@ (8003da0 <prvAddNewTaskToReadyList+0xbc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d802      	bhi.n	8003d32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003da0 <prvAddNewTaskToReadyList+0xbc>)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d32:	4b1d      	ldr	r3, [pc, #116]	@ (8003da8 <prvAddNewTaskToReadyList+0xc4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3301      	adds	r3, #1
 8003d38:	4a1b      	ldr	r2, [pc, #108]	@ (8003da8 <prvAddNewTaskToReadyList+0xc4>)
 8003d3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d40:	2201      	movs	r2, #1
 8003d42:	409a      	lsls	r2, r3
 8003d44:	4b19      	ldr	r3, [pc, #100]	@ (8003dac <prvAddNewTaskToReadyList+0xc8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	4a18      	ldr	r2, [pc, #96]	@ (8003dac <prvAddNewTaskToReadyList+0xc8>)
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4a15      	ldr	r2, [pc, #84]	@ (8003db0 <prvAddNewTaskToReadyList+0xcc>)
 8003d5c:	441a      	add	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	4619      	mov	r1, r3
 8003d64:	4610      	mov	r0, r2
 8003d66:	f7ff fe54 	bl	8003a12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d6a:	f000 fcff 	bl	800476c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <prvAddNewTaskToReadyList+0xc0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00e      	beq.n	8003d94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d76:	4b0a      	ldr	r3, [pc, #40]	@ (8003da0 <prvAddNewTaskToReadyList+0xbc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d207      	bcs.n	8003d94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d84:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <prvAddNewTaskToReadyList+0xd0>)
 8003d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d94:	bf00      	nop
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20000940 	.word	0x20000940
 8003da0:	20000840 	.word	0x20000840
 8003da4:	2000094c 	.word	0x2000094c
 8003da8:	2000095c 	.word	0x2000095c
 8003dac:	20000948 	.word	0x20000948
 8003db0:	20000844 	.word	0x20000844
 8003db4:	e000ed04 	.word	0xe000ed04

08003db8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d018      	beq.n	8003dfc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003dca:	4b14      	ldr	r3, [pc, #80]	@ (8003e1c <vTaskDelay+0x64>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <vTaskDelay+0x32>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	60bb      	str	r3, [r7, #8]
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	e7fd      	b.n	8003de6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003dea:	f000 f86d 	bl	8003ec8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003dee:	2100      	movs	r1, #0
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 faef 	bl	80043d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003df6:	f000 f875 	bl	8003ee4 <xTaskResumeAll>
 8003dfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d107      	bne.n	8003e12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003e02:	4b07      	ldr	r3, [pc, #28]	@ (8003e20 <vTaskDelay+0x68>)
 8003e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000968 	.word	0x20000968
 8003e20:	e000ed04 	.word	0xe000ed04

08003e24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea8 <vTaskStartScheduler+0x84>)
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2300      	movs	r3, #0
 8003e34:	2280      	movs	r2, #128	@ 0x80
 8003e36:	491d      	ldr	r1, [pc, #116]	@ (8003eac <vTaskStartScheduler+0x88>)
 8003e38:	481d      	ldr	r0, [pc, #116]	@ (8003eb0 <vTaskStartScheduler+0x8c>)
 8003e3a:	f7ff fe71 	bl	8003b20 <xTaskCreate>
 8003e3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d11b      	bne.n	8003e7e <vTaskStartScheduler+0x5a>
	__asm volatile
 8003e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	60bb      	str	r3, [r7, #8]
}
 8003e58:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e5a:	4b16      	ldr	r3, [pc, #88]	@ (8003eb4 <vTaskStartScheduler+0x90>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	334c      	adds	r3, #76	@ 0x4c
 8003e60:	4a15      	ldr	r2, [pc, #84]	@ (8003eb8 <vTaskStartScheduler+0x94>)
 8003e62:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e64:	4b15      	ldr	r3, [pc, #84]	@ (8003ebc <vTaskStartScheduler+0x98>)
 8003e66:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e6c:	4b14      	ldr	r3, [pc, #80]	@ (8003ec0 <vTaskStartScheduler+0x9c>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e72:	4b14      	ldr	r3, [pc, #80]	@ (8003ec4 <vTaskStartScheduler+0xa0>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e78:	f000 fba2 	bl	80045c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e7c:	e00f      	b.n	8003e9e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d10b      	bne.n	8003e9e <vTaskStartScheduler+0x7a>
	__asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	607b      	str	r3, [r7, #4]
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	e7fd      	b.n	8003e9a <vTaskStartScheduler+0x76>
}
 8003e9e:	bf00      	nop
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20000964 	.word	0x20000964
 8003eac:	080061d0 	.word	0x080061d0
 8003eb0:	0800425d 	.word	0x0800425d
 8003eb4:	20000840 	.word	0x20000840
 8003eb8:	2000001c 	.word	0x2000001c
 8003ebc:	20000960 	.word	0x20000960
 8003ec0:	2000094c 	.word	0x2000094c
 8003ec4:	20000944 	.word	0x20000944

08003ec8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ecc:	4b04      	ldr	r3, [pc, #16]	@ (8003ee0 <vTaskSuspendAll+0x18>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	4a03      	ldr	r2, [pc, #12]	@ (8003ee0 <vTaskSuspendAll+0x18>)
 8003ed4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	20000968 	.word	0x20000968

08003ee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ef2:	4b42      	ldr	r3, [pc, #264]	@ (8003ffc <xTaskResumeAll+0x118>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10b      	bne.n	8003f12 <xTaskResumeAll+0x2e>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	603b      	str	r3, [r7, #0]
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	e7fd      	b.n	8003f0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f12:	f000 fbf9 	bl	8004708 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f16:	4b39      	ldr	r3, [pc, #228]	@ (8003ffc <xTaskResumeAll+0x118>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	4a37      	ldr	r2, [pc, #220]	@ (8003ffc <xTaskResumeAll+0x118>)
 8003f1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f20:	4b36      	ldr	r3, [pc, #216]	@ (8003ffc <xTaskResumeAll+0x118>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d161      	bne.n	8003fec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f28:	4b35      	ldr	r3, [pc, #212]	@ (8004000 <xTaskResumeAll+0x11c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d05d      	beq.n	8003fec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f30:	e02e      	b.n	8003f90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f32:	4b34      	ldr	r3, [pc, #208]	@ (8004004 <xTaskResumeAll+0x120>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3318      	adds	r3, #24
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fdc4 	bl	8003acc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fdbf 	bl	8003acc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	2201      	movs	r2, #1
 8003f54:	409a      	lsls	r2, r3
 8003f56:	4b2c      	ldr	r3, [pc, #176]	@ (8004008 <xTaskResumeAll+0x124>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	4a2a      	ldr	r2, [pc, #168]	@ (8004008 <xTaskResumeAll+0x124>)
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4a27      	ldr	r2, [pc, #156]	@ (800400c <xTaskResumeAll+0x128>)
 8003f6e:	441a      	add	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f7ff fd4b 	bl	8003a12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f80:	4b23      	ldr	r3, [pc, #140]	@ (8004010 <xTaskResumeAll+0x12c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d302      	bcc.n	8003f90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003f8a:	4b22      	ldr	r3, [pc, #136]	@ (8004014 <xTaskResumeAll+0x130>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f90:	4b1c      	ldr	r3, [pc, #112]	@ (8004004 <xTaskResumeAll+0x120>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1cc      	bne.n	8003f32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f9e:	f000 f9f9 	bl	8004394 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8004018 <xTaskResumeAll+0x134>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d010      	beq.n	8003fd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fae:	f000 f837 	bl	8004020 <xTaskIncrementTick>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003fb8:	4b16      	ldr	r3, [pc, #88]	@ (8004014 <xTaskResumeAll+0x130>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f1      	bne.n	8003fae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003fca:	4b13      	ldr	r3, [pc, #76]	@ (8004018 <xTaskResumeAll+0x134>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fd0:	4b10      	ldr	r3, [pc, #64]	@ (8004014 <xTaskResumeAll+0x130>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800401c <xTaskResumeAll+0x138>)
 8003fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fec:	f000 fbbe 	bl	800476c <vPortExitCritical>

	return xAlreadyYielded;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000968 	.word	0x20000968
 8004000:	20000940 	.word	0x20000940
 8004004:	20000900 	.word	0x20000900
 8004008:	20000948 	.word	0x20000948
 800400c:	20000844 	.word	0x20000844
 8004010:	20000840 	.word	0x20000840
 8004014:	20000954 	.word	0x20000954
 8004018:	20000950 	.word	0x20000950
 800401c:	e000ed04 	.word	0xe000ed04

08004020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800402a:	4b4f      	ldr	r3, [pc, #316]	@ (8004168 <xTaskIncrementTick+0x148>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f040 808f 	bne.w	8004152 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004034:	4b4d      	ldr	r3, [pc, #308]	@ (800416c <xTaskIncrementTick+0x14c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3301      	adds	r3, #1
 800403a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800403c:	4a4b      	ldr	r2, [pc, #300]	@ (800416c <xTaskIncrementTick+0x14c>)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d121      	bne.n	800408c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004048:	4b49      	ldr	r3, [pc, #292]	@ (8004170 <xTaskIncrementTick+0x150>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	603b      	str	r3, [r7, #0]
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	e7fd      	b.n	8004066 <xTaskIncrementTick+0x46>
 800406a:	4b41      	ldr	r3, [pc, #260]	@ (8004170 <xTaskIncrementTick+0x150>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	4b40      	ldr	r3, [pc, #256]	@ (8004174 <xTaskIncrementTick+0x154>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a3e      	ldr	r2, [pc, #248]	@ (8004170 <xTaskIncrementTick+0x150>)
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	4a3e      	ldr	r2, [pc, #248]	@ (8004174 <xTaskIncrementTick+0x154>)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4b3e      	ldr	r3, [pc, #248]	@ (8004178 <xTaskIncrementTick+0x158>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3301      	adds	r3, #1
 8004084:	4a3c      	ldr	r2, [pc, #240]	@ (8004178 <xTaskIncrementTick+0x158>)
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	f000 f984 	bl	8004394 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800408c:	4b3b      	ldr	r3, [pc, #236]	@ (800417c <xTaskIncrementTick+0x15c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	429a      	cmp	r2, r3
 8004094:	d348      	bcc.n	8004128 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004096:	4b36      	ldr	r3, [pc, #216]	@ (8004170 <xTaskIncrementTick+0x150>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d104      	bne.n	80040aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a0:	4b36      	ldr	r3, [pc, #216]	@ (800417c <xTaskIncrementTick+0x15c>)
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295
 80040a6:	601a      	str	r2, [r3, #0]
					break;
 80040a8:	e03e      	b.n	8004128 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040aa:	4b31      	ldr	r3, [pc, #196]	@ (8004170 <xTaskIncrementTick+0x150>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d203      	bcs.n	80040ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040c2:	4a2e      	ldr	r2, [pc, #184]	@ (800417c <xTaskIncrementTick+0x15c>)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040c8:	e02e      	b.n	8004128 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3304      	adds	r3, #4
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fcfc 	bl	8003acc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d004      	beq.n	80040e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	3318      	adds	r3, #24
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fcf3 	bl	8003acc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ea:	2201      	movs	r2, #1
 80040ec:	409a      	lsls	r2, r3
 80040ee:	4b24      	ldr	r3, [pc, #144]	@ (8004180 <xTaskIncrementTick+0x160>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	4a22      	ldr	r2, [pc, #136]	@ (8004180 <xTaskIncrementTick+0x160>)
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4a1f      	ldr	r2, [pc, #124]	@ (8004184 <xTaskIncrementTick+0x164>)
 8004106:	441a      	add	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f7ff fc7f 	bl	8003a12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004118:	4b1b      	ldr	r3, [pc, #108]	@ (8004188 <xTaskIncrementTick+0x168>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	429a      	cmp	r2, r3
 8004120:	d3b9      	bcc.n	8004096 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004122:	2301      	movs	r3, #1
 8004124:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004126:	e7b6      	b.n	8004096 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004128:	4b17      	ldr	r3, [pc, #92]	@ (8004188 <xTaskIncrementTick+0x168>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800412e:	4915      	ldr	r1, [pc, #84]	@ (8004184 <xTaskIncrementTick+0x164>)
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d901      	bls.n	8004144 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004140:	2301      	movs	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004144:	4b11      	ldr	r3, [pc, #68]	@ (800418c <xTaskIncrementTick+0x16c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d007      	beq.n	800415c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800414c:	2301      	movs	r3, #1
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	e004      	b.n	800415c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004152:	4b0f      	ldr	r3, [pc, #60]	@ (8004190 <xTaskIncrementTick+0x170>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3301      	adds	r3, #1
 8004158:	4a0d      	ldr	r2, [pc, #52]	@ (8004190 <xTaskIncrementTick+0x170>)
 800415a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800415c:	697b      	ldr	r3, [r7, #20]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000968 	.word	0x20000968
 800416c:	20000944 	.word	0x20000944
 8004170:	200008f8 	.word	0x200008f8
 8004174:	200008fc 	.word	0x200008fc
 8004178:	20000958 	.word	0x20000958
 800417c:	20000960 	.word	0x20000960
 8004180:	20000948 	.word	0x20000948
 8004184:	20000844 	.word	0x20000844
 8004188:	20000840 	.word	0x20000840
 800418c:	20000954 	.word	0x20000954
 8004190:	20000950 	.word	0x20000950

08004194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800419a:	4b2a      	ldr	r3, [pc, #168]	@ (8004244 <vTaskSwitchContext+0xb0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041a2:	4b29      	ldr	r3, [pc, #164]	@ (8004248 <vTaskSwitchContext+0xb4>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041a8:	e045      	b.n	8004236 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80041aa:	4b27      	ldr	r3, [pc, #156]	@ (8004248 <vTaskSwitchContext+0xb4>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b0:	4b26      	ldr	r3, [pc, #152]	@ (800424c <vTaskSwitchContext+0xb8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	fab3 f383 	clz	r3, r3
 80041bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80041be:	7afb      	ldrb	r3, [r7, #11]
 80041c0:	f1c3 031f 	rsb	r3, r3, #31
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	4922      	ldr	r1, [pc, #136]	@ (8004250 <vTaskSwitchContext+0xbc>)
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	607b      	str	r3, [r7, #4]
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	e7fd      	b.n	80041ee <vTaskSwitchContext+0x5a>
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4a14      	ldr	r2, [pc, #80]	@ (8004250 <vTaskSwitchContext+0xbc>)
 80041fe:	4413      	add	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	3308      	adds	r3, #8
 8004214:	429a      	cmp	r2, r3
 8004216:	d104      	bne.n	8004222 <vTaskSwitchContext+0x8e>
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a0a      	ldr	r2, [pc, #40]	@ (8004254 <vTaskSwitchContext+0xc0>)
 800422a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800422c:	4b09      	ldr	r3, [pc, #36]	@ (8004254 <vTaskSwitchContext+0xc0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	334c      	adds	r3, #76	@ 0x4c
 8004232:	4a09      	ldr	r2, [pc, #36]	@ (8004258 <vTaskSwitchContext+0xc4>)
 8004234:	6013      	str	r3, [r2, #0]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000968 	.word	0x20000968
 8004248:	20000954 	.word	0x20000954
 800424c:	20000948 	.word	0x20000948
 8004250:	20000844 	.word	0x20000844
 8004254:	20000840 	.word	0x20000840
 8004258:	2000001c 	.word	0x2000001c

0800425c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004264:	f000 f852 	bl	800430c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004268:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <prvIdleTask+0x28>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d9f9      	bls.n	8004264 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004270:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <prvIdleTask+0x2c>)
 8004272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004280:	e7f0      	b.n	8004264 <prvIdleTask+0x8>
 8004282:	bf00      	nop
 8004284:	20000844 	.word	0x20000844
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004292:	2300      	movs	r3, #0
 8004294:	607b      	str	r3, [r7, #4]
 8004296:	e00c      	b.n	80042b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <prvInitialiseTaskLists+0x60>)
 80042a4:	4413      	add	r3, r2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff fb86 	bl	80039b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3301      	adds	r3, #1
 80042b0:	607b      	str	r3, [r7, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b06      	cmp	r3, #6
 80042b6:	d9ef      	bls.n	8004298 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042b8:	480d      	ldr	r0, [pc, #52]	@ (80042f0 <prvInitialiseTaskLists+0x64>)
 80042ba:	f7ff fb7d 	bl	80039b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042be:	480d      	ldr	r0, [pc, #52]	@ (80042f4 <prvInitialiseTaskLists+0x68>)
 80042c0:	f7ff fb7a 	bl	80039b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042c4:	480c      	ldr	r0, [pc, #48]	@ (80042f8 <prvInitialiseTaskLists+0x6c>)
 80042c6:	f7ff fb77 	bl	80039b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042ca:	480c      	ldr	r0, [pc, #48]	@ (80042fc <prvInitialiseTaskLists+0x70>)
 80042cc:	f7ff fb74 	bl	80039b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042d0:	480b      	ldr	r0, [pc, #44]	@ (8004300 <prvInitialiseTaskLists+0x74>)
 80042d2:	f7ff fb71 	bl	80039b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <prvInitialiseTaskLists+0x78>)
 80042d8:	4a05      	ldr	r2, [pc, #20]	@ (80042f0 <prvInitialiseTaskLists+0x64>)
 80042da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <prvInitialiseTaskLists+0x7c>)
 80042de:	4a05      	ldr	r2, [pc, #20]	@ (80042f4 <prvInitialiseTaskLists+0x68>)
 80042e0:	601a      	str	r2, [r3, #0]
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000844 	.word	0x20000844
 80042f0:	200008d0 	.word	0x200008d0
 80042f4:	200008e4 	.word	0x200008e4
 80042f8:	20000900 	.word	0x20000900
 80042fc:	20000914 	.word	0x20000914
 8004300:	2000092c 	.word	0x2000092c
 8004304:	200008f8 	.word	0x200008f8
 8004308:	200008fc 	.word	0x200008fc

0800430c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004312:	e019      	b.n	8004348 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004314:	f000 f9f8 	bl	8004708 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004318:	4b10      	ldr	r3, [pc, #64]	@ (800435c <prvCheckTasksWaitingTermination+0x50>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fbd1 	bl	8003acc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800432a:	4b0d      	ldr	r3, [pc, #52]	@ (8004360 <prvCheckTasksWaitingTermination+0x54>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3b01      	subs	r3, #1
 8004330:	4a0b      	ldr	r2, [pc, #44]	@ (8004360 <prvCheckTasksWaitingTermination+0x54>)
 8004332:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004334:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <prvCheckTasksWaitingTermination+0x58>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3b01      	subs	r3, #1
 800433a:	4a0a      	ldr	r2, [pc, #40]	@ (8004364 <prvCheckTasksWaitingTermination+0x58>)
 800433c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800433e:	f000 fa15 	bl	800476c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f810 	bl	8004368 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004348:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <prvCheckTasksWaitingTermination+0x58>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e1      	bne.n	8004314 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004350:	bf00      	nop
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000914 	.word	0x20000914
 8004360:	20000940 	.word	0x20000940
 8004364:	20000928 	.word	0x20000928

08004368 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	334c      	adds	r3, #76	@ 0x4c
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fe7f 	bl	8005078 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fb6a 	bl	8004a58 <vPortFree>
			vPortFree( pxTCB );
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fb67 	bl	8004a58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800439a:	4b0c      	ldr	r3, [pc, #48]	@ (80043cc <prvResetNextTaskUnblockTime+0x38>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d104      	bne.n	80043ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043a4:	4b0a      	ldr	r3, [pc, #40]	@ (80043d0 <prvResetNextTaskUnblockTime+0x3c>)
 80043a6:	f04f 32ff 	mov.w	r2, #4294967295
 80043aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043ac:	e008      	b.n	80043c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ae:	4b07      	ldr	r3, [pc, #28]	@ (80043cc <prvResetNextTaskUnblockTime+0x38>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	4a04      	ldr	r2, [pc, #16]	@ (80043d0 <prvResetNextTaskUnblockTime+0x3c>)
 80043be:	6013      	str	r3, [r2, #0]
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	200008f8 	.word	0x200008f8
 80043d0:	20000960 	.word	0x20000960

080043d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043de:	4b29      	ldr	r3, [pc, #164]	@ (8004484 <prvAddCurrentTaskToDelayedList+0xb0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043e4:	4b28      	ldr	r3, [pc, #160]	@ (8004488 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3304      	adds	r3, #4
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fb6e 	bl	8003acc <uxListRemove>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10b      	bne.n	800440e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80043f6:	4b24      	ldr	r3, [pc, #144]	@ (8004488 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	2201      	movs	r2, #1
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43da      	mvns	r2, r3
 8004404:	4b21      	ldr	r3, [pc, #132]	@ (800448c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4013      	ands	r3, r2
 800440a:	4a20      	ldr	r2, [pc, #128]	@ (800448c <prvAddCurrentTaskToDelayedList+0xb8>)
 800440c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d10a      	bne.n	800442c <prvAddCurrentTaskToDelayedList+0x58>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d007      	beq.n	800442c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800441c:	4b1a      	ldr	r3, [pc, #104]	@ (8004488 <prvAddCurrentTaskToDelayedList+0xb4>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3304      	adds	r3, #4
 8004422:	4619      	mov	r1, r3
 8004424:	481a      	ldr	r0, [pc, #104]	@ (8004490 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004426:	f7ff faf4 	bl	8003a12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800442a:	e026      	b.n	800447a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4413      	add	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004434:	4b14      	ldr	r3, [pc, #80]	@ (8004488 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	429a      	cmp	r2, r3
 8004442:	d209      	bcs.n	8004458 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004444:	4b13      	ldr	r3, [pc, #76]	@ (8004494 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4b0f      	ldr	r3, [pc, #60]	@ (8004488 <prvAddCurrentTaskToDelayedList+0xb4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3304      	adds	r3, #4
 800444e:	4619      	mov	r1, r3
 8004450:	4610      	mov	r0, r2
 8004452:	f7ff fb02 	bl	8003a5a <vListInsert>
}
 8004456:	e010      	b.n	800447a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004458:	4b0f      	ldr	r3, [pc, #60]	@ (8004498 <prvAddCurrentTaskToDelayedList+0xc4>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <prvAddCurrentTaskToDelayedList+0xb4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3304      	adds	r3, #4
 8004462:	4619      	mov	r1, r3
 8004464:	4610      	mov	r0, r2
 8004466:	f7ff faf8 	bl	8003a5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800446a:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <prvAddCurrentTaskToDelayedList+0xc8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	429a      	cmp	r2, r3
 8004472:	d202      	bcs.n	800447a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004474:	4a09      	ldr	r2, [pc, #36]	@ (800449c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	6013      	str	r3, [r2, #0]
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000944 	.word	0x20000944
 8004488:	20000840 	.word	0x20000840
 800448c:	20000948 	.word	0x20000948
 8004490:	2000092c 	.word	0x2000092c
 8004494:	200008fc 	.word	0x200008fc
 8004498:	200008f8 	.word	0x200008f8
 800449c:	20000960 	.word	0x20000960

080044a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3b04      	subs	r3, #4
 80044b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3b04      	subs	r3, #4
 80044be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f023 0201 	bic.w	r2, r3, #1
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3b04      	subs	r3, #4
 80044ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044d0:	4a0c      	ldr	r2, [pc, #48]	@ (8004504 <pxPortInitialiseStack+0x64>)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3b14      	subs	r3, #20
 80044da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3b04      	subs	r3, #4
 80044e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f06f 0202 	mvn.w	r2, #2
 80044ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3b20      	subs	r3, #32
 80044f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044f6:	68fb      	ldr	r3, [r7, #12]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	08004509 	.word	0x08004509

08004508 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004512:	4b13      	ldr	r3, [pc, #76]	@ (8004560 <prvTaskExitError+0x58>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451a:	d00b      	beq.n	8004534 <prvTaskExitError+0x2c>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	60fb      	str	r3, [r7, #12]
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	e7fd      	b.n	8004530 <prvTaskExitError+0x28>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	60bb      	str	r3, [r7, #8]
}
 8004546:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004548:	bf00      	nop
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0fc      	beq.n	800454a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004550:	bf00      	nop
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	2000000c 	.word	0x2000000c
	...

08004570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004570:	4b07      	ldr	r3, [pc, #28]	@ (8004590 <pxCurrentTCBConst2>)
 8004572:	6819      	ldr	r1, [r3, #0]
 8004574:	6808      	ldr	r0, [r1, #0]
 8004576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800457a:	f380 8809 	msr	PSP, r0
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f04f 0000 	mov.w	r0, #0
 8004586:	f380 8811 	msr	BASEPRI, r0
 800458a:	4770      	bx	lr
 800458c:	f3af 8000 	nop.w

08004590 <pxCurrentTCBConst2>:
 8004590:	20000840 	.word	0x20000840
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop

08004598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004598:	4808      	ldr	r0, [pc, #32]	@ (80045bc <prvPortStartFirstTask+0x24>)
 800459a:	6800      	ldr	r0, [r0, #0]
 800459c:	6800      	ldr	r0, [r0, #0]
 800459e:	f380 8808 	msr	MSP, r0
 80045a2:	f04f 0000 	mov.w	r0, #0
 80045a6:	f380 8814 	msr	CONTROL, r0
 80045aa:	b662      	cpsie	i
 80045ac:	b661      	cpsie	f
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	df00      	svc	0
 80045b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045ba:	bf00      	nop
 80045bc:	e000ed08 	.word	0xe000ed08

080045c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045c6:	4b47      	ldr	r3, [pc, #284]	@ (80046e4 <xPortStartScheduler+0x124>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a47      	ldr	r2, [pc, #284]	@ (80046e8 <xPortStartScheduler+0x128>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d10b      	bne.n	80045e8 <xPortStartScheduler+0x28>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	613b      	str	r3, [r7, #16]
}
 80045e2:	bf00      	nop
 80045e4:	bf00      	nop
 80045e6:	e7fd      	b.n	80045e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045e8:	4b3e      	ldr	r3, [pc, #248]	@ (80046e4 <xPortStartScheduler+0x124>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a3f      	ldr	r2, [pc, #252]	@ (80046ec <xPortStartScheduler+0x12c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10b      	bne.n	800460a <xPortStartScheduler+0x4a>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	60fb      	str	r3, [r7, #12]
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	e7fd      	b.n	8004606 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800460a:	4b39      	ldr	r3, [pc, #228]	@ (80046f0 <xPortStartScheduler+0x130>)
 800460c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	22ff      	movs	r2, #255	@ 0xff
 800461a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800462c:	b2da      	uxtb	r2, r3
 800462e:	4b31      	ldr	r3, [pc, #196]	@ (80046f4 <xPortStartScheduler+0x134>)
 8004630:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004632:	4b31      	ldr	r3, [pc, #196]	@ (80046f8 <xPortStartScheduler+0x138>)
 8004634:	2207      	movs	r2, #7
 8004636:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004638:	e009      	b.n	800464e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800463a:	4b2f      	ldr	r3, [pc, #188]	@ (80046f8 <xPortStartScheduler+0x138>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3b01      	subs	r3, #1
 8004640:	4a2d      	ldr	r2, [pc, #180]	@ (80046f8 <xPortStartScheduler+0x138>)
 8004642:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	b2db      	uxtb	r3, r3
 800464c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004656:	2b80      	cmp	r3, #128	@ 0x80
 8004658:	d0ef      	beq.n	800463a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800465a:	4b27      	ldr	r3, [pc, #156]	@ (80046f8 <xPortStartScheduler+0x138>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f1c3 0307 	rsb	r3, r3, #7
 8004662:	2b04      	cmp	r3, #4
 8004664:	d00b      	beq.n	800467e <xPortStartScheduler+0xbe>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	60bb      	str	r3, [r7, #8]
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	e7fd      	b.n	800467a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800467e:	4b1e      	ldr	r3, [pc, #120]	@ (80046f8 <xPortStartScheduler+0x138>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	4a1c      	ldr	r2, [pc, #112]	@ (80046f8 <xPortStartScheduler+0x138>)
 8004686:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004688:	4b1b      	ldr	r3, [pc, #108]	@ (80046f8 <xPortStartScheduler+0x138>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004690:	4a19      	ldr	r2, [pc, #100]	@ (80046f8 <xPortStartScheduler+0x138>)
 8004692:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	b2da      	uxtb	r2, r3
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800469c:	4b17      	ldr	r3, [pc, #92]	@ (80046fc <xPortStartScheduler+0x13c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a16      	ldr	r2, [pc, #88]	@ (80046fc <xPortStartScheduler+0x13c>)
 80046a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80046a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80046a8:	4b14      	ldr	r3, [pc, #80]	@ (80046fc <xPortStartScheduler+0x13c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a13      	ldr	r2, [pc, #76]	@ (80046fc <xPortStartScheduler+0x13c>)
 80046ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80046b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80046b4:	f000 f8da 	bl	800486c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046b8:	4b11      	ldr	r3, [pc, #68]	@ (8004700 <xPortStartScheduler+0x140>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80046be:	f000 f8f3 	bl	80048a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046c2:	4b10      	ldr	r3, [pc, #64]	@ (8004704 <xPortStartScheduler+0x144>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004704 <xPortStartScheduler+0x144>)
 80046c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80046cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80046ce:	f7ff ff63 	bl	8004598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046d2:	f7ff fd5f 	bl	8004194 <vTaskSwitchContext>
	prvTaskExitError();
 80046d6:	f7ff ff17 	bl	8004508 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	e000ed00 	.word	0xe000ed00
 80046e8:	410fc271 	.word	0x410fc271
 80046ec:	410fc270 	.word	0x410fc270
 80046f0:	e000e400 	.word	0xe000e400
 80046f4:	2000096c 	.word	0x2000096c
 80046f8:	20000970 	.word	0x20000970
 80046fc:	e000ed20 	.word	0xe000ed20
 8004700:	2000000c 	.word	0x2000000c
 8004704:	e000ef34 	.word	0xe000ef34

08004708 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	607b      	str	r3, [r7, #4]
}
 8004720:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004722:	4b10      	ldr	r3, [pc, #64]	@ (8004764 <vPortEnterCritical+0x5c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3301      	adds	r3, #1
 8004728:	4a0e      	ldr	r2, [pc, #56]	@ (8004764 <vPortEnterCritical+0x5c>)
 800472a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800472c:	4b0d      	ldr	r3, [pc, #52]	@ (8004764 <vPortEnterCritical+0x5c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d110      	bne.n	8004756 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004734:	4b0c      	ldr	r3, [pc, #48]	@ (8004768 <vPortEnterCritical+0x60>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <vPortEnterCritical+0x4e>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	603b      	str	r3, [r7, #0]
}
 8004750:	bf00      	nop
 8004752:	bf00      	nop
 8004754:	e7fd      	b.n	8004752 <vPortEnterCritical+0x4a>
	}
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	2000000c 	.word	0x2000000c
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004772:	4b12      	ldr	r3, [pc, #72]	@ (80047bc <vPortExitCritical+0x50>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10b      	bne.n	8004792 <vPortExitCritical+0x26>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	607b      	str	r3, [r7, #4]
}
 800478c:	bf00      	nop
 800478e:	bf00      	nop
 8004790:	e7fd      	b.n	800478e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004792:	4b0a      	ldr	r3, [pc, #40]	@ (80047bc <vPortExitCritical+0x50>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3b01      	subs	r3, #1
 8004798:	4a08      	ldr	r2, [pc, #32]	@ (80047bc <vPortExitCritical+0x50>)
 800479a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800479c:	4b07      	ldr	r3, [pc, #28]	@ (80047bc <vPortExitCritical+0x50>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d105      	bne.n	80047b0 <vPortExitCritical+0x44>
 80047a4:	2300      	movs	r3, #0
 80047a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	2000000c 	.word	0x2000000c

080047c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047c0:	f3ef 8009 	mrs	r0, PSP
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	4b15      	ldr	r3, [pc, #84]	@ (8004820 <pxCurrentTCBConst>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	f01e 0f10 	tst.w	lr, #16
 80047d0:	bf08      	it	eq
 80047d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047da:	6010      	str	r0, [r2, #0]
 80047dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80047e4:	f380 8811 	msr	BASEPRI, r0
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f7ff fcd0 	bl	8004194 <vTaskSwitchContext>
 80047f4:	f04f 0000 	mov.w	r0, #0
 80047f8:	f380 8811 	msr	BASEPRI, r0
 80047fc:	bc09      	pop	{r0, r3}
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	6808      	ldr	r0, [r1, #0]
 8004802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004806:	f01e 0f10 	tst.w	lr, #16
 800480a:	bf08      	it	eq
 800480c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004810:	f380 8809 	msr	PSP, r0
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	f3af 8000 	nop.w

08004820 <pxCurrentTCBConst>:
 8004820:	20000840 	.word	0x20000840
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop

08004828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	607b      	str	r3, [r7, #4]
}
 8004840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004842:	f7ff fbed 	bl	8004020 <xTaskIncrementTick>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800484c:	4b06      	ldr	r3, [pc, #24]	@ (8004868 <SysTick_Handler+0x40>)
 800484e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	2300      	movs	r3, #0
 8004856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	f383 8811 	msr	BASEPRI, r3
}
 800485e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004870:	4b09      	ldr	r3, [pc, #36]	@ (8004898 <vPortSetupTimerInterrupt+0x2c>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004876:	4b09      	ldr	r3, [pc, #36]	@ (800489c <vPortSetupTimerInterrupt+0x30>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800487c:	4b08      	ldr	r3, [pc, #32]	@ (80048a0 <vPortSetupTimerInterrupt+0x34>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a08      	ldr	r2, [pc, #32]	@ (80048a4 <vPortSetupTimerInterrupt+0x38>)
 8004882:	3b01      	subs	r3, #1
 8004884:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004886:	4b04      	ldr	r3, [pc, #16]	@ (8004898 <vPortSetupTimerInterrupt+0x2c>)
 8004888:	2207      	movs	r2, #7
 800488a:	601a      	str	r2, [r3, #0]
}
 800488c:	bf00      	nop
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	e000e010 	.word	0xe000e010
 800489c:	e000e018 	.word	0xe000e018
 80048a0:	20000000 	.word	0x20000000
 80048a4:	e000e014 	.word	0xe000e014

080048a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80048a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80048b8 <vPortEnableVFP+0x10>
 80048ac:	6801      	ldr	r1, [r0, #0]
 80048ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80048b2:	6001      	str	r1, [r0, #0]
 80048b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80048b6:	bf00      	nop
 80048b8:	e000ed88 	.word	0xe000ed88

080048bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	@ 0x28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80048c8:	f7ff fafe 	bl	8003ec8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048cc:	4b5c      	ldr	r3, [pc, #368]	@ (8004a40 <pvPortMalloc+0x184>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048d4:	f000 f924 	bl	8004b20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048d8:	4b5a      	ldr	r3, [pc, #360]	@ (8004a44 <pvPortMalloc+0x188>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4013      	ands	r3, r2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f040 8095 	bne.w	8004a10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01e      	beq.n	800492a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80048ec:	2208      	movs	r2, #8
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4413      	add	r3, r2
 80048f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d015      	beq.n	800492a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f023 0307 	bic.w	r3, r3, #7
 8004904:	3308      	adds	r3, #8
 8004906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <pvPortMalloc+0x6e>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	617b      	str	r3, [r7, #20]
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	e7fd      	b.n	8004926 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d06f      	beq.n	8004a10 <pvPortMalloc+0x154>
 8004930:	4b45      	ldr	r3, [pc, #276]	@ (8004a48 <pvPortMalloc+0x18c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	429a      	cmp	r2, r3
 8004938:	d86a      	bhi.n	8004a10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800493a:	4b44      	ldr	r3, [pc, #272]	@ (8004a4c <pvPortMalloc+0x190>)
 800493c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800493e:	4b43      	ldr	r3, [pc, #268]	@ (8004a4c <pvPortMalloc+0x190>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004944:	e004      	b.n	8004950 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	429a      	cmp	r2, r3
 8004958:	d903      	bls.n	8004962 <pvPortMalloc+0xa6>
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f1      	bne.n	8004946 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004962:	4b37      	ldr	r3, [pc, #220]	@ (8004a40 <pvPortMalloc+0x184>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004968:	429a      	cmp	r2, r3
 800496a:	d051      	beq.n	8004a10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2208      	movs	r2, #8
 8004972:	4413      	add	r3, r2
 8004974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	1ad2      	subs	r2, r2, r3
 8004986:	2308      	movs	r3, #8
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	429a      	cmp	r2, r3
 800498c:	d920      	bls.n	80049d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800498e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4413      	add	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00b      	beq.n	80049b8 <pvPortMalloc+0xfc>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	613b      	str	r3, [r7, #16]
}
 80049b2:	bf00      	nop
 80049b4:	bf00      	nop
 80049b6:	e7fd      	b.n	80049b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	1ad2      	subs	r2, r2, r3
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049ca:	69b8      	ldr	r0, [r7, #24]
 80049cc:	f000 f90a 	bl	8004be4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a48 <pvPortMalloc+0x18c>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	4a1b      	ldr	r2, [pc, #108]	@ (8004a48 <pvPortMalloc+0x18c>)
 80049dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049de:	4b1a      	ldr	r3, [pc, #104]	@ (8004a48 <pvPortMalloc+0x18c>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a50 <pvPortMalloc+0x194>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d203      	bcs.n	80049f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049ea:	4b17      	ldr	r3, [pc, #92]	@ (8004a48 <pvPortMalloc+0x18c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a18      	ldr	r2, [pc, #96]	@ (8004a50 <pvPortMalloc+0x194>)
 80049f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	4b13      	ldr	r3, [pc, #76]	@ (8004a44 <pvPortMalloc+0x188>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004a06:	4b13      	ldr	r3, [pc, #76]	@ (8004a54 <pvPortMalloc+0x198>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	4a11      	ldr	r2, [pc, #68]	@ (8004a54 <pvPortMalloc+0x198>)
 8004a0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a10:	f7ff fa68 	bl	8003ee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <pvPortMalloc+0x17a>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	60fb      	str	r3, [r7, #12]
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	e7fd      	b.n	8004a32 <pvPortMalloc+0x176>
	return pvReturn;
 8004a36:	69fb      	ldr	r3, [r7, #28]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3728      	adds	r7, #40	@ 0x28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	2000457c 	.word	0x2000457c
 8004a44:	20004590 	.word	0x20004590
 8004a48:	20004580 	.word	0x20004580
 8004a4c:	20004574 	.word	0x20004574
 8004a50:	20004584 	.word	0x20004584
 8004a54:	20004588 	.word	0x20004588

08004a58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d04f      	beq.n	8004b0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a6a:	2308      	movs	r3, #8
 8004a6c:	425b      	negs	r3, r3
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4413      	add	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	4b25      	ldr	r3, [pc, #148]	@ (8004b14 <vPortFree+0xbc>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4013      	ands	r3, r2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10b      	bne.n	8004a9e <vPortFree+0x46>
	__asm volatile
 8004a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	60fb      	str	r3, [r7, #12]
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop
 8004a9c:	e7fd      	b.n	8004a9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00b      	beq.n	8004abe <vPortFree+0x66>
	__asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	60bb      	str	r3, [r7, #8]
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	e7fd      	b.n	8004aba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	4b14      	ldr	r3, [pc, #80]	@ (8004b14 <vPortFree+0xbc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01e      	beq.n	8004b0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d11a      	bne.n	8004b0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8004b14 <vPortFree+0xbc>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	43db      	mvns	r3, r3
 8004ade:	401a      	ands	r2, r3
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ae4:	f7ff f9f0 	bl	8003ec8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	4b0a      	ldr	r3, [pc, #40]	@ (8004b18 <vPortFree+0xc0>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4413      	add	r3, r2
 8004af2:	4a09      	ldr	r2, [pc, #36]	@ (8004b18 <vPortFree+0xc0>)
 8004af4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004af6:	6938      	ldr	r0, [r7, #16]
 8004af8:	f000 f874 	bl	8004be4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004afc:	4b07      	ldr	r3, [pc, #28]	@ (8004b1c <vPortFree+0xc4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3301      	adds	r3, #1
 8004b02:	4a06      	ldr	r2, [pc, #24]	@ (8004b1c <vPortFree+0xc4>)
 8004b04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004b06:	f7ff f9ed 	bl	8003ee4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b0a:	bf00      	nop
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20004590 	.word	0x20004590
 8004b18:	20004580 	.word	0x20004580
 8004b1c:	2000458c 	.word	0x2000458c

08004b20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004b2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b2c:	4b27      	ldr	r3, [pc, #156]	@ (8004bcc <prvHeapInit+0xac>)
 8004b2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00c      	beq.n	8004b54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3307      	adds	r3, #7
 8004b3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 0307 	bic.w	r3, r3, #7
 8004b46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bcc <prvHeapInit+0xac>)
 8004b50:	4413      	add	r3, r2
 8004b52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b58:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd0 <prvHeapInit+0xb0>)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8004bd0 <prvHeapInit+0xb0>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	4413      	add	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0307 	bic.w	r3, r3, #7
 8004b7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4a15      	ldr	r2, [pc, #84]	@ (8004bd4 <prvHeapInit+0xb4>)
 8004b80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b82:	4b14      	ldr	r3, [pc, #80]	@ (8004bd4 <prvHeapInit+0xb4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b8a:	4b12      	ldr	r3, [pc, #72]	@ (8004bd4 <prvHeapInit+0xb4>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	1ad2      	subs	r2, r2, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd4 <prvHeapInit+0xb4>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	4a0a      	ldr	r2, [pc, #40]	@ (8004bd8 <prvHeapInit+0xb8>)
 8004bae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	4a09      	ldr	r2, [pc, #36]	@ (8004bdc <prvHeapInit+0xbc>)
 8004bb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bb8:	4b09      	ldr	r3, [pc, #36]	@ (8004be0 <prvHeapInit+0xc0>)
 8004bba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004bbe:	601a      	str	r2, [r3, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	20000974 	.word	0x20000974
 8004bd0:	20004574 	.word	0x20004574
 8004bd4:	2000457c 	.word	0x2000457c
 8004bd8:	20004584 	.word	0x20004584
 8004bdc:	20004580 	.word	0x20004580
 8004be0:	20004590 	.word	0x20004590

08004be4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bec:	4b28      	ldr	r3, [pc, #160]	@ (8004c90 <prvInsertBlockIntoFreeList+0xac>)
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e002      	b.n	8004bf8 <prvInsertBlockIntoFreeList+0x14>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d8f7      	bhi.n	8004bf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d108      	bne.n	8004c26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	441a      	add	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	441a      	add	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d118      	bne.n	8004c6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4b15      	ldr	r3, [pc, #84]	@ (8004c94 <prvInsertBlockIntoFreeList+0xb0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d00d      	beq.n	8004c62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	441a      	add	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	e008      	b.n	8004c74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c62:	4b0c      	ldr	r3, [pc, #48]	@ (8004c94 <prvInsertBlockIntoFreeList+0xb0>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	e003      	b.n	8004c74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d002      	beq.n	8004c82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c82:	bf00      	nop
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	20004574 	.word	0x20004574
 8004c94:	2000457c 	.word	0x2000457c

08004c98 <__sflush_r>:
 8004c98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca0:	0716      	lsls	r6, r2, #28
 8004ca2:	4605      	mov	r5, r0
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	d454      	bmi.n	8004d52 <__sflush_r+0xba>
 8004ca8:	684b      	ldr	r3, [r1, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	dc02      	bgt.n	8004cb4 <__sflush_r+0x1c>
 8004cae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	dd48      	ble.n	8004d46 <__sflush_r+0xae>
 8004cb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004cb6:	2e00      	cmp	r6, #0
 8004cb8:	d045      	beq.n	8004d46 <__sflush_r+0xae>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004cc0:	682f      	ldr	r7, [r5, #0]
 8004cc2:	6a21      	ldr	r1, [r4, #32]
 8004cc4:	602b      	str	r3, [r5, #0]
 8004cc6:	d030      	beq.n	8004d2a <__sflush_r+0x92>
 8004cc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	0759      	lsls	r1, r3, #29
 8004cce:	d505      	bpl.n	8004cdc <__sflush_r+0x44>
 8004cd0:	6863      	ldr	r3, [r4, #4]
 8004cd2:	1ad2      	subs	r2, r2, r3
 8004cd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004cd6:	b10b      	cbz	r3, 8004cdc <__sflush_r+0x44>
 8004cd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cda:	1ad2      	subs	r2, r2, r3
 8004cdc:	2300      	movs	r3, #0
 8004cde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ce0:	6a21      	ldr	r1, [r4, #32]
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	47b0      	blx	r6
 8004ce6:	1c43      	adds	r3, r0, #1
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	d106      	bne.n	8004cfa <__sflush_r+0x62>
 8004cec:	6829      	ldr	r1, [r5, #0]
 8004cee:	291d      	cmp	r1, #29
 8004cf0:	d82b      	bhi.n	8004d4a <__sflush_r+0xb2>
 8004cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8004d9c <__sflush_r+0x104>)
 8004cf4:	410a      	asrs	r2, r1
 8004cf6:	07d6      	lsls	r6, r2, #31
 8004cf8:	d427      	bmi.n	8004d4a <__sflush_r+0xb2>
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	6062      	str	r2, [r4, #4]
 8004cfe:	04d9      	lsls	r1, r3, #19
 8004d00:	6922      	ldr	r2, [r4, #16]
 8004d02:	6022      	str	r2, [r4, #0]
 8004d04:	d504      	bpl.n	8004d10 <__sflush_r+0x78>
 8004d06:	1c42      	adds	r2, r0, #1
 8004d08:	d101      	bne.n	8004d0e <__sflush_r+0x76>
 8004d0a:	682b      	ldr	r3, [r5, #0]
 8004d0c:	b903      	cbnz	r3, 8004d10 <__sflush_r+0x78>
 8004d0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004d10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d12:	602f      	str	r7, [r5, #0]
 8004d14:	b1b9      	cbz	r1, 8004d46 <__sflush_r+0xae>
 8004d16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d1a:	4299      	cmp	r1, r3
 8004d1c:	d002      	beq.n	8004d24 <__sflush_r+0x8c>
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 fa64 	bl	80051ec <_free_r>
 8004d24:	2300      	movs	r3, #0
 8004d26:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d28:	e00d      	b.n	8004d46 <__sflush_r+0xae>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	47b0      	blx	r6
 8004d30:	4602      	mov	r2, r0
 8004d32:	1c50      	adds	r0, r2, #1
 8004d34:	d1c9      	bne.n	8004cca <__sflush_r+0x32>
 8004d36:	682b      	ldr	r3, [r5, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0c6      	beq.n	8004cca <__sflush_r+0x32>
 8004d3c:	2b1d      	cmp	r3, #29
 8004d3e:	d001      	beq.n	8004d44 <__sflush_r+0xac>
 8004d40:	2b16      	cmp	r3, #22
 8004d42:	d11e      	bne.n	8004d82 <__sflush_r+0xea>
 8004d44:	602f      	str	r7, [r5, #0]
 8004d46:	2000      	movs	r0, #0
 8004d48:	e022      	b.n	8004d90 <__sflush_r+0xf8>
 8004d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d4e:	b21b      	sxth	r3, r3
 8004d50:	e01b      	b.n	8004d8a <__sflush_r+0xf2>
 8004d52:	690f      	ldr	r7, [r1, #16]
 8004d54:	2f00      	cmp	r7, #0
 8004d56:	d0f6      	beq.n	8004d46 <__sflush_r+0xae>
 8004d58:	0793      	lsls	r3, r2, #30
 8004d5a:	680e      	ldr	r6, [r1, #0]
 8004d5c:	bf08      	it	eq
 8004d5e:	694b      	ldreq	r3, [r1, #20]
 8004d60:	600f      	str	r7, [r1, #0]
 8004d62:	bf18      	it	ne
 8004d64:	2300      	movne	r3, #0
 8004d66:	eba6 0807 	sub.w	r8, r6, r7
 8004d6a:	608b      	str	r3, [r1, #8]
 8004d6c:	f1b8 0f00 	cmp.w	r8, #0
 8004d70:	dde9      	ble.n	8004d46 <__sflush_r+0xae>
 8004d72:	6a21      	ldr	r1, [r4, #32]
 8004d74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004d76:	4643      	mov	r3, r8
 8004d78:	463a      	mov	r2, r7
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	47b0      	blx	r6
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	dc08      	bgt.n	8004d94 <__sflush_r+0xfc>
 8004d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d8a:	81a3      	strh	r3, [r4, #12]
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d94:	4407      	add	r7, r0
 8004d96:	eba8 0800 	sub.w	r8, r8, r0
 8004d9a:	e7e7      	b.n	8004d6c <__sflush_r+0xd4>
 8004d9c:	dfbffffe 	.word	0xdfbffffe

08004da0 <_fflush_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	690b      	ldr	r3, [r1, #16]
 8004da4:	4605      	mov	r5, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	b913      	cbnz	r3, 8004db0 <_fflush_r+0x10>
 8004daa:	2500      	movs	r5, #0
 8004dac:	4628      	mov	r0, r5
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	b118      	cbz	r0, 8004dba <_fflush_r+0x1a>
 8004db2:	6a03      	ldr	r3, [r0, #32]
 8004db4:	b90b      	cbnz	r3, 8004dba <_fflush_r+0x1a>
 8004db6:	f000 f8bb 	bl	8004f30 <__sinit>
 8004dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f3      	beq.n	8004daa <_fflush_r+0xa>
 8004dc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004dc4:	07d0      	lsls	r0, r2, #31
 8004dc6:	d404      	bmi.n	8004dd2 <_fflush_r+0x32>
 8004dc8:	0599      	lsls	r1, r3, #22
 8004dca:	d402      	bmi.n	8004dd2 <_fflush_r+0x32>
 8004dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dce:	f000 fa0a 	bl	80051e6 <__retarget_lock_acquire_recursive>
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	f7ff ff5f 	bl	8004c98 <__sflush_r>
 8004dda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ddc:	07da      	lsls	r2, r3, #31
 8004dde:	4605      	mov	r5, r0
 8004de0:	d4e4      	bmi.n	8004dac <_fflush_r+0xc>
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	059b      	lsls	r3, r3, #22
 8004de6:	d4e1      	bmi.n	8004dac <_fflush_r+0xc>
 8004de8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dea:	f000 f9fd 	bl	80051e8 <__retarget_lock_release_recursive>
 8004dee:	e7dd      	b.n	8004dac <_fflush_r+0xc>

08004df0 <fflush>:
 8004df0:	4601      	mov	r1, r0
 8004df2:	b920      	cbnz	r0, 8004dfe <fflush+0xe>
 8004df4:	4a04      	ldr	r2, [pc, #16]	@ (8004e08 <fflush+0x18>)
 8004df6:	4905      	ldr	r1, [pc, #20]	@ (8004e0c <fflush+0x1c>)
 8004df8:	4805      	ldr	r0, [pc, #20]	@ (8004e10 <fflush+0x20>)
 8004dfa:	f000 b8b1 	b.w	8004f60 <_fwalk_sglue>
 8004dfe:	4b05      	ldr	r3, [pc, #20]	@ (8004e14 <fflush+0x24>)
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	f7ff bfcd 	b.w	8004da0 <_fflush_r>
 8004e06:	bf00      	nop
 8004e08:	20000010 	.word	0x20000010
 8004e0c:	08004da1 	.word	0x08004da1
 8004e10:	20000020 	.word	0x20000020
 8004e14:	2000001c 	.word	0x2000001c

08004e18 <std>:
 8004e18:	2300      	movs	r3, #0
 8004e1a:	b510      	push	{r4, lr}
 8004e1c:	4604      	mov	r4, r0
 8004e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e26:	6083      	str	r3, [r0, #8]
 8004e28:	8181      	strh	r1, [r0, #12]
 8004e2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e2c:	81c2      	strh	r2, [r0, #14]
 8004e2e:	6183      	str	r3, [r0, #24]
 8004e30:	4619      	mov	r1, r3
 8004e32:	2208      	movs	r2, #8
 8004e34:	305c      	adds	r0, #92	@ 0x5c
 8004e36:	f000 f906 	bl	8005046 <memset>
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e70 <std+0x58>)
 8004e3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e74 <std+0x5c>)
 8004e40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e42:	4b0d      	ldr	r3, [pc, #52]	@ (8004e78 <std+0x60>)
 8004e44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e46:	4b0d      	ldr	r3, [pc, #52]	@ (8004e7c <std+0x64>)
 8004e48:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e80 <std+0x68>)
 8004e4c:	6224      	str	r4, [r4, #32]
 8004e4e:	429c      	cmp	r4, r3
 8004e50:	d006      	beq.n	8004e60 <std+0x48>
 8004e52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e56:	4294      	cmp	r4, r2
 8004e58:	d002      	beq.n	8004e60 <std+0x48>
 8004e5a:	33d0      	adds	r3, #208	@ 0xd0
 8004e5c:	429c      	cmp	r4, r3
 8004e5e:	d105      	bne.n	8004e6c <std+0x54>
 8004e60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e68:	f000 b9bc 	b.w	80051e4 <__retarget_lock_init_recursive>
 8004e6c:	bd10      	pop	{r4, pc}
 8004e6e:	bf00      	nop
 8004e70:	08004fc1 	.word	0x08004fc1
 8004e74:	08004fe3 	.word	0x08004fe3
 8004e78:	0800501b 	.word	0x0800501b
 8004e7c:	0800503f 	.word	0x0800503f
 8004e80:	20004594 	.word	0x20004594

08004e84 <stdio_exit_handler>:
 8004e84:	4a02      	ldr	r2, [pc, #8]	@ (8004e90 <stdio_exit_handler+0xc>)
 8004e86:	4903      	ldr	r1, [pc, #12]	@ (8004e94 <stdio_exit_handler+0x10>)
 8004e88:	4803      	ldr	r0, [pc, #12]	@ (8004e98 <stdio_exit_handler+0x14>)
 8004e8a:	f000 b869 	b.w	8004f60 <_fwalk_sglue>
 8004e8e:	bf00      	nop
 8004e90:	20000010 	.word	0x20000010
 8004e94:	08004da1 	.word	0x08004da1
 8004e98:	20000020 	.word	0x20000020

08004e9c <cleanup_stdio>:
 8004e9c:	6841      	ldr	r1, [r0, #4]
 8004e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed0 <cleanup_stdio+0x34>)
 8004ea0:	4299      	cmp	r1, r3
 8004ea2:	b510      	push	{r4, lr}
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	d001      	beq.n	8004eac <cleanup_stdio+0x10>
 8004ea8:	f7ff ff7a 	bl	8004da0 <_fflush_r>
 8004eac:	68a1      	ldr	r1, [r4, #8]
 8004eae:	4b09      	ldr	r3, [pc, #36]	@ (8004ed4 <cleanup_stdio+0x38>)
 8004eb0:	4299      	cmp	r1, r3
 8004eb2:	d002      	beq.n	8004eba <cleanup_stdio+0x1e>
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f7ff ff73 	bl	8004da0 <_fflush_r>
 8004eba:	68e1      	ldr	r1, [r4, #12]
 8004ebc:	4b06      	ldr	r3, [pc, #24]	@ (8004ed8 <cleanup_stdio+0x3c>)
 8004ebe:	4299      	cmp	r1, r3
 8004ec0:	d004      	beq.n	8004ecc <cleanup_stdio+0x30>
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec8:	f7ff bf6a 	b.w	8004da0 <_fflush_r>
 8004ecc:	bd10      	pop	{r4, pc}
 8004ece:	bf00      	nop
 8004ed0:	20004594 	.word	0x20004594
 8004ed4:	200045fc 	.word	0x200045fc
 8004ed8:	20004664 	.word	0x20004664

08004edc <global_stdio_init.part.0>:
 8004edc:	b510      	push	{r4, lr}
 8004ede:	4b0b      	ldr	r3, [pc, #44]	@ (8004f0c <global_stdio_init.part.0+0x30>)
 8004ee0:	4c0b      	ldr	r4, [pc, #44]	@ (8004f10 <global_stdio_init.part.0+0x34>)
 8004ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8004f14 <global_stdio_init.part.0+0x38>)
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2104      	movs	r1, #4
 8004eec:	f7ff ff94 	bl	8004e18 <std>
 8004ef0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	2109      	movs	r1, #9
 8004ef8:	f7ff ff8e 	bl	8004e18 <std>
 8004efc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f00:	2202      	movs	r2, #2
 8004f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f06:	2112      	movs	r1, #18
 8004f08:	f7ff bf86 	b.w	8004e18 <std>
 8004f0c:	200046cc 	.word	0x200046cc
 8004f10:	20004594 	.word	0x20004594
 8004f14:	08004e85 	.word	0x08004e85

08004f18 <__sfp_lock_acquire>:
 8004f18:	4801      	ldr	r0, [pc, #4]	@ (8004f20 <__sfp_lock_acquire+0x8>)
 8004f1a:	f000 b964 	b.w	80051e6 <__retarget_lock_acquire_recursive>
 8004f1e:	bf00      	nop
 8004f20:	200046d5 	.word	0x200046d5

08004f24 <__sfp_lock_release>:
 8004f24:	4801      	ldr	r0, [pc, #4]	@ (8004f2c <__sfp_lock_release+0x8>)
 8004f26:	f000 b95f 	b.w	80051e8 <__retarget_lock_release_recursive>
 8004f2a:	bf00      	nop
 8004f2c:	200046d5 	.word	0x200046d5

08004f30 <__sinit>:
 8004f30:	b510      	push	{r4, lr}
 8004f32:	4604      	mov	r4, r0
 8004f34:	f7ff fff0 	bl	8004f18 <__sfp_lock_acquire>
 8004f38:	6a23      	ldr	r3, [r4, #32]
 8004f3a:	b11b      	cbz	r3, 8004f44 <__sinit+0x14>
 8004f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f40:	f7ff bff0 	b.w	8004f24 <__sfp_lock_release>
 8004f44:	4b04      	ldr	r3, [pc, #16]	@ (8004f58 <__sinit+0x28>)
 8004f46:	6223      	str	r3, [r4, #32]
 8004f48:	4b04      	ldr	r3, [pc, #16]	@ (8004f5c <__sinit+0x2c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f5      	bne.n	8004f3c <__sinit+0xc>
 8004f50:	f7ff ffc4 	bl	8004edc <global_stdio_init.part.0>
 8004f54:	e7f2      	b.n	8004f3c <__sinit+0xc>
 8004f56:	bf00      	nop
 8004f58:	08004e9d 	.word	0x08004e9d
 8004f5c:	200046cc 	.word	0x200046cc

08004f60 <_fwalk_sglue>:
 8004f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f64:	4607      	mov	r7, r0
 8004f66:	4688      	mov	r8, r1
 8004f68:	4614      	mov	r4, r2
 8004f6a:	2600      	movs	r6, #0
 8004f6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f70:	f1b9 0901 	subs.w	r9, r9, #1
 8004f74:	d505      	bpl.n	8004f82 <_fwalk_sglue+0x22>
 8004f76:	6824      	ldr	r4, [r4, #0]
 8004f78:	2c00      	cmp	r4, #0
 8004f7a:	d1f7      	bne.n	8004f6c <_fwalk_sglue+0xc>
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f82:	89ab      	ldrh	r3, [r5, #12]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d907      	bls.n	8004f98 <_fwalk_sglue+0x38>
 8004f88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	d003      	beq.n	8004f98 <_fwalk_sglue+0x38>
 8004f90:	4629      	mov	r1, r5
 8004f92:	4638      	mov	r0, r7
 8004f94:	47c0      	blx	r8
 8004f96:	4306      	orrs	r6, r0
 8004f98:	3568      	adds	r5, #104	@ 0x68
 8004f9a:	e7e9      	b.n	8004f70 <_fwalk_sglue+0x10>

08004f9c <iprintf>:
 8004f9c:	b40f      	push	{r0, r1, r2, r3}
 8004f9e:	b507      	push	{r0, r1, r2, lr}
 8004fa0:	4906      	ldr	r1, [pc, #24]	@ (8004fbc <iprintf+0x20>)
 8004fa2:	ab04      	add	r3, sp, #16
 8004fa4:	6808      	ldr	r0, [r1, #0]
 8004fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004faa:	6881      	ldr	r1, [r0, #8]
 8004fac:	9301      	str	r3, [sp, #4]
 8004fae:	f000 fa3f 	bl	8005430 <_vfiprintf_r>
 8004fb2:	b003      	add	sp, #12
 8004fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fb8:	b004      	add	sp, #16
 8004fba:	4770      	bx	lr
 8004fbc:	2000001c 	.word	0x2000001c

08004fc0 <__sread>:
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc8:	f000 f8be 	bl	8005148 <_read_r>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	bfab      	itete	ge
 8004fd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8004fd4:	181b      	addge	r3, r3, r0
 8004fd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004fda:	bfac      	ite	ge
 8004fdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004fde:	81a3      	strhlt	r3, [r4, #12]
 8004fe0:	bd10      	pop	{r4, pc}

08004fe2 <__swrite>:
 8004fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe6:	461f      	mov	r7, r3
 8004fe8:	898b      	ldrh	r3, [r1, #12]
 8004fea:	05db      	lsls	r3, r3, #23
 8004fec:	4605      	mov	r5, r0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	4616      	mov	r6, r2
 8004ff2:	d505      	bpl.n	8005000 <__swrite+0x1e>
 8004ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f000 f892 	bl	8005124 <_lseek_r>
 8005000:	89a3      	ldrh	r3, [r4, #12]
 8005002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005006:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800500a:	81a3      	strh	r3, [r4, #12]
 800500c:	4632      	mov	r2, r6
 800500e:	463b      	mov	r3, r7
 8005010:	4628      	mov	r0, r5
 8005012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005016:	f000 b8a9 	b.w	800516c <_write_r>

0800501a <__sseek>:
 800501a:	b510      	push	{r4, lr}
 800501c:	460c      	mov	r4, r1
 800501e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005022:	f000 f87f 	bl	8005124 <_lseek_r>
 8005026:	1c43      	adds	r3, r0, #1
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	bf15      	itete	ne
 800502c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800502e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005032:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005036:	81a3      	strheq	r3, [r4, #12]
 8005038:	bf18      	it	ne
 800503a:	81a3      	strhne	r3, [r4, #12]
 800503c:	bd10      	pop	{r4, pc}

0800503e <__sclose>:
 800503e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005042:	f000 b809 	b.w	8005058 <_close_r>

08005046 <memset>:
 8005046:	4402      	add	r2, r0
 8005048:	4603      	mov	r3, r0
 800504a:	4293      	cmp	r3, r2
 800504c:	d100      	bne.n	8005050 <memset+0xa>
 800504e:	4770      	bx	lr
 8005050:	f803 1b01 	strb.w	r1, [r3], #1
 8005054:	e7f9      	b.n	800504a <memset+0x4>
	...

08005058 <_close_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4d06      	ldr	r5, [pc, #24]	@ (8005074 <_close_r+0x1c>)
 800505c:	2300      	movs	r3, #0
 800505e:	4604      	mov	r4, r0
 8005060:	4608      	mov	r0, r1
 8005062:	602b      	str	r3, [r5, #0]
 8005064:	f000 fe84 	bl	8005d70 <_close>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d102      	bne.n	8005072 <_close_r+0x1a>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	b103      	cbz	r3, 8005072 <_close_r+0x1a>
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	200046d0 	.word	0x200046d0

08005078 <_reclaim_reent>:
 8005078:	4b29      	ldr	r3, [pc, #164]	@ (8005120 <_reclaim_reent+0xa8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4283      	cmp	r3, r0
 800507e:	b570      	push	{r4, r5, r6, lr}
 8005080:	4604      	mov	r4, r0
 8005082:	d04b      	beq.n	800511c <_reclaim_reent+0xa4>
 8005084:	69c3      	ldr	r3, [r0, #28]
 8005086:	b1ab      	cbz	r3, 80050b4 <_reclaim_reent+0x3c>
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	b16b      	cbz	r3, 80050a8 <_reclaim_reent+0x30>
 800508c:	2500      	movs	r5, #0
 800508e:	69e3      	ldr	r3, [r4, #28]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	5959      	ldr	r1, [r3, r5]
 8005094:	2900      	cmp	r1, #0
 8005096:	d13b      	bne.n	8005110 <_reclaim_reent+0x98>
 8005098:	3504      	adds	r5, #4
 800509a:	2d80      	cmp	r5, #128	@ 0x80
 800509c:	d1f7      	bne.n	800508e <_reclaim_reent+0x16>
 800509e:	69e3      	ldr	r3, [r4, #28]
 80050a0:	4620      	mov	r0, r4
 80050a2:	68d9      	ldr	r1, [r3, #12]
 80050a4:	f000 f8a2 	bl	80051ec <_free_r>
 80050a8:	69e3      	ldr	r3, [r4, #28]
 80050aa:	6819      	ldr	r1, [r3, #0]
 80050ac:	b111      	cbz	r1, 80050b4 <_reclaim_reent+0x3c>
 80050ae:	4620      	mov	r0, r4
 80050b0:	f000 f89c 	bl	80051ec <_free_r>
 80050b4:	6961      	ldr	r1, [r4, #20]
 80050b6:	b111      	cbz	r1, 80050be <_reclaim_reent+0x46>
 80050b8:	4620      	mov	r0, r4
 80050ba:	f000 f897 	bl	80051ec <_free_r>
 80050be:	69e1      	ldr	r1, [r4, #28]
 80050c0:	b111      	cbz	r1, 80050c8 <_reclaim_reent+0x50>
 80050c2:	4620      	mov	r0, r4
 80050c4:	f000 f892 	bl	80051ec <_free_r>
 80050c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80050ca:	b111      	cbz	r1, 80050d2 <_reclaim_reent+0x5a>
 80050cc:	4620      	mov	r0, r4
 80050ce:	f000 f88d 	bl	80051ec <_free_r>
 80050d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050d4:	b111      	cbz	r1, 80050dc <_reclaim_reent+0x64>
 80050d6:	4620      	mov	r0, r4
 80050d8:	f000 f888 	bl	80051ec <_free_r>
 80050dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80050de:	b111      	cbz	r1, 80050e6 <_reclaim_reent+0x6e>
 80050e0:	4620      	mov	r0, r4
 80050e2:	f000 f883 	bl	80051ec <_free_r>
 80050e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80050e8:	b111      	cbz	r1, 80050f0 <_reclaim_reent+0x78>
 80050ea:	4620      	mov	r0, r4
 80050ec:	f000 f87e 	bl	80051ec <_free_r>
 80050f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80050f2:	b111      	cbz	r1, 80050fa <_reclaim_reent+0x82>
 80050f4:	4620      	mov	r0, r4
 80050f6:	f000 f879 	bl	80051ec <_free_r>
 80050fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80050fc:	b111      	cbz	r1, 8005104 <_reclaim_reent+0x8c>
 80050fe:	4620      	mov	r0, r4
 8005100:	f000 f874 	bl	80051ec <_free_r>
 8005104:	6a23      	ldr	r3, [r4, #32]
 8005106:	b14b      	cbz	r3, 800511c <_reclaim_reent+0xa4>
 8005108:	4620      	mov	r0, r4
 800510a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800510e:	4718      	bx	r3
 8005110:	680e      	ldr	r6, [r1, #0]
 8005112:	4620      	mov	r0, r4
 8005114:	f000 f86a 	bl	80051ec <_free_r>
 8005118:	4631      	mov	r1, r6
 800511a:	e7bb      	b.n	8005094 <_reclaim_reent+0x1c>
 800511c:	bd70      	pop	{r4, r5, r6, pc}
 800511e:	bf00      	nop
 8005120:	2000001c 	.word	0x2000001c

08005124 <_lseek_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4d07      	ldr	r5, [pc, #28]	@ (8005144 <_lseek_r+0x20>)
 8005128:	4604      	mov	r4, r0
 800512a:	4608      	mov	r0, r1
 800512c:	4611      	mov	r1, r2
 800512e:	2200      	movs	r2, #0
 8005130:	602a      	str	r2, [r5, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	f000 fddd 	bl	8005cf2 <_lseek>
 8005138:	1c43      	adds	r3, r0, #1
 800513a:	d102      	bne.n	8005142 <_lseek_r+0x1e>
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	b103      	cbz	r3, 8005142 <_lseek_r+0x1e>
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	bd38      	pop	{r3, r4, r5, pc}
 8005144:	200046d0 	.word	0x200046d0

08005148 <_read_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4d07      	ldr	r5, [pc, #28]	@ (8005168 <_read_r+0x20>)
 800514c:	4604      	mov	r4, r0
 800514e:	4608      	mov	r0, r1
 8005150:	4611      	mov	r1, r2
 8005152:	2200      	movs	r2, #0
 8005154:	602a      	str	r2, [r5, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	f000 fd75 	bl	8005c46 <_read>
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	d102      	bne.n	8005166 <_read_r+0x1e>
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	b103      	cbz	r3, 8005166 <_read_r+0x1e>
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	bd38      	pop	{r3, r4, r5, pc}
 8005168:	200046d0 	.word	0x200046d0

0800516c <_write_r>:
 800516c:	b538      	push	{r3, r4, r5, lr}
 800516e:	4d07      	ldr	r5, [pc, #28]	@ (800518c <_write_r+0x20>)
 8005170:	4604      	mov	r4, r0
 8005172:	4608      	mov	r0, r1
 8005174:	4611      	mov	r1, r2
 8005176:	2200      	movs	r2, #0
 8005178:	602a      	str	r2, [r5, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	f000 fdcb 	bl	8005d16 <_write>
 8005180:	1c43      	adds	r3, r0, #1
 8005182:	d102      	bne.n	800518a <_write_r+0x1e>
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	b103      	cbz	r3, 800518a <_write_r+0x1e>
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	bd38      	pop	{r3, r4, r5, pc}
 800518c:	200046d0 	.word	0x200046d0

08005190 <__errno>:
 8005190:	4b01      	ldr	r3, [pc, #4]	@ (8005198 <__errno+0x8>)
 8005192:	6818      	ldr	r0, [r3, #0]
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	2000001c 	.word	0x2000001c

0800519c <__libc_init_array>:
 800519c:	b570      	push	{r4, r5, r6, lr}
 800519e:	4d0d      	ldr	r5, [pc, #52]	@ (80051d4 <__libc_init_array+0x38>)
 80051a0:	4c0d      	ldr	r4, [pc, #52]	@ (80051d8 <__libc_init_array+0x3c>)
 80051a2:	1b64      	subs	r4, r4, r5
 80051a4:	10a4      	asrs	r4, r4, #2
 80051a6:	2600      	movs	r6, #0
 80051a8:	42a6      	cmp	r6, r4
 80051aa:	d109      	bne.n	80051c0 <__libc_init_array+0x24>
 80051ac:	4d0b      	ldr	r5, [pc, #44]	@ (80051dc <__libc_init_array+0x40>)
 80051ae:	4c0c      	ldr	r4, [pc, #48]	@ (80051e0 <__libc_init_array+0x44>)
 80051b0:	f000 ffa2 	bl	80060f8 <_init>
 80051b4:	1b64      	subs	r4, r4, r5
 80051b6:	10a4      	asrs	r4, r4, #2
 80051b8:	2600      	movs	r6, #0
 80051ba:	42a6      	cmp	r6, r4
 80051bc:	d105      	bne.n	80051ca <__libc_init_array+0x2e>
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c4:	4798      	blx	r3
 80051c6:	3601      	adds	r6, #1
 80051c8:	e7ee      	b.n	80051a8 <__libc_init_array+0xc>
 80051ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ce:	4798      	blx	r3
 80051d0:	3601      	adds	r6, #1
 80051d2:	e7f2      	b.n	80051ba <__libc_init_array+0x1e>
 80051d4:	08006248 	.word	0x08006248
 80051d8:	08006248 	.word	0x08006248
 80051dc:	08006248 	.word	0x08006248
 80051e0:	0800624c 	.word	0x0800624c

080051e4 <__retarget_lock_init_recursive>:
 80051e4:	4770      	bx	lr

080051e6 <__retarget_lock_acquire_recursive>:
 80051e6:	4770      	bx	lr

080051e8 <__retarget_lock_release_recursive>:
 80051e8:	4770      	bx	lr
	...

080051ec <_free_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4605      	mov	r5, r0
 80051f0:	2900      	cmp	r1, #0
 80051f2:	d041      	beq.n	8005278 <_free_r+0x8c>
 80051f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051f8:	1f0c      	subs	r4, r1, #4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	bfb8      	it	lt
 80051fe:	18e4      	addlt	r4, r4, r3
 8005200:	f000 f8e0 	bl	80053c4 <__malloc_lock>
 8005204:	4a1d      	ldr	r2, [pc, #116]	@ (800527c <_free_r+0x90>)
 8005206:	6813      	ldr	r3, [r2, #0]
 8005208:	b933      	cbnz	r3, 8005218 <_free_r+0x2c>
 800520a:	6063      	str	r3, [r4, #4]
 800520c:	6014      	str	r4, [r2, #0]
 800520e:	4628      	mov	r0, r5
 8005210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005214:	f000 b8dc 	b.w	80053d0 <__malloc_unlock>
 8005218:	42a3      	cmp	r3, r4
 800521a:	d908      	bls.n	800522e <_free_r+0x42>
 800521c:	6820      	ldr	r0, [r4, #0]
 800521e:	1821      	adds	r1, r4, r0
 8005220:	428b      	cmp	r3, r1
 8005222:	bf01      	itttt	eq
 8005224:	6819      	ldreq	r1, [r3, #0]
 8005226:	685b      	ldreq	r3, [r3, #4]
 8005228:	1809      	addeq	r1, r1, r0
 800522a:	6021      	streq	r1, [r4, #0]
 800522c:	e7ed      	b.n	800520a <_free_r+0x1e>
 800522e:	461a      	mov	r2, r3
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	b10b      	cbz	r3, 8005238 <_free_r+0x4c>
 8005234:	42a3      	cmp	r3, r4
 8005236:	d9fa      	bls.n	800522e <_free_r+0x42>
 8005238:	6811      	ldr	r1, [r2, #0]
 800523a:	1850      	adds	r0, r2, r1
 800523c:	42a0      	cmp	r0, r4
 800523e:	d10b      	bne.n	8005258 <_free_r+0x6c>
 8005240:	6820      	ldr	r0, [r4, #0]
 8005242:	4401      	add	r1, r0
 8005244:	1850      	adds	r0, r2, r1
 8005246:	4283      	cmp	r3, r0
 8005248:	6011      	str	r1, [r2, #0]
 800524a:	d1e0      	bne.n	800520e <_free_r+0x22>
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	6053      	str	r3, [r2, #4]
 8005252:	4408      	add	r0, r1
 8005254:	6010      	str	r0, [r2, #0]
 8005256:	e7da      	b.n	800520e <_free_r+0x22>
 8005258:	d902      	bls.n	8005260 <_free_r+0x74>
 800525a:	230c      	movs	r3, #12
 800525c:	602b      	str	r3, [r5, #0]
 800525e:	e7d6      	b.n	800520e <_free_r+0x22>
 8005260:	6820      	ldr	r0, [r4, #0]
 8005262:	1821      	adds	r1, r4, r0
 8005264:	428b      	cmp	r3, r1
 8005266:	bf04      	itt	eq
 8005268:	6819      	ldreq	r1, [r3, #0]
 800526a:	685b      	ldreq	r3, [r3, #4]
 800526c:	6063      	str	r3, [r4, #4]
 800526e:	bf04      	itt	eq
 8005270:	1809      	addeq	r1, r1, r0
 8005272:	6021      	streq	r1, [r4, #0]
 8005274:	6054      	str	r4, [r2, #4]
 8005276:	e7ca      	b.n	800520e <_free_r+0x22>
 8005278:	bd38      	pop	{r3, r4, r5, pc}
 800527a:	bf00      	nop
 800527c:	200046dc 	.word	0x200046dc

08005280 <sbrk_aligned>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	4e0f      	ldr	r6, [pc, #60]	@ (80052c0 <sbrk_aligned+0x40>)
 8005284:	460c      	mov	r4, r1
 8005286:	6831      	ldr	r1, [r6, #0]
 8005288:	4605      	mov	r5, r0
 800528a:	b911      	cbnz	r1, 8005292 <sbrk_aligned+0x12>
 800528c:	f000 fc0a 	bl	8005aa4 <_sbrk_r>
 8005290:	6030      	str	r0, [r6, #0]
 8005292:	4621      	mov	r1, r4
 8005294:	4628      	mov	r0, r5
 8005296:	f000 fc05 	bl	8005aa4 <_sbrk_r>
 800529a:	1c43      	adds	r3, r0, #1
 800529c:	d103      	bne.n	80052a6 <sbrk_aligned+0x26>
 800529e:	f04f 34ff 	mov.w	r4, #4294967295
 80052a2:	4620      	mov	r0, r4
 80052a4:	bd70      	pop	{r4, r5, r6, pc}
 80052a6:	1cc4      	adds	r4, r0, #3
 80052a8:	f024 0403 	bic.w	r4, r4, #3
 80052ac:	42a0      	cmp	r0, r4
 80052ae:	d0f8      	beq.n	80052a2 <sbrk_aligned+0x22>
 80052b0:	1a21      	subs	r1, r4, r0
 80052b2:	4628      	mov	r0, r5
 80052b4:	f000 fbf6 	bl	8005aa4 <_sbrk_r>
 80052b8:	3001      	adds	r0, #1
 80052ba:	d1f2      	bne.n	80052a2 <sbrk_aligned+0x22>
 80052bc:	e7ef      	b.n	800529e <sbrk_aligned+0x1e>
 80052be:	bf00      	nop
 80052c0:	200046d8 	.word	0x200046d8

080052c4 <_malloc_r>:
 80052c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052c8:	1ccd      	adds	r5, r1, #3
 80052ca:	f025 0503 	bic.w	r5, r5, #3
 80052ce:	3508      	adds	r5, #8
 80052d0:	2d0c      	cmp	r5, #12
 80052d2:	bf38      	it	cc
 80052d4:	250c      	movcc	r5, #12
 80052d6:	2d00      	cmp	r5, #0
 80052d8:	4606      	mov	r6, r0
 80052da:	db01      	blt.n	80052e0 <_malloc_r+0x1c>
 80052dc:	42a9      	cmp	r1, r5
 80052de:	d904      	bls.n	80052ea <_malloc_r+0x26>
 80052e0:	230c      	movs	r3, #12
 80052e2:	6033      	str	r3, [r6, #0]
 80052e4:	2000      	movs	r0, #0
 80052e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053c0 <_malloc_r+0xfc>
 80052ee:	f000 f869 	bl	80053c4 <__malloc_lock>
 80052f2:	f8d8 3000 	ldr.w	r3, [r8]
 80052f6:	461c      	mov	r4, r3
 80052f8:	bb44      	cbnz	r4, 800534c <_malloc_r+0x88>
 80052fa:	4629      	mov	r1, r5
 80052fc:	4630      	mov	r0, r6
 80052fe:	f7ff ffbf 	bl	8005280 <sbrk_aligned>
 8005302:	1c43      	adds	r3, r0, #1
 8005304:	4604      	mov	r4, r0
 8005306:	d158      	bne.n	80053ba <_malloc_r+0xf6>
 8005308:	f8d8 4000 	ldr.w	r4, [r8]
 800530c:	4627      	mov	r7, r4
 800530e:	2f00      	cmp	r7, #0
 8005310:	d143      	bne.n	800539a <_malloc_r+0xd6>
 8005312:	2c00      	cmp	r4, #0
 8005314:	d04b      	beq.n	80053ae <_malloc_r+0xea>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	4639      	mov	r1, r7
 800531a:	4630      	mov	r0, r6
 800531c:	eb04 0903 	add.w	r9, r4, r3
 8005320:	f000 fbc0 	bl	8005aa4 <_sbrk_r>
 8005324:	4581      	cmp	r9, r0
 8005326:	d142      	bne.n	80053ae <_malloc_r+0xea>
 8005328:	6821      	ldr	r1, [r4, #0]
 800532a:	1a6d      	subs	r5, r5, r1
 800532c:	4629      	mov	r1, r5
 800532e:	4630      	mov	r0, r6
 8005330:	f7ff ffa6 	bl	8005280 <sbrk_aligned>
 8005334:	3001      	adds	r0, #1
 8005336:	d03a      	beq.n	80053ae <_malloc_r+0xea>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	442b      	add	r3, r5
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	f8d8 3000 	ldr.w	r3, [r8]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	bb62      	cbnz	r2, 80053a0 <_malloc_r+0xdc>
 8005346:	f8c8 7000 	str.w	r7, [r8]
 800534a:	e00f      	b.n	800536c <_malloc_r+0xa8>
 800534c:	6822      	ldr	r2, [r4, #0]
 800534e:	1b52      	subs	r2, r2, r5
 8005350:	d420      	bmi.n	8005394 <_malloc_r+0xd0>
 8005352:	2a0b      	cmp	r2, #11
 8005354:	d917      	bls.n	8005386 <_malloc_r+0xc2>
 8005356:	1961      	adds	r1, r4, r5
 8005358:	42a3      	cmp	r3, r4
 800535a:	6025      	str	r5, [r4, #0]
 800535c:	bf18      	it	ne
 800535e:	6059      	strne	r1, [r3, #4]
 8005360:	6863      	ldr	r3, [r4, #4]
 8005362:	bf08      	it	eq
 8005364:	f8c8 1000 	streq.w	r1, [r8]
 8005368:	5162      	str	r2, [r4, r5]
 800536a:	604b      	str	r3, [r1, #4]
 800536c:	4630      	mov	r0, r6
 800536e:	f000 f82f 	bl	80053d0 <__malloc_unlock>
 8005372:	f104 000b 	add.w	r0, r4, #11
 8005376:	1d23      	adds	r3, r4, #4
 8005378:	f020 0007 	bic.w	r0, r0, #7
 800537c:	1ac2      	subs	r2, r0, r3
 800537e:	bf1c      	itt	ne
 8005380:	1a1b      	subne	r3, r3, r0
 8005382:	50a3      	strne	r3, [r4, r2]
 8005384:	e7af      	b.n	80052e6 <_malloc_r+0x22>
 8005386:	6862      	ldr	r2, [r4, #4]
 8005388:	42a3      	cmp	r3, r4
 800538a:	bf0c      	ite	eq
 800538c:	f8c8 2000 	streq.w	r2, [r8]
 8005390:	605a      	strne	r2, [r3, #4]
 8005392:	e7eb      	b.n	800536c <_malloc_r+0xa8>
 8005394:	4623      	mov	r3, r4
 8005396:	6864      	ldr	r4, [r4, #4]
 8005398:	e7ae      	b.n	80052f8 <_malloc_r+0x34>
 800539a:	463c      	mov	r4, r7
 800539c:	687f      	ldr	r7, [r7, #4]
 800539e:	e7b6      	b.n	800530e <_malloc_r+0x4a>
 80053a0:	461a      	mov	r2, r3
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	42a3      	cmp	r3, r4
 80053a6:	d1fb      	bne.n	80053a0 <_malloc_r+0xdc>
 80053a8:	2300      	movs	r3, #0
 80053aa:	6053      	str	r3, [r2, #4]
 80053ac:	e7de      	b.n	800536c <_malloc_r+0xa8>
 80053ae:	230c      	movs	r3, #12
 80053b0:	6033      	str	r3, [r6, #0]
 80053b2:	4630      	mov	r0, r6
 80053b4:	f000 f80c 	bl	80053d0 <__malloc_unlock>
 80053b8:	e794      	b.n	80052e4 <_malloc_r+0x20>
 80053ba:	6005      	str	r5, [r0, #0]
 80053bc:	e7d6      	b.n	800536c <_malloc_r+0xa8>
 80053be:	bf00      	nop
 80053c0:	200046dc 	.word	0x200046dc

080053c4 <__malloc_lock>:
 80053c4:	4801      	ldr	r0, [pc, #4]	@ (80053cc <__malloc_lock+0x8>)
 80053c6:	f7ff bf0e 	b.w	80051e6 <__retarget_lock_acquire_recursive>
 80053ca:	bf00      	nop
 80053cc:	200046d4 	.word	0x200046d4

080053d0 <__malloc_unlock>:
 80053d0:	4801      	ldr	r0, [pc, #4]	@ (80053d8 <__malloc_unlock+0x8>)
 80053d2:	f7ff bf09 	b.w	80051e8 <__retarget_lock_release_recursive>
 80053d6:	bf00      	nop
 80053d8:	200046d4 	.word	0x200046d4

080053dc <__sfputc_r>:
 80053dc:	6893      	ldr	r3, [r2, #8]
 80053de:	3b01      	subs	r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	b410      	push	{r4}
 80053e4:	6093      	str	r3, [r2, #8]
 80053e6:	da08      	bge.n	80053fa <__sfputc_r+0x1e>
 80053e8:	6994      	ldr	r4, [r2, #24]
 80053ea:	42a3      	cmp	r3, r4
 80053ec:	db01      	blt.n	80053f2 <__sfputc_r+0x16>
 80053ee:	290a      	cmp	r1, #10
 80053f0:	d103      	bne.n	80053fa <__sfputc_r+0x1e>
 80053f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053f6:	f000 bac1 	b.w	800597c <__swbuf_r>
 80053fa:	6813      	ldr	r3, [r2, #0]
 80053fc:	1c58      	adds	r0, r3, #1
 80053fe:	6010      	str	r0, [r2, #0]
 8005400:	7019      	strb	r1, [r3, #0]
 8005402:	4608      	mov	r0, r1
 8005404:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005408:	4770      	bx	lr

0800540a <__sfputs_r>:
 800540a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540c:	4606      	mov	r6, r0
 800540e:	460f      	mov	r7, r1
 8005410:	4614      	mov	r4, r2
 8005412:	18d5      	adds	r5, r2, r3
 8005414:	42ac      	cmp	r4, r5
 8005416:	d101      	bne.n	800541c <__sfputs_r+0x12>
 8005418:	2000      	movs	r0, #0
 800541a:	e007      	b.n	800542c <__sfputs_r+0x22>
 800541c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005420:	463a      	mov	r2, r7
 8005422:	4630      	mov	r0, r6
 8005424:	f7ff ffda 	bl	80053dc <__sfputc_r>
 8005428:	1c43      	adds	r3, r0, #1
 800542a:	d1f3      	bne.n	8005414 <__sfputs_r+0xa>
 800542c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005430 <_vfiprintf_r>:
 8005430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005434:	460d      	mov	r5, r1
 8005436:	b09d      	sub	sp, #116	@ 0x74
 8005438:	4614      	mov	r4, r2
 800543a:	4698      	mov	r8, r3
 800543c:	4606      	mov	r6, r0
 800543e:	b118      	cbz	r0, 8005448 <_vfiprintf_r+0x18>
 8005440:	6a03      	ldr	r3, [r0, #32]
 8005442:	b90b      	cbnz	r3, 8005448 <_vfiprintf_r+0x18>
 8005444:	f7ff fd74 	bl	8004f30 <__sinit>
 8005448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800544a:	07d9      	lsls	r1, r3, #31
 800544c:	d405      	bmi.n	800545a <_vfiprintf_r+0x2a>
 800544e:	89ab      	ldrh	r3, [r5, #12]
 8005450:	059a      	lsls	r2, r3, #22
 8005452:	d402      	bmi.n	800545a <_vfiprintf_r+0x2a>
 8005454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005456:	f7ff fec6 	bl	80051e6 <__retarget_lock_acquire_recursive>
 800545a:	89ab      	ldrh	r3, [r5, #12]
 800545c:	071b      	lsls	r3, r3, #28
 800545e:	d501      	bpl.n	8005464 <_vfiprintf_r+0x34>
 8005460:	692b      	ldr	r3, [r5, #16]
 8005462:	b99b      	cbnz	r3, 800548c <_vfiprintf_r+0x5c>
 8005464:	4629      	mov	r1, r5
 8005466:	4630      	mov	r0, r6
 8005468:	f000 fac6 	bl	80059f8 <__swsetup_r>
 800546c:	b170      	cbz	r0, 800548c <_vfiprintf_r+0x5c>
 800546e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005470:	07dc      	lsls	r4, r3, #31
 8005472:	d504      	bpl.n	800547e <_vfiprintf_r+0x4e>
 8005474:	f04f 30ff 	mov.w	r0, #4294967295
 8005478:	b01d      	add	sp, #116	@ 0x74
 800547a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547e:	89ab      	ldrh	r3, [r5, #12]
 8005480:	0598      	lsls	r0, r3, #22
 8005482:	d4f7      	bmi.n	8005474 <_vfiprintf_r+0x44>
 8005484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005486:	f7ff feaf 	bl	80051e8 <__retarget_lock_release_recursive>
 800548a:	e7f3      	b.n	8005474 <_vfiprintf_r+0x44>
 800548c:	2300      	movs	r3, #0
 800548e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005490:	2320      	movs	r3, #32
 8005492:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005496:	f8cd 800c 	str.w	r8, [sp, #12]
 800549a:	2330      	movs	r3, #48	@ 0x30
 800549c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800564c <_vfiprintf_r+0x21c>
 80054a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054a4:	f04f 0901 	mov.w	r9, #1
 80054a8:	4623      	mov	r3, r4
 80054aa:	469a      	mov	sl, r3
 80054ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054b0:	b10a      	cbz	r2, 80054b6 <_vfiprintf_r+0x86>
 80054b2:	2a25      	cmp	r2, #37	@ 0x25
 80054b4:	d1f9      	bne.n	80054aa <_vfiprintf_r+0x7a>
 80054b6:	ebba 0b04 	subs.w	fp, sl, r4
 80054ba:	d00b      	beq.n	80054d4 <_vfiprintf_r+0xa4>
 80054bc:	465b      	mov	r3, fp
 80054be:	4622      	mov	r2, r4
 80054c0:	4629      	mov	r1, r5
 80054c2:	4630      	mov	r0, r6
 80054c4:	f7ff ffa1 	bl	800540a <__sfputs_r>
 80054c8:	3001      	adds	r0, #1
 80054ca:	f000 80a7 	beq.w	800561c <_vfiprintf_r+0x1ec>
 80054ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054d0:	445a      	add	r2, fp
 80054d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80054d4:	f89a 3000 	ldrb.w	r3, [sl]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 809f 	beq.w	800561c <_vfiprintf_r+0x1ec>
 80054de:	2300      	movs	r3, #0
 80054e0:	f04f 32ff 	mov.w	r2, #4294967295
 80054e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054e8:	f10a 0a01 	add.w	sl, sl, #1
 80054ec:	9304      	str	r3, [sp, #16]
 80054ee:	9307      	str	r3, [sp, #28]
 80054f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80054f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80054f6:	4654      	mov	r4, sl
 80054f8:	2205      	movs	r2, #5
 80054fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054fe:	4853      	ldr	r0, [pc, #332]	@ (800564c <_vfiprintf_r+0x21c>)
 8005500:	f7fa fe76 	bl	80001f0 <memchr>
 8005504:	9a04      	ldr	r2, [sp, #16]
 8005506:	b9d8      	cbnz	r0, 8005540 <_vfiprintf_r+0x110>
 8005508:	06d1      	lsls	r1, r2, #27
 800550a:	bf44      	itt	mi
 800550c:	2320      	movmi	r3, #32
 800550e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005512:	0713      	lsls	r3, r2, #28
 8005514:	bf44      	itt	mi
 8005516:	232b      	movmi	r3, #43	@ 0x2b
 8005518:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800551c:	f89a 3000 	ldrb.w	r3, [sl]
 8005520:	2b2a      	cmp	r3, #42	@ 0x2a
 8005522:	d015      	beq.n	8005550 <_vfiprintf_r+0x120>
 8005524:	9a07      	ldr	r2, [sp, #28]
 8005526:	4654      	mov	r4, sl
 8005528:	2000      	movs	r0, #0
 800552a:	f04f 0c0a 	mov.w	ip, #10
 800552e:	4621      	mov	r1, r4
 8005530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005534:	3b30      	subs	r3, #48	@ 0x30
 8005536:	2b09      	cmp	r3, #9
 8005538:	d94b      	bls.n	80055d2 <_vfiprintf_r+0x1a2>
 800553a:	b1b0      	cbz	r0, 800556a <_vfiprintf_r+0x13a>
 800553c:	9207      	str	r2, [sp, #28]
 800553e:	e014      	b.n	800556a <_vfiprintf_r+0x13a>
 8005540:	eba0 0308 	sub.w	r3, r0, r8
 8005544:	fa09 f303 	lsl.w	r3, r9, r3
 8005548:	4313      	orrs	r3, r2
 800554a:	9304      	str	r3, [sp, #16]
 800554c:	46a2      	mov	sl, r4
 800554e:	e7d2      	b.n	80054f6 <_vfiprintf_r+0xc6>
 8005550:	9b03      	ldr	r3, [sp, #12]
 8005552:	1d19      	adds	r1, r3, #4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	9103      	str	r1, [sp, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	bfbb      	ittet	lt
 800555c:	425b      	neglt	r3, r3
 800555e:	f042 0202 	orrlt.w	r2, r2, #2
 8005562:	9307      	strge	r3, [sp, #28]
 8005564:	9307      	strlt	r3, [sp, #28]
 8005566:	bfb8      	it	lt
 8005568:	9204      	strlt	r2, [sp, #16]
 800556a:	7823      	ldrb	r3, [r4, #0]
 800556c:	2b2e      	cmp	r3, #46	@ 0x2e
 800556e:	d10a      	bne.n	8005586 <_vfiprintf_r+0x156>
 8005570:	7863      	ldrb	r3, [r4, #1]
 8005572:	2b2a      	cmp	r3, #42	@ 0x2a
 8005574:	d132      	bne.n	80055dc <_vfiprintf_r+0x1ac>
 8005576:	9b03      	ldr	r3, [sp, #12]
 8005578:	1d1a      	adds	r2, r3, #4
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	9203      	str	r2, [sp, #12]
 800557e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005582:	3402      	adds	r4, #2
 8005584:	9305      	str	r3, [sp, #20]
 8005586:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800565c <_vfiprintf_r+0x22c>
 800558a:	7821      	ldrb	r1, [r4, #0]
 800558c:	2203      	movs	r2, #3
 800558e:	4650      	mov	r0, sl
 8005590:	f7fa fe2e 	bl	80001f0 <memchr>
 8005594:	b138      	cbz	r0, 80055a6 <_vfiprintf_r+0x176>
 8005596:	9b04      	ldr	r3, [sp, #16]
 8005598:	eba0 000a 	sub.w	r0, r0, sl
 800559c:	2240      	movs	r2, #64	@ 0x40
 800559e:	4082      	lsls	r2, r0
 80055a0:	4313      	orrs	r3, r2
 80055a2:	3401      	adds	r4, #1
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055aa:	4829      	ldr	r0, [pc, #164]	@ (8005650 <_vfiprintf_r+0x220>)
 80055ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80055b0:	2206      	movs	r2, #6
 80055b2:	f7fa fe1d 	bl	80001f0 <memchr>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d03f      	beq.n	800563a <_vfiprintf_r+0x20a>
 80055ba:	4b26      	ldr	r3, [pc, #152]	@ (8005654 <_vfiprintf_r+0x224>)
 80055bc:	bb1b      	cbnz	r3, 8005606 <_vfiprintf_r+0x1d6>
 80055be:	9b03      	ldr	r3, [sp, #12]
 80055c0:	3307      	adds	r3, #7
 80055c2:	f023 0307 	bic.w	r3, r3, #7
 80055c6:	3308      	adds	r3, #8
 80055c8:	9303      	str	r3, [sp, #12]
 80055ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055cc:	443b      	add	r3, r7
 80055ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80055d0:	e76a      	b.n	80054a8 <_vfiprintf_r+0x78>
 80055d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80055d6:	460c      	mov	r4, r1
 80055d8:	2001      	movs	r0, #1
 80055da:	e7a8      	b.n	800552e <_vfiprintf_r+0xfe>
 80055dc:	2300      	movs	r3, #0
 80055de:	3401      	adds	r4, #1
 80055e0:	9305      	str	r3, [sp, #20]
 80055e2:	4619      	mov	r1, r3
 80055e4:	f04f 0c0a 	mov.w	ip, #10
 80055e8:	4620      	mov	r0, r4
 80055ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055ee:	3a30      	subs	r2, #48	@ 0x30
 80055f0:	2a09      	cmp	r2, #9
 80055f2:	d903      	bls.n	80055fc <_vfiprintf_r+0x1cc>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0c6      	beq.n	8005586 <_vfiprintf_r+0x156>
 80055f8:	9105      	str	r1, [sp, #20]
 80055fa:	e7c4      	b.n	8005586 <_vfiprintf_r+0x156>
 80055fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005600:	4604      	mov	r4, r0
 8005602:	2301      	movs	r3, #1
 8005604:	e7f0      	b.n	80055e8 <_vfiprintf_r+0x1b8>
 8005606:	ab03      	add	r3, sp, #12
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	462a      	mov	r2, r5
 800560c:	4b12      	ldr	r3, [pc, #72]	@ (8005658 <_vfiprintf_r+0x228>)
 800560e:	a904      	add	r1, sp, #16
 8005610:	4630      	mov	r0, r6
 8005612:	f3af 8000 	nop.w
 8005616:	4607      	mov	r7, r0
 8005618:	1c78      	adds	r0, r7, #1
 800561a:	d1d6      	bne.n	80055ca <_vfiprintf_r+0x19a>
 800561c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800561e:	07d9      	lsls	r1, r3, #31
 8005620:	d405      	bmi.n	800562e <_vfiprintf_r+0x1fe>
 8005622:	89ab      	ldrh	r3, [r5, #12]
 8005624:	059a      	lsls	r2, r3, #22
 8005626:	d402      	bmi.n	800562e <_vfiprintf_r+0x1fe>
 8005628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800562a:	f7ff fddd 	bl	80051e8 <__retarget_lock_release_recursive>
 800562e:	89ab      	ldrh	r3, [r5, #12]
 8005630:	065b      	lsls	r3, r3, #25
 8005632:	f53f af1f 	bmi.w	8005474 <_vfiprintf_r+0x44>
 8005636:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005638:	e71e      	b.n	8005478 <_vfiprintf_r+0x48>
 800563a:	ab03      	add	r3, sp, #12
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	462a      	mov	r2, r5
 8005640:	4b05      	ldr	r3, [pc, #20]	@ (8005658 <_vfiprintf_r+0x228>)
 8005642:	a904      	add	r1, sp, #16
 8005644:	4630      	mov	r0, r6
 8005646:	f000 f879 	bl	800573c <_printf_i>
 800564a:	e7e4      	b.n	8005616 <_vfiprintf_r+0x1e6>
 800564c:	080061f0 	.word	0x080061f0
 8005650:	080061fa 	.word	0x080061fa
 8005654:	00000000 	.word	0x00000000
 8005658:	0800540b 	.word	0x0800540b
 800565c:	080061f6 	.word	0x080061f6

08005660 <_printf_common>:
 8005660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005664:	4616      	mov	r6, r2
 8005666:	4698      	mov	r8, r3
 8005668:	688a      	ldr	r2, [r1, #8]
 800566a:	690b      	ldr	r3, [r1, #16]
 800566c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005670:	4293      	cmp	r3, r2
 8005672:	bfb8      	it	lt
 8005674:	4613      	movlt	r3, r2
 8005676:	6033      	str	r3, [r6, #0]
 8005678:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800567c:	4607      	mov	r7, r0
 800567e:	460c      	mov	r4, r1
 8005680:	b10a      	cbz	r2, 8005686 <_printf_common+0x26>
 8005682:	3301      	adds	r3, #1
 8005684:	6033      	str	r3, [r6, #0]
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	0699      	lsls	r1, r3, #26
 800568a:	bf42      	ittt	mi
 800568c:	6833      	ldrmi	r3, [r6, #0]
 800568e:	3302      	addmi	r3, #2
 8005690:	6033      	strmi	r3, [r6, #0]
 8005692:	6825      	ldr	r5, [r4, #0]
 8005694:	f015 0506 	ands.w	r5, r5, #6
 8005698:	d106      	bne.n	80056a8 <_printf_common+0x48>
 800569a:	f104 0a19 	add.w	sl, r4, #25
 800569e:	68e3      	ldr	r3, [r4, #12]
 80056a0:	6832      	ldr	r2, [r6, #0]
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	42ab      	cmp	r3, r5
 80056a6:	dc26      	bgt.n	80056f6 <_printf_common+0x96>
 80056a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056ac:	6822      	ldr	r2, [r4, #0]
 80056ae:	3b00      	subs	r3, #0
 80056b0:	bf18      	it	ne
 80056b2:	2301      	movne	r3, #1
 80056b4:	0692      	lsls	r2, r2, #26
 80056b6:	d42b      	bmi.n	8005710 <_printf_common+0xb0>
 80056b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056bc:	4641      	mov	r1, r8
 80056be:	4638      	mov	r0, r7
 80056c0:	47c8      	blx	r9
 80056c2:	3001      	adds	r0, #1
 80056c4:	d01e      	beq.n	8005704 <_printf_common+0xa4>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	6922      	ldr	r2, [r4, #16]
 80056ca:	f003 0306 	and.w	r3, r3, #6
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	bf02      	ittt	eq
 80056d2:	68e5      	ldreq	r5, [r4, #12]
 80056d4:	6833      	ldreq	r3, [r6, #0]
 80056d6:	1aed      	subeq	r5, r5, r3
 80056d8:	68a3      	ldr	r3, [r4, #8]
 80056da:	bf0c      	ite	eq
 80056dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056e0:	2500      	movne	r5, #0
 80056e2:	4293      	cmp	r3, r2
 80056e4:	bfc4      	itt	gt
 80056e6:	1a9b      	subgt	r3, r3, r2
 80056e8:	18ed      	addgt	r5, r5, r3
 80056ea:	2600      	movs	r6, #0
 80056ec:	341a      	adds	r4, #26
 80056ee:	42b5      	cmp	r5, r6
 80056f0:	d11a      	bne.n	8005728 <_printf_common+0xc8>
 80056f2:	2000      	movs	r0, #0
 80056f4:	e008      	b.n	8005708 <_printf_common+0xa8>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4652      	mov	r2, sl
 80056fa:	4641      	mov	r1, r8
 80056fc:	4638      	mov	r0, r7
 80056fe:	47c8      	blx	r9
 8005700:	3001      	adds	r0, #1
 8005702:	d103      	bne.n	800570c <_printf_common+0xac>
 8005704:	f04f 30ff 	mov.w	r0, #4294967295
 8005708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800570c:	3501      	adds	r5, #1
 800570e:	e7c6      	b.n	800569e <_printf_common+0x3e>
 8005710:	18e1      	adds	r1, r4, r3
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	2030      	movs	r0, #48	@ 0x30
 8005716:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800571a:	4422      	add	r2, r4
 800571c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005720:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005724:	3302      	adds	r3, #2
 8005726:	e7c7      	b.n	80056b8 <_printf_common+0x58>
 8005728:	2301      	movs	r3, #1
 800572a:	4622      	mov	r2, r4
 800572c:	4641      	mov	r1, r8
 800572e:	4638      	mov	r0, r7
 8005730:	47c8      	blx	r9
 8005732:	3001      	adds	r0, #1
 8005734:	d0e6      	beq.n	8005704 <_printf_common+0xa4>
 8005736:	3601      	adds	r6, #1
 8005738:	e7d9      	b.n	80056ee <_printf_common+0x8e>
	...

0800573c <_printf_i>:
 800573c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005740:	7e0f      	ldrb	r7, [r1, #24]
 8005742:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005744:	2f78      	cmp	r7, #120	@ 0x78
 8005746:	4691      	mov	r9, r2
 8005748:	4680      	mov	r8, r0
 800574a:	460c      	mov	r4, r1
 800574c:	469a      	mov	sl, r3
 800574e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005752:	d807      	bhi.n	8005764 <_printf_i+0x28>
 8005754:	2f62      	cmp	r7, #98	@ 0x62
 8005756:	d80a      	bhi.n	800576e <_printf_i+0x32>
 8005758:	2f00      	cmp	r7, #0
 800575a:	f000 80d2 	beq.w	8005902 <_printf_i+0x1c6>
 800575e:	2f58      	cmp	r7, #88	@ 0x58
 8005760:	f000 80b9 	beq.w	80058d6 <_printf_i+0x19a>
 8005764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005768:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800576c:	e03a      	b.n	80057e4 <_printf_i+0xa8>
 800576e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005772:	2b15      	cmp	r3, #21
 8005774:	d8f6      	bhi.n	8005764 <_printf_i+0x28>
 8005776:	a101      	add	r1, pc, #4	@ (adr r1, 800577c <_printf_i+0x40>)
 8005778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800577c:	080057d5 	.word	0x080057d5
 8005780:	080057e9 	.word	0x080057e9
 8005784:	08005765 	.word	0x08005765
 8005788:	08005765 	.word	0x08005765
 800578c:	08005765 	.word	0x08005765
 8005790:	08005765 	.word	0x08005765
 8005794:	080057e9 	.word	0x080057e9
 8005798:	08005765 	.word	0x08005765
 800579c:	08005765 	.word	0x08005765
 80057a0:	08005765 	.word	0x08005765
 80057a4:	08005765 	.word	0x08005765
 80057a8:	080058e9 	.word	0x080058e9
 80057ac:	08005813 	.word	0x08005813
 80057b0:	080058a3 	.word	0x080058a3
 80057b4:	08005765 	.word	0x08005765
 80057b8:	08005765 	.word	0x08005765
 80057bc:	0800590b 	.word	0x0800590b
 80057c0:	08005765 	.word	0x08005765
 80057c4:	08005813 	.word	0x08005813
 80057c8:	08005765 	.word	0x08005765
 80057cc:	08005765 	.word	0x08005765
 80057d0:	080058ab 	.word	0x080058ab
 80057d4:	6833      	ldr	r3, [r6, #0]
 80057d6:	1d1a      	adds	r2, r3, #4
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6032      	str	r2, [r6, #0]
 80057dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057e4:	2301      	movs	r3, #1
 80057e6:	e09d      	b.n	8005924 <_printf_i+0x1e8>
 80057e8:	6833      	ldr	r3, [r6, #0]
 80057ea:	6820      	ldr	r0, [r4, #0]
 80057ec:	1d19      	adds	r1, r3, #4
 80057ee:	6031      	str	r1, [r6, #0]
 80057f0:	0606      	lsls	r6, r0, #24
 80057f2:	d501      	bpl.n	80057f8 <_printf_i+0xbc>
 80057f4:	681d      	ldr	r5, [r3, #0]
 80057f6:	e003      	b.n	8005800 <_printf_i+0xc4>
 80057f8:	0645      	lsls	r5, r0, #25
 80057fa:	d5fb      	bpl.n	80057f4 <_printf_i+0xb8>
 80057fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005800:	2d00      	cmp	r5, #0
 8005802:	da03      	bge.n	800580c <_printf_i+0xd0>
 8005804:	232d      	movs	r3, #45	@ 0x2d
 8005806:	426d      	negs	r5, r5
 8005808:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800580c:	4859      	ldr	r0, [pc, #356]	@ (8005974 <_printf_i+0x238>)
 800580e:	230a      	movs	r3, #10
 8005810:	e011      	b.n	8005836 <_printf_i+0xfa>
 8005812:	6821      	ldr	r1, [r4, #0]
 8005814:	6833      	ldr	r3, [r6, #0]
 8005816:	0608      	lsls	r0, r1, #24
 8005818:	f853 5b04 	ldr.w	r5, [r3], #4
 800581c:	d402      	bmi.n	8005824 <_printf_i+0xe8>
 800581e:	0649      	lsls	r1, r1, #25
 8005820:	bf48      	it	mi
 8005822:	b2ad      	uxthmi	r5, r5
 8005824:	2f6f      	cmp	r7, #111	@ 0x6f
 8005826:	4853      	ldr	r0, [pc, #332]	@ (8005974 <_printf_i+0x238>)
 8005828:	6033      	str	r3, [r6, #0]
 800582a:	bf14      	ite	ne
 800582c:	230a      	movne	r3, #10
 800582e:	2308      	moveq	r3, #8
 8005830:	2100      	movs	r1, #0
 8005832:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005836:	6866      	ldr	r6, [r4, #4]
 8005838:	60a6      	str	r6, [r4, #8]
 800583a:	2e00      	cmp	r6, #0
 800583c:	bfa2      	ittt	ge
 800583e:	6821      	ldrge	r1, [r4, #0]
 8005840:	f021 0104 	bicge.w	r1, r1, #4
 8005844:	6021      	strge	r1, [r4, #0]
 8005846:	b90d      	cbnz	r5, 800584c <_printf_i+0x110>
 8005848:	2e00      	cmp	r6, #0
 800584a:	d04b      	beq.n	80058e4 <_printf_i+0x1a8>
 800584c:	4616      	mov	r6, r2
 800584e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005852:	fb03 5711 	mls	r7, r3, r1, r5
 8005856:	5dc7      	ldrb	r7, [r0, r7]
 8005858:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800585c:	462f      	mov	r7, r5
 800585e:	42bb      	cmp	r3, r7
 8005860:	460d      	mov	r5, r1
 8005862:	d9f4      	bls.n	800584e <_printf_i+0x112>
 8005864:	2b08      	cmp	r3, #8
 8005866:	d10b      	bne.n	8005880 <_printf_i+0x144>
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	07df      	lsls	r7, r3, #31
 800586c:	d508      	bpl.n	8005880 <_printf_i+0x144>
 800586e:	6923      	ldr	r3, [r4, #16]
 8005870:	6861      	ldr	r1, [r4, #4]
 8005872:	4299      	cmp	r1, r3
 8005874:	bfde      	ittt	le
 8005876:	2330      	movle	r3, #48	@ 0x30
 8005878:	f806 3c01 	strble.w	r3, [r6, #-1]
 800587c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005880:	1b92      	subs	r2, r2, r6
 8005882:	6122      	str	r2, [r4, #16]
 8005884:	f8cd a000 	str.w	sl, [sp]
 8005888:	464b      	mov	r3, r9
 800588a:	aa03      	add	r2, sp, #12
 800588c:	4621      	mov	r1, r4
 800588e:	4640      	mov	r0, r8
 8005890:	f7ff fee6 	bl	8005660 <_printf_common>
 8005894:	3001      	adds	r0, #1
 8005896:	d14a      	bne.n	800592e <_printf_i+0x1f2>
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	b004      	add	sp, #16
 800589e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	f043 0320 	orr.w	r3, r3, #32
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	4833      	ldr	r0, [pc, #204]	@ (8005978 <_printf_i+0x23c>)
 80058ac:	2778      	movs	r7, #120	@ 0x78
 80058ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	6831      	ldr	r1, [r6, #0]
 80058b6:	061f      	lsls	r7, r3, #24
 80058b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80058bc:	d402      	bmi.n	80058c4 <_printf_i+0x188>
 80058be:	065f      	lsls	r7, r3, #25
 80058c0:	bf48      	it	mi
 80058c2:	b2ad      	uxthmi	r5, r5
 80058c4:	6031      	str	r1, [r6, #0]
 80058c6:	07d9      	lsls	r1, r3, #31
 80058c8:	bf44      	itt	mi
 80058ca:	f043 0320 	orrmi.w	r3, r3, #32
 80058ce:	6023      	strmi	r3, [r4, #0]
 80058d0:	b11d      	cbz	r5, 80058da <_printf_i+0x19e>
 80058d2:	2310      	movs	r3, #16
 80058d4:	e7ac      	b.n	8005830 <_printf_i+0xf4>
 80058d6:	4827      	ldr	r0, [pc, #156]	@ (8005974 <_printf_i+0x238>)
 80058d8:	e7e9      	b.n	80058ae <_printf_i+0x172>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	f023 0320 	bic.w	r3, r3, #32
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	e7f6      	b.n	80058d2 <_printf_i+0x196>
 80058e4:	4616      	mov	r6, r2
 80058e6:	e7bd      	b.n	8005864 <_printf_i+0x128>
 80058e8:	6833      	ldr	r3, [r6, #0]
 80058ea:	6825      	ldr	r5, [r4, #0]
 80058ec:	6961      	ldr	r1, [r4, #20]
 80058ee:	1d18      	adds	r0, r3, #4
 80058f0:	6030      	str	r0, [r6, #0]
 80058f2:	062e      	lsls	r6, r5, #24
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	d501      	bpl.n	80058fc <_printf_i+0x1c0>
 80058f8:	6019      	str	r1, [r3, #0]
 80058fa:	e002      	b.n	8005902 <_printf_i+0x1c6>
 80058fc:	0668      	lsls	r0, r5, #25
 80058fe:	d5fb      	bpl.n	80058f8 <_printf_i+0x1bc>
 8005900:	8019      	strh	r1, [r3, #0]
 8005902:	2300      	movs	r3, #0
 8005904:	6123      	str	r3, [r4, #16]
 8005906:	4616      	mov	r6, r2
 8005908:	e7bc      	b.n	8005884 <_printf_i+0x148>
 800590a:	6833      	ldr	r3, [r6, #0]
 800590c:	1d1a      	adds	r2, r3, #4
 800590e:	6032      	str	r2, [r6, #0]
 8005910:	681e      	ldr	r6, [r3, #0]
 8005912:	6862      	ldr	r2, [r4, #4]
 8005914:	2100      	movs	r1, #0
 8005916:	4630      	mov	r0, r6
 8005918:	f7fa fc6a 	bl	80001f0 <memchr>
 800591c:	b108      	cbz	r0, 8005922 <_printf_i+0x1e6>
 800591e:	1b80      	subs	r0, r0, r6
 8005920:	6060      	str	r0, [r4, #4]
 8005922:	6863      	ldr	r3, [r4, #4]
 8005924:	6123      	str	r3, [r4, #16]
 8005926:	2300      	movs	r3, #0
 8005928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800592c:	e7aa      	b.n	8005884 <_printf_i+0x148>
 800592e:	6923      	ldr	r3, [r4, #16]
 8005930:	4632      	mov	r2, r6
 8005932:	4649      	mov	r1, r9
 8005934:	4640      	mov	r0, r8
 8005936:	47d0      	blx	sl
 8005938:	3001      	adds	r0, #1
 800593a:	d0ad      	beq.n	8005898 <_printf_i+0x15c>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	079b      	lsls	r3, r3, #30
 8005940:	d413      	bmi.n	800596a <_printf_i+0x22e>
 8005942:	68e0      	ldr	r0, [r4, #12]
 8005944:	9b03      	ldr	r3, [sp, #12]
 8005946:	4298      	cmp	r0, r3
 8005948:	bfb8      	it	lt
 800594a:	4618      	movlt	r0, r3
 800594c:	e7a6      	b.n	800589c <_printf_i+0x160>
 800594e:	2301      	movs	r3, #1
 8005950:	4632      	mov	r2, r6
 8005952:	4649      	mov	r1, r9
 8005954:	4640      	mov	r0, r8
 8005956:	47d0      	blx	sl
 8005958:	3001      	adds	r0, #1
 800595a:	d09d      	beq.n	8005898 <_printf_i+0x15c>
 800595c:	3501      	adds	r5, #1
 800595e:	68e3      	ldr	r3, [r4, #12]
 8005960:	9903      	ldr	r1, [sp, #12]
 8005962:	1a5b      	subs	r3, r3, r1
 8005964:	42ab      	cmp	r3, r5
 8005966:	dcf2      	bgt.n	800594e <_printf_i+0x212>
 8005968:	e7eb      	b.n	8005942 <_printf_i+0x206>
 800596a:	2500      	movs	r5, #0
 800596c:	f104 0619 	add.w	r6, r4, #25
 8005970:	e7f5      	b.n	800595e <_printf_i+0x222>
 8005972:	bf00      	nop
 8005974:	08006201 	.word	0x08006201
 8005978:	08006212 	.word	0x08006212

0800597c <__swbuf_r>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	460e      	mov	r6, r1
 8005980:	4614      	mov	r4, r2
 8005982:	4605      	mov	r5, r0
 8005984:	b118      	cbz	r0, 800598e <__swbuf_r+0x12>
 8005986:	6a03      	ldr	r3, [r0, #32]
 8005988:	b90b      	cbnz	r3, 800598e <__swbuf_r+0x12>
 800598a:	f7ff fad1 	bl	8004f30 <__sinit>
 800598e:	69a3      	ldr	r3, [r4, #24]
 8005990:	60a3      	str	r3, [r4, #8]
 8005992:	89a3      	ldrh	r3, [r4, #12]
 8005994:	071a      	lsls	r2, r3, #28
 8005996:	d501      	bpl.n	800599c <__swbuf_r+0x20>
 8005998:	6923      	ldr	r3, [r4, #16]
 800599a:	b943      	cbnz	r3, 80059ae <__swbuf_r+0x32>
 800599c:	4621      	mov	r1, r4
 800599e:	4628      	mov	r0, r5
 80059a0:	f000 f82a 	bl	80059f8 <__swsetup_r>
 80059a4:	b118      	cbz	r0, 80059ae <__swbuf_r+0x32>
 80059a6:	f04f 37ff 	mov.w	r7, #4294967295
 80059aa:	4638      	mov	r0, r7
 80059ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	6922      	ldr	r2, [r4, #16]
 80059b2:	1a98      	subs	r0, r3, r2
 80059b4:	6963      	ldr	r3, [r4, #20]
 80059b6:	b2f6      	uxtb	r6, r6
 80059b8:	4283      	cmp	r3, r0
 80059ba:	4637      	mov	r7, r6
 80059bc:	dc05      	bgt.n	80059ca <__swbuf_r+0x4e>
 80059be:	4621      	mov	r1, r4
 80059c0:	4628      	mov	r0, r5
 80059c2:	f7ff f9ed 	bl	8004da0 <_fflush_r>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d1ed      	bne.n	80059a6 <__swbuf_r+0x2a>
 80059ca:	68a3      	ldr	r3, [r4, #8]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	60a3      	str	r3, [r4, #8]
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	6022      	str	r2, [r4, #0]
 80059d6:	701e      	strb	r6, [r3, #0]
 80059d8:	6962      	ldr	r2, [r4, #20]
 80059da:	1c43      	adds	r3, r0, #1
 80059dc:	429a      	cmp	r2, r3
 80059de:	d004      	beq.n	80059ea <__swbuf_r+0x6e>
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	07db      	lsls	r3, r3, #31
 80059e4:	d5e1      	bpl.n	80059aa <__swbuf_r+0x2e>
 80059e6:	2e0a      	cmp	r6, #10
 80059e8:	d1df      	bne.n	80059aa <__swbuf_r+0x2e>
 80059ea:	4621      	mov	r1, r4
 80059ec:	4628      	mov	r0, r5
 80059ee:	f7ff f9d7 	bl	8004da0 <_fflush_r>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d0d9      	beq.n	80059aa <__swbuf_r+0x2e>
 80059f6:	e7d6      	b.n	80059a6 <__swbuf_r+0x2a>

080059f8 <__swsetup_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4b29      	ldr	r3, [pc, #164]	@ (8005aa0 <__swsetup_r+0xa8>)
 80059fc:	4605      	mov	r5, r0
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	460c      	mov	r4, r1
 8005a02:	b118      	cbz	r0, 8005a0c <__swsetup_r+0x14>
 8005a04:	6a03      	ldr	r3, [r0, #32]
 8005a06:	b90b      	cbnz	r3, 8005a0c <__swsetup_r+0x14>
 8005a08:	f7ff fa92 	bl	8004f30 <__sinit>
 8005a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a10:	0719      	lsls	r1, r3, #28
 8005a12:	d422      	bmi.n	8005a5a <__swsetup_r+0x62>
 8005a14:	06da      	lsls	r2, r3, #27
 8005a16:	d407      	bmi.n	8005a28 <__swsetup_r+0x30>
 8005a18:	2209      	movs	r2, #9
 8005a1a:	602a      	str	r2, [r5, #0]
 8005a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a20:	81a3      	strh	r3, [r4, #12]
 8005a22:	f04f 30ff 	mov.w	r0, #4294967295
 8005a26:	e033      	b.n	8005a90 <__swsetup_r+0x98>
 8005a28:	0758      	lsls	r0, r3, #29
 8005a2a:	d512      	bpl.n	8005a52 <__swsetup_r+0x5a>
 8005a2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a2e:	b141      	cbz	r1, 8005a42 <__swsetup_r+0x4a>
 8005a30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a34:	4299      	cmp	r1, r3
 8005a36:	d002      	beq.n	8005a3e <__swsetup_r+0x46>
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f7ff fbd7 	bl	80051ec <_free_r>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a48:	81a3      	strh	r3, [r4, #12]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	6063      	str	r3, [r4, #4]
 8005a4e:	6923      	ldr	r3, [r4, #16]
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	89a3      	ldrh	r3, [r4, #12]
 8005a54:	f043 0308 	orr.w	r3, r3, #8
 8005a58:	81a3      	strh	r3, [r4, #12]
 8005a5a:	6923      	ldr	r3, [r4, #16]
 8005a5c:	b94b      	cbnz	r3, 8005a72 <__swsetup_r+0x7a>
 8005a5e:	89a3      	ldrh	r3, [r4, #12]
 8005a60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a68:	d003      	beq.n	8005a72 <__swsetup_r+0x7a>
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	f000 f84f 	bl	8005b10 <__smakebuf_r>
 8005a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a76:	f013 0201 	ands.w	r2, r3, #1
 8005a7a:	d00a      	beq.n	8005a92 <__swsetup_r+0x9a>
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	60a2      	str	r2, [r4, #8]
 8005a80:	6962      	ldr	r2, [r4, #20]
 8005a82:	4252      	negs	r2, r2
 8005a84:	61a2      	str	r2, [r4, #24]
 8005a86:	6922      	ldr	r2, [r4, #16]
 8005a88:	b942      	cbnz	r2, 8005a9c <__swsetup_r+0xa4>
 8005a8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a8e:	d1c5      	bne.n	8005a1c <__swsetup_r+0x24>
 8005a90:	bd38      	pop	{r3, r4, r5, pc}
 8005a92:	0799      	lsls	r1, r3, #30
 8005a94:	bf58      	it	pl
 8005a96:	6962      	ldrpl	r2, [r4, #20]
 8005a98:	60a2      	str	r2, [r4, #8]
 8005a9a:	e7f4      	b.n	8005a86 <__swsetup_r+0x8e>
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	e7f7      	b.n	8005a90 <__swsetup_r+0x98>
 8005aa0:	2000001c 	.word	0x2000001c

08005aa4 <_sbrk_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4d06      	ldr	r5, [pc, #24]	@ (8005ac0 <_sbrk_r+0x1c>)
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4608      	mov	r0, r1
 8005aae:	602b      	str	r3, [r5, #0]
 8005ab0:	f7fb fa3c 	bl	8000f2c <_sbrk>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_sbrk_r+0x1a>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_sbrk_r+0x1a>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	200046d0 	.word	0x200046d0

08005ac4 <__swhatbuf_r>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005acc:	2900      	cmp	r1, #0
 8005ace:	b096      	sub	sp, #88	@ 0x58
 8005ad0:	4615      	mov	r5, r2
 8005ad2:	461e      	mov	r6, r3
 8005ad4:	da0d      	bge.n	8005af2 <__swhatbuf_r+0x2e>
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005adc:	f04f 0100 	mov.w	r1, #0
 8005ae0:	bf14      	ite	ne
 8005ae2:	2340      	movne	r3, #64	@ 0x40
 8005ae4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ae8:	2000      	movs	r0, #0
 8005aea:	6031      	str	r1, [r6, #0]
 8005aec:	602b      	str	r3, [r5, #0]
 8005aee:	b016      	add	sp, #88	@ 0x58
 8005af0:	bd70      	pop	{r4, r5, r6, pc}
 8005af2:	466a      	mov	r2, sp
 8005af4:	f000 f848 	bl	8005b88 <_fstat_r>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	dbec      	blt.n	8005ad6 <__swhatbuf_r+0x12>
 8005afc:	9901      	ldr	r1, [sp, #4]
 8005afe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b06:	4259      	negs	r1, r3
 8005b08:	4159      	adcs	r1, r3
 8005b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b0e:	e7eb      	b.n	8005ae8 <__swhatbuf_r+0x24>

08005b10 <__smakebuf_r>:
 8005b10:	898b      	ldrh	r3, [r1, #12]
 8005b12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b14:	079d      	lsls	r5, r3, #30
 8005b16:	4606      	mov	r6, r0
 8005b18:	460c      	mov	r4, r1
 8005b1a:	d507      	bpl.n	8005b2c <__smakebuf_r+0x1c>
 8005b1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	6123      	str	r3, [r4, #16]
 8005b24:	2301      	movs	r3, #1
 8005b26:	6163      	str	r3, [r4, #20]
 8005b28:	b003      	add	sp, #12
 8005b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b2c:	ab01      	add	r3, sp, #4
 8005b2e:	466a      	mov	r2, sp
 8005b30:	f7ff ffc8 	bl	8005ac4 <__swhatbuf_r>
 8005b34:	9f00      	ldr	r7, [sp, #0]
 8005b36:	4605      	mov	r5, r0
 8005b38:	4639      	mov	r1, r7
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	f7ff fbc2 	bl	80052c4 <_malloc_r>
 8005b40:	b948      	cbnz	r0, 8005b56 <__smakebuf_r+0x46>
 8005b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b46:	059a      	lsls	r2, r3, #22
 8005b48:	d4ee      	bmi.n	8005b28 <__smakebuf_r+0x18>
 8005b4a:	f023 0303 	bic.w	r3, r3, #3
 8005b4e:	f043 0302 	orr.w	r3, r3, #2
 8005b52:	81a3      	strh	r3, [r4, #12]
 8005b54:	e7e2      	b.n	8005b1c <__smakebuf_r+0xc>
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	6020      	str	r0, [r4, #0]
 8005b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b5e:	81a3      	strh	r3, [r4, #12]
 8005b60:	9b01      	ldr	r3, [sp, #4]
 8005b62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b66:	b15b      	cbz	r3, 8005b80 <__smakebuf_r+0x70>
 8005b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f000 f81d 	bl	8005bac <_isatty_r>
 8005b72:	b128      	cbz	r0, 8005b80 <__smakebuf_r+0x70>
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	f023 0303 	bic.w	r3, r3, #3
 8005b7a:	f043 0301 	orr.w	r3, r3, #1
 8005b7e:	81a3      	strh	r3, [r4, #12]
 8005b80:	89a3      	ldrh	r3, [r4, #12]
 8005b82:	431d      	orrs	r5, r3
 8005b84:	81a5      	strh	r5, [r4, #12]
 8005b86:	e7cf      	b.n	8005b28 <__smakebuf_r+0x18>

08005b88 <_fstat_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	4d07      	ldr	r5, [pc, #28]	@ (8005ba8 <_fstat_r+0x20>)
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	4604      	mov	r4, r0
 8005b90:	4608      	mov	r0, r1
 8005b92:	4611      	mov	r1, r2
 8005b94:	602b      	str	r3, [r5, #0]
 8005b96:	f000 f92e 	bl	8005df6 <_fstat>
 8005b9a:	1c43      	adds	r3, r0, #1
 8005b9c:	d102      	bne.n	8005ba4 <_fstat_r+0x1c>
 8005b9e:	682b      	ldr	r3, [r5, #0]
 8005ba0:	b103      	cbz	r3, 8005ba4 <_fstat_r+0x1c>
 8005ba2:	6023      	str	r3, [r4, #0]
 8005ba4:	bd38      	pop	{r3, r4, r5, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200046d0 	.word	0x200046d0

08005bac <_isatty_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	4d06      	ldr	r5, [pc, #24]	@ (8005bc8 <_isatty_r+0x1c>)
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	4608      	mov	r0, r1
 8005bb6:	602b      	str	r3, [r5, #0]
 8005bb8:	f000 fa80 	bl	80060bc <_isatty>
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	d102      	bne.n	8005bc6 <_isatty_r+0x1a>
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	b103      	cbz	r3, 8005bc6 <_isatty_r+0x1a>
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	bd38      	pop	{r3, r4, r5, pc}
 8005bc8:	200046d0 	.word	0x200046d0

08005bcc <findslot>:
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <findslot+0x2c>)
 8005bce:	b510      	push	{r4, lr}
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	6818      	ldr	r0, [r3, #0]
 8005bd4:	b118      	cbz	r0, 8005bde <findslot+0x12>
 8005bd6:	6a03      	ldr	r3, [r0, #32]
 8005bd8:	b90b      	cbnz	r3, 8005bde <findslot+0x12>
 8005bda:	f7ff f9a9 	bl	8004f30 <__sinit>
 8005bde:	2c13      	cmp	r4, #19
 8005be0:	d807      	bhi.n	8005bf2 <findslot+0x26>
 8005be2:	4806      	ldr	r0, [pc, #24]	@ (8005bfc <findslot+0x30>)
 8005be4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005be8:	3201      	adds	r2, #1
 8005bea:	d002      	beq.n	8005bf2 <findslot+0x26>
 8005bec:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005bf0:	bd10      	pop	{r4, pc}
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	e7fc      	b.n	8005bf0 <findslot+0x24>
 8005bf6:	bf00      	nop
 8005bf8:	2000001c 	.word	0x2000001c
 8005bfc:	200046ec 	.word	0x200046ec

08005c00 <error>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	4604      	mov	r4, r0
 8005c04:	f7ff fac4 	bl	8005190 <__errno>
 8005c08:	2613      	movs	r6, #19
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	2700      	movs	r7, #0
 8005c0e:	4630      	mov	r0, r6
 8005c10:	4639      	mov	r1, r7
 8005c12:	beab      	bkpt	0x00ab
 8005c14:	4606      	mov	r6, r0
 8005c16:	602e      	str	r6, [r5, #0]
 8005c18:	4620      	mov	r0, r4
 8005c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005c1c <checkerror>:
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d101      	bne.n	8005c24 <checkerror+0x8>
 8005c20:	f7ff bfee 	b.w	8005c00 <error>
 8005c24:	4770      	bx	lr

08005c26 <_swiread>:
 8005c26:	b530      	push	{r4, r5, lr}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005c2e:	9203      	str	r2, [sp, #12]
 8005c30:	2406      	movs	r4, #6
 8005c32:	ad01      	add	r5, sp, #4
 8005c34:	4620      	mov	r0, r4
 8005c36:	4629      	mov	r1, r5
 8005c38:	beab      	bkpt	0x00ab
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f7ff ffed 	bl	8005c1c <checkerror>
 8005c42:	b005      	add	sp, #20
 8005c44:	bd30      	pop	{r4, r5, pc}

08005c46 <_read>:
 8005c46:	b570      	push	{r4, r5, r6, lr}
 8005c48:	460e      	mov	r6, r1
 8005c4a:	4614      	mov	r4, r2
 8005c4c:	f7ff ffbe 	bl	8005bcc <findslot>
 8005c50:	4605      	mov	r5, r0
 8005c52:	b930      	cbnz	r0, 8005c62 <_read+0x1c>
 8005c54:	f7ff fa9c 	bl	8005190 <__errno>
 8005c58:	2309      	movs	r3, #9
 8005c5a:	6003      	str	r3, [r0, #0]
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c60:	bd70      	pop	{r4, r5, r6, pc}
 8005c62:	6800      	ldr	r0, [r0, #0]
 8005c64:	4622      	mov	r2, r4
 8005c66:	4631      	mov	r1, r6
 8005c68:	f7ff ffdd 	bl	8005c26 <_swiread>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d0f5      	beq.n	8005c5c <_read+0x16>
 8005c70:	686b      	ldr	r3, [r5, #4]
 8005c72:	1a20      	subs	r0, r4, r0
 8005c74:	4403      	add	r3, r0
 8005c76:	606b      	str	r3, [r5, #4]
 8005c78:	e7f2      	b.n	8005c60 <_read+0x1a>

08005c7a <_swilseek>:
 8005c7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	4616      	mov	r6, r2
 8005c80:	f7ff ffa4 	bl	8005bcc <findslot>
 8005c84:	4605      	mov	r5, r0
 8005c86:	b940      	cbnz	r0, 8005c9a <_swilseek+0x20>
 8005c88:	f7ff fa82 	bl	8005190 <__errno>
 8005c8c:	2309      	movs	r3, #9
 8005c8e:	6003      	str	r3, [r0, #0]
 8005c90:	f04f 34ff 	mov.w	r4, #4294967295
 8005c94:	4620      	mov	r0, r4
 8005c96:	b003      	add	sp, #12
 8005c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c9a:	2e02      	cmp	r6, #2
 8005c9c:	d903      	bls.n	8005ca6 <_swilseek+0x2c>
 8005c9e:	f7ff fa77 	bl	8005190 <__errno>
 8005ca2:	2316      	movs	r3, #22
 8005ca4:	e7f3      	b.n	8005c8e <_swilseek+0x14>
 8005ca6:	2e01      	cmp	r6, #1
 8005ca8:	d112      	bne.n	8005cd0 <_swilseek+0x56>
 8005caa:	6843      	ldr	r3, [r0, #4]
 8005cac:	18e4      	adds	r4, r4, r3
 8005cae:	d4f6      	bmi.n	8005c9e <_swilseek+0x24>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	260a      	movs	r6, #10
 8005cb4:	e9cd 3400 	strd	r3, r4, [sp]
 8005cb8:	466f      	mov	r7, sp
 8005cba:	4630      	mov	r0, r6
 8005cbc:	4639      	mov	r1, r7
 8005cbe:	beab      	bkpt	0x00ab
 8005cc0:	4606      	mov	r6, r0
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f7ff ffaa 	bl	8005c1c <checkerror>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	dbe1      	blt.n	8005c90 <_swilseek+0x16>
 8005ccc:	606c      	str	r4, [r5, #4]
 8005cce:	e7e1      	b.n	8005c94 <_swilseek+0x1a>
 8005cd0:	2e02      	cmp	r6, #2
 8005cd2:	6803      	ldr	r3, [r0, #0]
 8005cd4:	d1ec      	bne.n	8005cb0 <_swilseek+0x36>
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	260c      	movs	r6, #12
 8005cda:	466f      	mov	r7, sp
 8005cdc:	4630      	mov	r0, r6
 8005cde:	4639      	mov	r1, r7
 8005ce0:	beab      	bkpt	0x00ab
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	f7ff ff99 	bl	8005c1c <checkerror>
 8005cea:	1c43      	adds	r3, r0, #1
 8005cec:	d0d0      	beq.n	8005c90 <_swilseek+0x16>
 8005cee:	4404      	add	r4, r0
 8005cf0:	e7de      	b.n	8005cb0 <_swilseek+0x36>

08005cf2 <_lseek>:
 8005cf2:	f7ff bfc2 	b.w	8005c7a <_swilseek>

08005cf6 <_swiwrite>:
 8005cf6:	b530      	push	{r4, r5, lr}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005cfe:	9203      	str	r2, [sp, #12]
 8005d00:	2405      	movs	r4, #5
 8005d02:	ad01      	add	r5, sp, #4
 8005d04:	4620      	mov	r0, r4
 8005d06:	4629      	mov	r1, r5
 8005d08:	beab      	bkpt	0x00ab
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f7ff ff85 	bl	8005c1c <checkerror>
 8005d12:	b005      	add	sp, #20
 8005d14:	bd30      	pop	{r4, r5, pc}

08005d16 <_write>:
 8005d16:	b570      	push	{r4, r5, r6, lr}
 8005d18:	460e      	mov	r6, r1
 8005d1a:	4615      	mov	r5, r2
 8005d1c:	f7ff ff56 	bl	8005bcc <findslot>
 8005d20:	4604      	mov	r4, r0
 8005d22:	b930      	cbnz	r0, 8005d32 <_write+0x1c>
 8005d24:	f7ff fa34 	bl	8005190 <__errno>
 8005d28:	2309      	movs	r3, #9
 8005d2a:	6003      	str	r3, [r0, #0]
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	bd70      	pop	{r4, r5, r6, pc}
 8005d32:	6800      	ldr	r0, [r0, #0]
 8005d34:	462a      	mov	r2, r5
 8005d36:	4631      	mov	r1, r6
 8005d38:	f7ff ffdd 	bl	8005cf6 <_swiwrite>
 8005d3c:	1e03      	subs	r3, r0, #0
 8005d3e:	dbf5      	blt.n	8005d2c <_write+0x16>
 8005d40:	6862      	ldr	r2, [r4, #4]
 8005d42:	1ae8      	subs	r0, r5, r3
 8005d44:	4402      	add	r2, r0
 8005d46:	42ab      	cmp	r3, r5
 8005d48:	6062      	str	r2, [r4, #4]
 8005d4a:	d1f1      	bne.n	8005d30 <_write+0x1a>
 8005d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d50:	2000      	movs	r0, #0
 8005d52:	f7ff bf55 	b.w	8005c00 <error>

08005d56 <_swiclose>:
 8005d56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d58:	2402      	movs	r4, #2
 8005d5a:	9001      	str	r0, [sp, #4]
 8005d5c:	ad01      	add	r5, sp, #4
 8005d5e:	4620      	mov	r0, r4
 8005d60:	4629      	mov	r1, r5
 8005d62:	beab      	bkpt	0x00ab
 8005d64:	4604      	mov	r4, r0
 8005d66:	4620      	mov	r0, r4
 8005d68:	f7ff ff58 	bl	8005c1c <checkerror>
 8005d6c:	b003      	add	sp, #12
 8005d6e:	bd30      	pop	{r4, r5, pc}

08005d70 <_close>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4605      	mov	r5, r0
 8005d74:	f7ff ff2a 	bl	8005bcc <findslot>
 8005d78:	4604      	mov	r4, r0
 8005d7a:	b930      	cbnz	r0, 8005d8a <_close+0x1a>
 8005d7c:	f7ff fa08 	bl	8005190 <__errno>
 8005d80:	2309      	movs	r3, #9
 8005d82:	6003      	str	r3, [r0, #0]
 8005d84:	f04f 30ff 	mov.w	r0, #4294967295
 8005d88:	bd38      	pop	{r3, r4, r5, pc}
 8005d8a:	3d01      	subs	r5, #1
 8005d8c:	2d01      	cmp	r5, #1
 8005d8e:	d809      	bhi.n	8005da4 <_close+0x34>
 8005d90:	4b07      	ldr	r3, [pc, #28]	@ (8005db0 <_close+0x40>)
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d104      	bne.n	8005da4 <_close+0x34>
 8005d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9e:	6023      	str	r3, [r4, #0]
 8005da0:	2000      	movs	r0, #0
 8005da2:	e7f1      	b.n	8005d88 <_close+0x18>
 8005da4:	6820      	ldr	r0, [r4, #0]
 8005da6:	f7ff ffd6 	bl	8005d56 <_swiclose>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d0f5      	beq.n	8005d9a <_close+0x2a>
 8005dae:	e7eb      	b.n	8005d88 <_close+0x18>
 8005db0:	200046ec 	.word	0x200046ec

08005db4 <_swistat>:
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	460c      	mov	r4, r1
 8005db8:	f7ff ff08 	bl	8005bcc <findslot>
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	b930      	cbnz	r0, 8005dce <_swistat+0x1a>
 8005dc0:	f7ff f9e6 	bl	8005190 <__errno>
 8005dc4:	2309      	movs	r3, #9
 8005dc6:	6003      	str	r3, [r0, #0]
 8005dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dcc:	bd70      	pop	{r4, r5, r6, pc}
 8005dce:	6863      	ldr	r3, [r4, #4]
 8005dd0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005dd4:	6063      	str	r3, [r4, #4]
 8005dd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dda:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005ddc:	260c      	movs	r6, #12
 8005dde:	4630      	mov	r0, r6
 8005de0:	4629      	mov	r1, r5
 8005de2:	beab      	bkpt	0x00ab
 8005de4:	4605      	mov	r5, r0
 8005de6:	4628      	mov	r0, r5
 8005de8:	f7ff ff18 	bl	8005c1c <checkerror>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d0eb      	beq.n	8005dc8 <_swistat+0x14>
 8005df0:	6120      	str	r0, [r4, #16]
 8005df2:	2000      	movs	r0, #0
 8005df4:	e7ea      	b.n	8005dcc <_swistat+0x18>

08005df6 <_fstat>:
 8005df6:	460b      	mov	r3, r1
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	2258      	movs	r2, #88	@ 0x58
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff f920 	bl	8005046 <memset>
 8005e06:	4601      	mov	r1, r0
 8005e08:	4620      	mov	r0, r4
 8005e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e0e:	f7ff bfd1 	b.w	8005db4 <_swistat>

08005e12 <_stat>:
 8005e12:	b538      	push	{r3, r4, r5, lr}
 8005e14:	460d      	mov	r5, r1
 8005e16:	4604      	mov	r4, r0
 8005e18:	2258      	movs	r2, #88	@ 0x58
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	f7ff f912 	bl	8005046 <memset>
 8005e22:	4620      	mov	r0, r4
 8005e24:	2100      	movs	r1, #0
 8005e26:	f000 f811 	bl	8005e4c <_swiopen>
 8005e2a:	1c43      	adds	r3, r0, #1
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	d00b      	beq.n	8005e48 <_stat+0x36>
 8005e30:	686b      	ldr	r3, [r5, #4]
 8005e32:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005e36:	606b      	str	r3, [r5, #4]
 8005e38:	4629      	mov	r1, r5
 8005e3a:	f7ff ffbb 	bl	8005db4 <_swistat>
 8005e3e:	4605      	mov	r5, r0
 8005e40:	4620      	mov	r0, r4
 8005e42:	f7ff ff95 	bl	8005d70 <_close>
 8005e46:	462c      	mov	r4, r5
 8005e48:	4620      	mov	r0, r4
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}

08005e4c <_swiopen>:
 8005e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e50:	4f29      	ldr	r7, [pc, #164]	@ (8005ef8 <_swiopen+0xac>)
 8005e52:	b096      	sub	sp, #88	@ 0x58
 8005e54:	4682      	mov	sl, r0
 8005e56:	460e      	mov	r6, r1
 8005e58:	2400      	movs	r4, #0
 8005e5a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8005e64:	d00c      	beq.n	8005e80 <_swiopen+0x34>
 8005e66:	3401      	adds	r4, #1
 8005e68:	2c14      	cmp	r4, #20
 8005e6a:	d1f6      	bne.n	8005e5a <_swiopen+0xe>
 8005e6c:	f7ff f990 	bl	8005190 <__errno>
 8005e70:	2318      	movs	r3, #24
 8005e72:	6003      	str	r3, [r0, #0]
 8005e74:	f04f 34ff 	mov.w	r4, #4294967295
 8005e78:	4620      	mov	r0, r4
 8005e7a:	b016      	add	sp, #88	@ 0x58
 8005e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e80:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8005e84:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005e88:	46e9      	mov	r9, sp
 8005e8a:	d109      	bne.n	8005ea0 <_swiopen+0x54>
 8005e8c:	4649      	mov	r1, r9
 8005e8e:	4650      	mov	r0, sl
 8005e90:	f7ff ffbf 	bl	8005e12 <_stat>
 8005e94:	3001      	adds	r0, #1
 8005e96:	d003      	beq.n	8005ea0 <_swiopen+0x54>
 8005e98:	f7ff f97a 	bl	8005190 <__errno>
 8005e9c:	2311      	movs	r3, #17
 8005e9e:	e7e8      	b.n	8005e72 <_swiopen+0x26>
 8005ea0:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8005ea4:	f240 6301 	movw	r3, #1537	@ 0x601
 8005ea8:	07b2      	lsls	r2, r6, #30
 8005eaa:	bf48      	it	mi
 8005eac:	f045 0502 	orrmi.w	r5, r5, #2
 8005eb0:	421e      	tst	r6, r3
 8005eb2:	bf18      	it	ne
 8005eb4:	f045 0504 	orrne.w	r5, r5, #4
 8005eb8:	0733      	lsls	r3, r6, #28
 8005eba:	bf48      	it	mi
 8005ebc:	f025 0504 	bicmi.w	r5, r5, #4
 8005ec0:	4650      	mov	r0, sl
 8005ec2:	bf48      	it	mi
 8005ec4:	f045 0508 	orrmi.w	r5, r5, #8
 8005ec8:	f8cd a000 	str.w	sl, [sp]
 8005ecc:	f7fa f9e0 	bl	8000290 <strlen>
 8005ed0:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8005ed4:	2501      	movs	r5, #1
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	4649      	mov	r1, r9
 8005eda:	beab      	bkpt	0x00ab
 8005edc:	4605      	mov	r5, r0
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	db05      	blt.n	8005eee <_swiopen+0xa2>
 8005ee2:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8005ee6:	4447      	add	r7, r8
 8005ee8:	2300      	movs	r3, #0
 8005eea:	607b      	str	r3, [r7, #4]
 8005eec:	e7c4      	b.n	8005e78 <_swiopen+0x2c>
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f7ff fe86 	bl	8005c00 <error>
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	e7bf      	b.n	8005e78 <_swiopen+0x2c>
 8005ef8:	200046ec 	.word	0x200046ec

08005efc <_get_semihosting_exts>:
 8005efc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f00:	4606      	mov	r6, r0
 8005f02:	460f      	mov	r7, r1
 8005f04:	4829      	ldr	r0, [pc, #164]	@ (8005fac <_get_semihosting_exts+0xb0>)
 8005f06:	2100      	movs	r1, #0
 8005f08:	4615      	mov	r5, r2
 8005f0a:	f7ff ff9f 	bl	8005e4c <_swiopen>
 8005f0e:	462a      	mov	r2, r5
 8005f10:	4604      	mov	r4, r0
 8005f12:	2100      	movs	r1, #0
 8005f14:	4630      	mov	r0, r6
 8005f16:	f7ff f896 	bl	8005046 <memset>
 8005f1a:	1c63      	adds	r3, r4, #1
 8005f1c:	d014      	beq.n	8005f48 <_get_semihosting_exts+0x4c>
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f7ff fe54 	bl	8005bcc <findslot>
 8005f24:	f04f 080c 	mov.w	r8, #12
 8005f28:	4681      	mov	r9, r0
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	beab      	bkpt	0x00ab
 8005f30:	4680      	mov	r8, r0
 8005f32:	4640      	mov	r0, r8
 8005f34:	f7ff fe72 	bl	8005c1c <checkerror>
 8005f38:	2803      	cmp	r0, #3
 8005f3a:	dd02      	ble.n	8005f42 <_get_semihosting_exts+0x46>
 8005f3c:	1ec3      	subs	r3, r0, #3
 8005f3e:	42ab      	cmp	r3, r5
 8005f40:	dc07      	bgt.n	8005f52 <_get_semihosting_exts+0x56>
 8005f42:	4620      	mov	r0, r4
 8005f44:	f7ff ff14 	bl	8005d70 <_close>
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	b003      	add	sp, #12
 8005f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f52:	2204      	movs	r2, #4
 8005f54:	eb0d 0102 	add.w	r1, sp, r2
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f7ff fe74 	bl	8005c46 <_read>
 8005f5e:	2803      	cmp	r0, #3
 8005f60:	ddef      	ble.n	8005f42 <_get_semihosting_exts+0x46>
 8005f62:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005f66:	2b53      	cmp	r3, #83	@ 0x53
 8005f68:	d1eb      	bne.n	8005f42 <_get_semihosting_exts+0x46>
 8005f6a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005f6e:	2b48      	cmp	r3, #72	@ 0x48
 8005f70:	d1e7      	bne.n	8005f42 <_get_semihosting_exts+0x46>
 8005f72:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005f76:	2b46      	cmp	r3, #70	@ 0x46
 8005f78:	d1e3      	bne.n	8005f42 <_get_semihosting_exts+0x46>
 8005f7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005f7e:	2b42      	cmp	r3, #66	@ 0x42
 8005f80:	d1df      	bne.n	8005f42 <_get_semihosting_exts+0x46>
 8005f82:	2201      	movs	r2, #1
 8005f84:	4639      	mov	r1, r7
 8005f86:	4620      	mov	r0, r4
 8005f88:	f7ff fe77 	bl	8005c7a <_swilseek>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	dbd8      	blt.n	8005f42 <_get_semihosting_exts+0x46>
 8005f90:	462a      	mov	r2, r5
 8005f92:	4631      	mov	r1, r6
 8005f94:	4620      	mov	r0, r4
 8005f96:	f7ff fe56 	bl	8005c46 <_read>
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f7ff fee7 	bl	8005d70 <_close>
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	f7ff fe3a 	bl	8005c1c <checkerror>
 8005fa8:	e7d0      	b.n	8005f4c <_get_semihosting_exts+0x50>
 8005faa:	bf00      	nop
 8005fac:	08006223 	.word	0x08006223

08005fb0 <initialise_semihosting_exts>:
 8005fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fb2:	4d0a      	ldr	r5, [pc, #40]	@ (8005fdc <initialise_semihosting_exts+0x2c>)
 8005fb4:	4c0a      	ldr	r4, [pc, #40]	@ (8005fe0 <initialise_semihosting_exts+0x30>)
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	2201      	movs	r2, #1
 8005fba:	a801      	add	r0, sp, #4
 8005fbc:	6029      	str	r1, [r5, #0]
 8005fbe:	6022      	str	r2, [r4, #0]
 8005fc0:	f7ff ff9c 	bl	8005efc <_get_semihosting_exts>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	dd07      	ble.n	8005fd8 <initialise_semihosting_exts+0x28>
 8005fc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005fcc:	f003 0201 	and.w	r2, r3, #1
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	602a      	str	r2, [r5, #0]
 8005fd6:	6023      	str	r3, [r4, #0]
 8005fd8:	b003      	add	sp, #12
 8005fda:	bd30      	pop	{r4, r5, pc}
 8005fdc:	20000070 	.word	0x20000070
 8005fe0:	2000006c 	.word	0x2000006c

08005fe4 <_has_ext_stdout_stderr>:
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	4c04      	ldr	r4, [pc, #16]	@ (8005ff8 <_has_ext_stdout_stderr+0x14>)
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	da01      	bge.n	8005ff2 <_has_ext_stdout_stderr+0xe>
 8005fee:	f7ff ffdf 	bl	8005fb0 <initialise_semihosting_exts>
 8005ff2:	6820      	ldr	r0, [r4, #0]
 8005ff4:	bd10      	pop	{r4, pc}
 8005ff6:	bf00      	nop
 8005ff8:	2000006c 	.word	0x2000006c

08005ffc <initialise_monitor_handles>:
 8005ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006000:	b085      	sub	sp, #20
 8006002:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80060b4 <initialise_monitor_handles+0xb8>
 8006006:	f8cd 9004 	str.w	r9, [sp, #4]
 800600a:	2303      	movs	r3, #3
 800600c:	2400      	movs	r4, #0
 800600e:	9303      	str	r3, [sp, #12]
 8006010:	af01      	add	r7, sp, #4
 8006012:	9402      	str	r4, [sp, #8]
 8006014:	2501      	movs	r5, #1
 8006016:	4628      	mov	r0, r5
 8006018:	4639      	mov	r1, r7
 800601a:	beab      	bkpt	0x00ab
 800601c:	4605      	mov	r5, r0
 800601e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80060b8 <initialise_monitor_handles+0xbc>
 8006022:	4623      	mov	r3, r4
 8006024:	4c20      	ldr	r4, [pc, #128]	@ (80060a8 <initialise_monitor_handles+0xac>)
 8006026:	f8c8 5000 	str.w	r5, [r8]
 800602a:	f04f 32ff 	mov.w	r2, #4294967295
 800602e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006032:	3301      	adds	r3, #1
 8006034:	2b14      	cmp	r3, #20
 8006036:	d1fa      	bne.n	800602e <initialise_monitor_handles+0x32>
 8006038:	f7ff ffd4 	bl	8005fe4 <_has_ext_stdout_stderr>
 800603c:	4d1b      	ldr	r5, [pc, #108]	@ (80060ac <initialise_monitor_handles+0xb0>)
 800603e:	b1d0      	cbz	r0, 8006076 <initialise_monitor_handles+0x7a>
 8006040:	f04f 0a03 	mov.w	sl, #3
 8006044:	2304      	movs	r3, #4
 8006046:	f8cd 9004 	str.w	r9, [sp, #4]
 800604a:	2601      	movs	r6, #1
 800604c:	f8cd a00c 	str.w	sl, [sp, #12]
 8006050:	9302      	str	r3, [sp, #8]
 8006052:	4630      	mov	r0, r6
 8006054:	4639      	mov	r1, r7
 8006056:	beab      	bkpt	0x00ab
 8006058:	4683      	mov	fp, r0
 800605a:	4b15      	ldr	r3, [pc, #84]	@ (80060b0 <initialise_monitor_handles+0xb4>)
 800605c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006060:	f8c3 b000 	str.w	fp, [r3]
 8006064:	2308      	movs	r3, #8
 8006066:	f8cd a00c 	str.w	sl, [sp, #12]
 800606a:	9302      	str	r3, [sp, #8]
 800606c:	4630      	mov	r0, r6
 800606e:	4639      	mov	r1, r7
 8006070:	beab      	bkpt	0x00ab
 8006072:	4606      	mov	r6, r0
 8006074:	602e      	str	r6, [r5, #0]
 8006076:	682b      	ldr	r3, [r5, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	bf02      	ittt	eq
 800607c:	4b0c      	ldreq	r3, [pc, #48]	@ (80060b0 <initialise_monitor_handles+0xb4>)
 800607e:	681b      	ldreq	r3, [r3, #0]
 8006080:	602b      	streq	r3, [r5, #0]
 8006082:	2600      	movs	r6, #0
 8006084:	f8d8 3000 	ldr.w	r3, [r8]
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	6066      	str	r6, [r4, #4]
 800608c:	f7ff ffaa 	bl	8005fe4 <_has_ext_stdout_stderr>
 8006090:	b130      	cbz	r0, 80060a0 <initialise_monitor_handles+0xa4>
 8006092:	4b07      	ldr	r3, [pc, #28]	@ (80060b0 <initialise_monitor_handles+0xb4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800609a:	682b      	ldr	r3, [r5, #0]
 800609c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80060a0:	b005      	add	sp, #20
 80060a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a6:	bf00      	nop
 80060a8:	200046ec 	.word	0x200046ec
 80060ac:	200046e0 	.word	0x200046e0
 80060b0:	200046e4 	.word	0x200046e4
 80060b4:	08006239 	.word	0x08006239
 80060b8:	200046e8 	.word	0x200046e8

080060bc <_isatty>:
 80060bc:	b570      	push	{r4, r5, r6, lr}
 80060be:	f7ff fd85 	bl	8005bcc <findslot>
 80060c2:	2409      	movs	r4, #9
 80060c4:	4605      	mov	r5, r0
 80060c6:	b920      	cbnz	r0, 80060d2 <_isatty+0x16>
 80060c8:	f7ff f862 	bl	8005190 <__errno>
 80060cc:	6004      	str	r4, [r0, #0]
 80060ce:	2000      	movs	r0, #0
 80060d0:	bd70      	pop	{r4, r5, r6, pc}
 80060d2:	4620      	mov	r0, r4
 80060d4:	4629      	mov	r1, r5
 80060d6:	beab      	bkpt	0x00ab
 80060d8:	4604      	mov	r4, r0
 80060da:	2c01      	cmp	r4, #1
 80060dc:	4620      	mov	r0, r4
 80060de:	d0f7      	beq.n	80060d0 <_isatty+0x14>
 80060e0:	f7ff f856 	bl	8005190 <__errno>
 80060e4:	2513      	movs	r5, #19
 80060e6:	4604      	mov	r4, r0
 80060e8:	2600      	movs	r6, #0
 80060ea:	4628      	mov	r0, r5
 80060ec:	4631      	mov	r1, r6
 80060ee:	beab      	bkpt	0x00ab
 80060f0:	4605      	mov	r5, r0
 80060f2:	6025      	str	r5, [r4, #0]
 80060f4:	e7eb      	b.n	80060ce <_isatty+0x12>
	...

080060f8 <_init>:
 80060f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fa:	bf00      	nop
 80060fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fe:	bc08      	pop	{r3}
 8006100:	469e      	mov	lr, r3
 8006102:	4770      	bx	lr

08006104 <_fini>:
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	bf00      	nop
 8006108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610a:	bc08      	pop	{r3}
 800610c:	469e      	mov	lr, r3
 800610e:	4770      	bx	lr
