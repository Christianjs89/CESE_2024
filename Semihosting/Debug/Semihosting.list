
Semihosting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fc4  08003fc4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003fc4  08003fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fcc  08003fcc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fcc  08003fcc  00013fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fd0  08003fd0  00013fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000099c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a0c  20000a0c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000df4b  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001cea  00000000  00000000  0002e02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b30  00000000  00000000  0002fd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008a2  00000000  00000000  00030848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024279  00000000  00000000  000310ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000cf8b  00000000  00000000  00055363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000da262  00000000  00000000  000622ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000038e8  00000000  00000000  0013c550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0013fe38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003f6c 	.word	0x08003f6c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08003f6c 	.word	0x08003f6c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80004fc:	f003 fcba 	bl	8003e74 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fc04 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f812 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f920 	bl	800074c <MX_GPIO_Init>
  MX_ETH_Init();
 800050c:	f000 f878 	bl	8000600 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000510:	f000 f8c4 	bl	800069c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000514:	f000 f8ec 	bl	80006f0 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("hello world\n");
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <main+0x30>)
 800051a:	f002 feef 	bl	80032fc <puts>
	  HAL_Delay(1000);
 800051e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000522:	f000 fc65 	bl	8000df0 <HAL_Delay>
	  printf("hello world\n");
 8000526:	e7f7      	b.n	8000518 <main+0x20>
 8000528:	08003f84 	.word	0x08003f84

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f002 ffbe 	bl	80034bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <SystemClock_Config+0xd0>)
 8000576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800058c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800059c:	2304      	movs	r3, #4
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005a0:	23a8      	movs	r3, #168	; 0xa8
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a8:	2307      	movs	r3, #7
 80005aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fb31 	bl	8001c18 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005bc:	f000 f974 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2302      	movs	r3, #2
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2105      	movs	r1, #5
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fd92 	bl	8002108 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ea:	f000 f95d 	bl	80008a8 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_ETH_Init+0x84>)
 8000606:	4a20      	ldr	r2, [pc, #128]	; (8000688 <MX_ETH_Init+0x88>)
 8000608:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <MX_ETH_Init+0x8c>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_ETH_Init+0x8c>)
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_ETH_Init+0x8c>)
 8000618:	22e1      	movs	r2, #225	; 0xe1
 800061a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_ETH_Init+0x8c>)
 800061e:	2200      	movs	r2, #0
 8000620:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_ETH_Init+0x8c>)
 8000624:	2200      	movs	r2, #0
 8000626:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_ETH_Init+0x8c>)
 800062a:	2200      	movs	r2, #0
 800062c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_ETH_Init+0x84>)
 8000630:	4a16      	ldr	r2, [pc, #88]	; (800068c <MX_ETH_Init+0x8c>)
 8000632:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_ETH_Init+0x84>)
 8000636:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800063a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ETH_Init+0x84>)
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <MX_ETH_Init+0x90>)
 8000640:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_ETH_Init+0x84>)
 8000644:	4a13      	ldr	r2, [pc, #76]	; (8000694 <MX_ETH_Init+0x94>)
 8000646:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_ETH_Init+0x84>)
 800064a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800064e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <MX_ETH_Init+0x84>)
 8000652:	f000 fcd7 	bl	8001004 <HAL_ETH_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800065c:	f000 f924 	bl	80008a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000660:	2238      	movs	r2, #56	; 0x38
 8000662:	2100      	movs	r1, #0
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <MX_ETH_Init+0x98>)
 8000666:	f002 ff29 	bl	80034bc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_ETH_Init+0x98>)
 800066c:	2221      	movs	r2, #33	; 0x21
 800066e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_ETH_Init+0x98>)
 8000672:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000676:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_ETH_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000204 	.word	0x20000204
 8000688:	40028000 	.word	0x40028000
 800068c:	20000804 	.word	0x20000804
 8000690:	20000164 	.word	0x20000164
 8000694:	200000c4 	.word	0x200000c4
 8000698:	2000008c 	.word	0x2000008c

0800069c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_USART3_UART_Init+0x50>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_USART3_UART_Init+0x4c>)
 80006d4:	f001 ff38 	bl	8002548 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006de:	f000 f8e3 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200002b4 	.word	0x200002b4
 80006ec:	40004800 	.word	0x40004800

080006f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fe:	2204      	movs	r2, #4
 8000700:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000704:	2202      	movs	r2, #2
 8000706:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000710:	2202      	movs	r2, #2
 8000712:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000716:	2201      	movs	r2, #1
 8000718:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000728:	2201      	movs	r2, #1
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000734:	f001 f953 	bl	80019de <HAL_PCD_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800073e:	f000 f8b3 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200002f8 	.word	0x200002f8

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	; 0x30
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	4b4c      	ldr	r3, [pc, #304]	; (8000898 <MX_GPIO_Init+0x14c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a4b      	ldr	r2, [pc, #300]	; (8000898 <MX_GPIO_Init+0x14c>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b49      	ldr	r3, [pc, #292]	; (8000898 <MX_GPIO_Init+0x14c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	61bb      	str	r3, [r7, #24]
 800077c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	4b45      	ldr	r3, [pc, #276]	; (8000898 <MX_GPIO_Init+0x14c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a44      	ldr	r2, [pc, #272]	; (8000898 <MX_GPIO_Init+0x14c>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b42      	ldr	r3, [pc, #264]	; (8000898 <MX_GPIO_Init+0x14c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b3e      	ldr	r3, [pc, #248]	; (8000898 <MX_GPIO_Init+0x14c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a3d      	ldr	r2, [pc, #244]	; (8000898 <MX_GPIO_Init+0x14c>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b3b      	ldr	r3, [pc, #236]	; (8000898 <MX_GPIO_Init+0x14c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b37      	ldr	r3, [pc, #220]	; (8000898 <MX_GPIO_Init+0x14c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a36      	ldr	r2, [pc, #216]	; (8000898 <MX_GPIO_Init+0x14c>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b34      	ldr	r3, [pc, #208]	; (8000898 <MX_GPIO_Init+0x14c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b30      	ldr	r3, [pc, #192]	; (8000898 <MX_GPIO_Init+0x14c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a2f      	ldr	r2, [pc, #188]	; (8000898 <MX_GPIO_Init+0x14c>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <MX_GPIO_Init+0x14c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a28      	ldr	r2, [pc, #160]	; (8000898 <MX_GPIO_Init+0x14c>)
 80007f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_GPIO_Init+0x14c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000810:	4822      	ldr	r0, [pc, #136]	; (800089c <MX_GPIO_Init+0x150>)
 8000812:	f001 f8cb 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2140      	movs	r1, #64	; 0x40
 800081a:	4821      	ldr	r0, [pc, #132]	; (80008a0 <MX_GPIO_Init+0x154>)
 800081c:	f001 f8c6 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000826:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	481b      	ldr	r0, [pc, #108]	; (80008a4 <MX_GPIO_Init+0x158>)
 8000838:	f000 ff0c 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800083c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4811      	ldr	r0, [pc, #68]	; (800089c <MX_GPIO_Init+0x150>)
 8000856:	f000 fefd 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800085a:	2340      	movs	r3, #64	; 0x40
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	480b      	ldr	r0, [pc, #44]	; (80008a0 <MX_GPIO_Init+0x154>)
 8000872:	f000 feef 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_GPIO_Init+0x154>)
 800088a:	f000 fee3 	bl	8001654 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088e:	bf00      	nop
 8000890:	3730      	adds	r7, #48	; 0x30
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	40020400 	.word	0x40020400
 80008a0:	40021800 	.word	0x40021800
 80008a4:	40020800 	.word	0x40020800

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <Error_Handler+0x8>
	...

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <HAL_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <HAL_MspInit+0x4c>)
 80008c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <HAL_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_MspInit+0x4c>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <HAL_MspInit+0x4c>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e4:	6413      	str	r3, [r2, #64]	; 0x40
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800

08000904 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a55      	ldr	r2, [pc, #340]	; (8000a78 <HAL_ETH_MspInit+0x174>)
 8000922:	4293      	cmp	r3, r2
 8000924:	f040 80a4 	bne.w	8000a70 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
 800092c:	4b53      	ldr	r3, [pc, #332]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000930:	4a52      	ldr	r2, [pc, #328]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 8000932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000936:	6313      	str	r3, [r2, #48]	; 0x30
 8000938:	4b50      	ldr	r3, [pc, #320]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000940:	623b      	str	r3, [r7, #32]
 8000942:	6a3b      	ldr	r3, [r7, #32]
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
 8000948:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4a4b      	ldr	r2, [pc, #300]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 800094e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000952:	6313      	str	r3, [r2, #48]	; 0x30
 8000954:	4b49      	ldr	r3, [pc, #292]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800095c:	61fb      	str	r3, [r7, #28]
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	4b45      	ldr	r3, [pc, #276]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a44      	ldr	r2, [pc, #272]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 800096a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
 8000970:	4b42      	ldr	r3, [pc, #264]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000984:	4a3d      	ldr	r2, [pc, #244]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	6313      	str	r3, [r2, #48]	; 0x30
 800098c:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	617b      	str	r3, [r7, #20]
 8000996:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	4a36      	ldr	r2, [pc, #216]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6313      	str	r3, [r2, #48]	; 0x30
 80009a8:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	4a2f      	ldr	r2, [pc, #188]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 80009be:	f043 0302 	orr.w	r3, r3, #2
 80009c2:	6313      	str	r3, [r2, #48]	; 0x30
 80009c4:	4b2d      	ldr	r3, [pc, #180]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	4a28      	ldr	r2, [pc, #160]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 80009da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009de:	6313      	str	r3, [r2, #48]	; 0x30
 80009e0:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <HAL_ETH_MspInit+0x178>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009ec:	2332      	movs	r3, #50	; 0x32
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009fc:	230b      	movs	r3, #11
 80009fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	481e      	ldr	r0, [pc, #120]	; (8000a80 <HAL_ETH_MspInit+0x17c>)
 8000a08:	f000 fe24 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a0c:	2386      	movs	r3, #134	; 0x86
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a1c:	230b      	movs	r3, #11
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	4817      	ldr	r0, [pc, #92]	; (8000a84 <HAL_ETH_MspInit+0x180>)
 8000a28:	f000 fe14 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a3e:	230b      	movs	r3, #11
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	4619      	mov	r1, r3
 8000a48:	480f      	ldr	r0, [pc, #60]	; (8000a88 <HAL_ETH_MspInit+0x184>)
 8000a4a:	f000 fe03 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a60:	230b      	movs	r3, #11
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4808      	ldr	r0, [pc, #32]	; (8000a8c <HAL_ETH_MspInit+0x188>)
 8000a6c:	f000 fdf2 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000a70:	bf00      	nop
 8000a72:	3738      	adds	r7, #56	; 0x38
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40028000 	.word	0x40028000
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020800 	.word	0x40020800
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	40021800 	.word	0x40021800

08000a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <HAL_UART_MspInit+0x84>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d12c      	bne.n	8000b0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000afc:	2307      	movs	r3, #7
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <HAL_UART_MspInit+0x8c>)
 8000b08:	f000 fda4 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40004800 	.word	0x40004800
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020c00 	.word	0x40020c00

08000b20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b40:	d13f      	bne.n	8000bc2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <HAL_PCD_MspInit+0xac>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <HAL_PCD_MspInit+0xac>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <HAL_PCD_MspInit+0xac>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b5e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b70:	230a      	movs	r3, #10
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4815      	ldr	r0, [pc, #84]	; (8000bd0 <HAL_PCD_MspInit+0xb0>)
 8000b7c:	f000 fd6a 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <HAL_PCD_MspInit+0xb0>)
 8000b96:	f000 fd5d 	bl	8001654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_PCD_MspInit+0xac>)
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <HAL_PCD_MspInit+0xac>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_PCD_MspInit+0xac>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_PCD_MspInit+0xac>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_PCD_MspInit+0xac>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 f8c6 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c30:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <_sbrk+0x5c>)
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <_sbrk+0x60>)
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <_sbrk+0x64>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <_sbrk+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c58:	f002 fc7e 	bl	8003558 <__errno>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	220c      	movs	r2, #12
 8000c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	e009      	b.n	8000c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <_sbrk+0x64>)
 8000c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20030000 	.word	0x20030000
 8000c88:	00000400 	.word	0x00000400
 8000c8c:	2000080c 	.word	0x2000080c
 8000c90:	20000a10 	.word	0x20000a10

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cbe:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd4:	4c0b      	ldr	r4, [pc, #44]	; (8000d04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ce2:	f7ff ffd7 	bl	8000c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f002 fc3d 	bl	8003564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cea:	f7ff fc05 	bl	80004f8 <main>
  bx  lr    
 8000cee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cf0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cfc:	08003fd4 	.word	0x08003fd4
  ldr r2, =_sbss
 8000d00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d04:	20000a0c 	.word	0x20000a0c

08000d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <HAL_Init+0x40>)
 8000d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_Init+0x40>)
 8000d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_Init+0x40>)
 8000d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f931 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 f808 	bl	8000d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff fdb8 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023c00 	.word	0x40023c00

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x54>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_InitTick+0x58>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f93b 	bl	8000fea <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00e      	b.n	8000d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d80a      	bhi.n	8000d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 f911 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <HAL_InitTick+0x5c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000810 	.word	0x20000810

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000810 	.word	0x20000810

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff ffee 	bl	8000dd8 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e16:	bf00      	nop
 8000e18:	f7ff ffde 	bl	8000dd8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff47 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff5c 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff8e 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffb0 	bl	8000f58 <SysTick_Config>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e06c      	b.n	80010f0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800101c:	2b00      	cmp	r3, #0
 800101e:	d106      	bne.n	800102e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2223      	movs	r2, #35	; 0x23
 8001024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff fc6b 	bl	8000904 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <HAL_ETH_Init+0xf4>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a30      	ldr	r2, [pc, #192]	; (80010f8 <HAL_ETH_Init+0xf4>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <HAL_ETH_Init+0xf4>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800104a:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <HAL_ETH_Init+0xf8>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	4a2b      	ldr	r2, [pc, #172]	; (80010fc <HAL_ETH_Init+0xf8>)
 8001050:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001054:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <HAL_ETH_Init+0xf8>)
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	4927      	ldr	r1, [pc, #156]	; (80010fc <HAL_ETH_Init+0xf8>)
 8001060:	4313      	orrs	r3, r2
 8001062:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <HAL_ETH_Init+0xf8>)
 8001066:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800107e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001080:	f7ff feaa 	bl	8000dd8 <HAL_GetTick>
 8001084:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001086:	e011      	b.n	80010ac <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001088:	f7ff fea6 	bl	8000dd8 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001096:	d909      	bls.n	80010ac <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2204      	movs	r2, #4
 800109c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	22e0      	movs	r2, #224	; 0xe0
 80010a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e021      	b.n	80010f0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1e4      	bne.n	8001088 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f958 	bl	8001374 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f9ff 	bl	80014c8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 fa55 	bl	800157a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	461a      	mov	r2, r3
 80010d6:	2100      	movs	r1, #0
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f9bd 	bl	8001458 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2210      	movs	r2, #16
 80010ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40013800 	.word	0x40013800

08001100 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	4b51      	ldr	r3, [pc, #324]	; (800125c <ETH_SetMACConfig+0x15c>)
 8001116:	4013      	ands	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	7c1b      	ldrb	r3, [r3, #16]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <ETH_SetMACConfig+0x28>
 8001122:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001126:	e000      	b.n	800112a <ETH_SetMACConfig+0x2a>
 8001128:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	7c5b      	ldrb	r3, [r3, #17]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <ETH_SetMACConfig+0x38>
 8001132:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001136:	e000      	b.n	800113a <ETH_SetMACConfig+0x3a>
 8001138:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800113a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001140:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	7fdb      	ldrb	r3, [r3, #31]
 8001146:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001148:	431a      	orrs	r2, r3
                        macconf->Speed |
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800114e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	7f92      	ldrb	r2, [r2, #30]
 8001154:	2a00      	cmp	r2, #0
 8001156:	d102      	bne.n	800115e <ETH_SetMACConfig+0x5e>
 8001158:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800115c:	e000      	b.n	8001160 <ETH_SetMACConfig+0x60>
 800115e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001160:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	7f1b      	ldrb	r3, [r3, #28]
 8001166:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001168:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800116e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	791b      	ldrb	r3, [r3, #4]
 8001174:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001176:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800117e:	2a00      	cmp	r2, #0
 8001180:	d102      	bne.n	8001188 <ETH_SetMACConfig+0x88>
 8001182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001186:	e000      	b.n	800118a <ETH_SetMACConfig+0x8a>
 8001188:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800118a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	7bdb      	ldrb	r3, [r3, #15]
 8001190:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001192:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001198:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80011a0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011a2:	4313      	orrs	r3, r2
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff fe18 	bl	8000df0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80011d6:	4013      	ands	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011de:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	d101      	bne.n	80011ee <ETH_SetMACConfig+0xee>
 80011ea:	2280      	movs	r2, #128	; 0x80
 80011ec:	e000      	b.n	80011f0 <ETH_SetMACConfig+0xf0>
 80011ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011f0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80011f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80011fe:	2a01      	cmp	r2, #1
 8001200:	d101      	bne.n	8001206 <ETH_SetMACConfig+0x106>
 8001202:	2208      	movs	r2, #8
 8001204:	e000      	b.n	8001208 <ETH_SetMACConfig+0x108>
 8001206:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001208:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001210:	2a01      	cmp	r2, #1
 8001212:	d101      	bne.n	8001218 <ETH_SetMACConfig+0x118>
 8001214:	2204      	movs	r2, #4
 8001216:	e000      	b.n	800121a <ETH_SetMACConfig+0x11a>
 8001218:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800121a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001222:	2a01      	cmp	r2, #1
 8001224:	d101      	bne.n	800122a <ETH_SetMACConfig+0x12a>
 8001226:	2202      	movs	r2, #2
 8001228:	e000      	b.n	800122c <ETH_SetMACConfig+0x12c>
 800122a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800122c:	4313      	orrs	r3, r2
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	4313      	orrs	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff fdd3 	bl	8000df0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	619a      	str	r2, [r3, #24]
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	ff20810f 	.word	0xff20810f

08001260 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4b3d      	ldr	r3, [pc, #244]	; (8001370 <ETH_SetDMAConfig+0x110>)
 800127a:	4013      	ands	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	7b1b      	ldrb	r3, [r3, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <ETH_SetDMAConfig+0x2c>
 8001286:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800128a:	e000      	b.n	800128e <ETH_SetDMAConfig+0x2e>
 800128c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	7b5b      	ldrb	r3, [r3, #13]
 8001292:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001294:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	7f52      	ldrb	r2, [r2, #29]
 800129a:	2a00      	cmp	r2, #0
 800129c:	d102      	bne.n	80012a4 <ETH_SetDMAConfig+0x44>
 800129e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012a2:	e000      	b.n	80012a6 <ETH_SetDMAConfig+0x46>
 80012a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80012a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	7b9b      	ldrb	r3, [r3, #14]
 80012ac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80012ae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80012b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	7f1b      	ldrb	r3, [r3, #28]
 80012ba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80012bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	7f9b      	ldrb	r3, [r3, #30]
 80012c2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80012c4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80012ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012d2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012d4:	4313      	orrs	r3, r2
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f7ff fd7a 	bl	8000df0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001304:	461a      	mov	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	791b      	ldrb	r3, [r3, #4]
 800130e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001314:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800131a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001320:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001328:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800132a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001332:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001338:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001342:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001346:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff fd4b 	bl	8000df0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001362:	461a      	mov	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	f8de3f23 	.word	0xf8de3f23

08001374 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b0a6      	sub	sp, #152	; 0x98
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800137c:	2301      	movs	r3, #1
 800137e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001382:	2301      	movs	r3, #1
 8001384:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001388:	2300      	movs	r3, #0
 800138a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001392:	2301      	movs	r3, #1
 8001394:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800139e:	2301      	movs	r3, #1
 80013a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80013b0:	2300      	movs	r3, #0
 80013b2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80013d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013da:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80013dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80013e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013ec:	4619      	mov	r1, r3
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fe86 	bl	8001100 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80013f4:	2301      	movs	r3, #1
 80013f6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80013f8:	2301      	movs	r3, #1
 80013fa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80013fc:	2301      	movs	r3, #1
 80013fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001402:	2301      	movs	r3, #1
 8001404:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800141a:	2301      	movs	r3, #1
 800141c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001420:	2301      	movs	r3, #1
 8001422:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001428:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800142a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800142e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001434:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001436:	2301      	movs	r3, #1
 8001438:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800143c:	2300      	movs	r3, #0
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	4619      	mov	r1, r3
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ff08 	bl	8001260 <ETH_SetDMAConfig>
}
 8001450:	bf00      	nop
 8001452:	3798      	adds	r7, #152	; 0x98
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3305      	adds	r3, #5
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	3204      	adds	r2, #4
 8001470:	7812      	ldrb	r2, [r2, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <ETH_MACAddressConfig+0x68>)
 800147a:	4413      	add	r3, r2
 800147c:	461a      	mov	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3303      	adds	r3, #3
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	061a      	lsls	r2, r3, #24
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3302      	adds	r3, #2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	041b      	lsls	r3, r3, #16
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3301      	adds	r3, #1
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	4313      	orrs	r3, r2
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	7812      	ldrb	r2, [r2, #0]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <ETH_MACAddressConfig+0x6c>)
 80014aa:	4413      	add	r3, r2
 80014ac:	461a      	mov	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	6013      	str	r3, [r2, #0]
}
 80014b2:	bf00      	nop
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40028040 	.word	0x40028040
 80014c4:	40028044 	.word	0x40028044

080014c8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e03e      	b.n	8001554 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68d9      	ldr	r1, [r3, #12]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	440b      	add	r3, r1
 80014e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	3206      	adds	r2, #6
 8001508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d80c      	bhi.n	8001538 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68d9      	ldr	r1, [r3, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	440b      	add	r3, r1
 8001530:	461a      	mov	r2, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	e004      	b.n	8001542 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	461a      	mov	r2, r3
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b03      	cmp	r3, #3
 8001558:	d9bd      	bls.n	80014d6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156c:	611a      	str	r2, [r3, #16]
}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800157a:	b480      	push	{r7}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	e046      	b.n	8001616 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6919      	ldr	r1, [r3, #16]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2200      	movs	r2, #0
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015c4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80015cc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80015da:	68b9      	ldr	r1, [r7, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	3212      	adds	r2, #18
 80015e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d80c      	bhi.n	8001606 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6919      	ldr	r1, [r3, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	461a      	mov	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	e004      	b.n	8001610 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	461a      	mov	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3301      	adds	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d9b5      	bls.n	8001588 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691a      	ldr	r2, [r3, #16]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001646:	60da      	str	r2, [r3, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	e177      	b.n	8001960 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001670:	2201      	movs	r2, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	429a      	cmp	r2, r3
 800168a:	f040 8166 	bne.w	800195a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b01      	cmp	r3, #1
 8001698:	d005      	beq.n	80016a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d130      	bne.n	8001708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 0201 	and.w	r2, r3, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b03      	cmp	r3, #3
 8001712:	d017      	beq.n	8001744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d123      	bne.n	8001798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	69b9      	ldr	r1, [r7, #24]
 8001794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80c0 	beq.w	800195a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b66      	ldr	r3, [pc, #408]	; (8001978 <HAL_GPIO_Init+0x324>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a65      	ldr	r2, [pc, #404]	; (8001978 <HAL_GPIO_Init+0x324>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b63      	ldr	r3, [pc, #396]	; (8001978 <HAL_GPIO_Init+0x324>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f6:	4a61      	ldr	r2, [pc, #388]	; (800197c <HAL_GPIO_Init+0x328>)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	220f      	movs	r2, #15
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a58      	ldr	r2, [pc, #352]	; (8001980 <HAL_GPIO_Init+0x32c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d037      	beq.n	8001892 <HAL_GPIO_Init+0x23e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a57      	ldr	r2, [pc, #348]	; (8001984 <HAL_GPIO_Init+0x330>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d031      	beq.n	800188e <HAL_GPIO_Init+0x23a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a56      	ldr	r2, [pc, #344]	; (8001988 <HAL_GPIO_Init+0x334>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d02b      	beq.n	800188a <HAL_GPIO_Init+0x236>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a55      	ldr	r2, [pc, #340]	; (800198c <HAL_GPIO_Init+0x338>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d025      	beq.n	8001886 <HAL_GPIO_Init+0x232>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a54      	ldr	r2, [pc, #336]	; (8001990 <HAL_GPIO_Init+0x33c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d01f      	beq.n	8001882 <HAL_GPIO_Init+0x22e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a53      	ldr	r2, [pc, #332]	; (8001994 <HAL_GPIO_Init+0x340>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d019      	beq.n	800187e <HAL_GPIO_Init+0x22a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a52      	ldr	r2, [pc, #328]	; (8001998 <HAL_GPIO_Init+0x344>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_GPIO_Init+0x226>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a51      	ldr	r2, [pc, #324]	; (800199c <HAL_GPIO_Init+0x348>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d00d      	beq.n	8001876 <HAL_GPIO_Init+0x222>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a50      	ldr	r2, [pc, #320]	; (80019a0 <HAL_GPIO_Init+0x34c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d007      	beq.n	8001872 <HAL_GPIO_Init+0x21e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4f      	ldr	r2, [pc, #316]	; (80019a4 <HAL_GPIO_Init+0x350>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d101      	bne.n	800186e <HAL_GPIO_Init+0x21a>
 800186a:	2309      	movs	r3, #9
 800186c:	e012      	b.n	8001894 <HAL_GPIO_Init+0x240>
 800186e:	230a      	movs	r3, #10
 8001870:	e010      	b.n	8001894 <HAL_GPIO_Init+0x240>
 8001872:	2308      	movs	r3, #8
 8001874:	e00e      	b.n	8001894 <HAL_GPIO_Init+0x240>
 8001876:	2307      	movs	r3, #7
 8001878:	e00c      	b.n	8001894 <HAL_GPIO_Init+0x240>
 800187a:	2306      	movs	r3, #6
 800187c:	e00a      	b.n	8001894 <HAL_GPIO_Init+0x240>
 800187e:	2305      	movs	r3, #5
 8001880:	e008      	b.n	8001894 <HAL_GPIO_Init+0x240>
 8001882:	2304      	movs	r3, #4
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x240>
 8001886:	2303      	movs	r3, #3
 8001888:	e004      	b.n	8001894 <HAL_GPIO_Init+0x240>
 800188a:	2302      	movs	r3, #2
 800188c:	e002      	b.n	8001894 <HAL_GPIO_Init+0x240>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_GPIO_Init+0x240>
 8001892:	2300      	movs	r3, #0
 8001894:	69fa      	ldr	r2, [r7, #28]
 8001896:	f002 0203 	and.w	r2, r2, #3
 800189a:	0092      	lsls	r2, r2, #2
 800189c:	4093      	lsls	r3, r2
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a4:	4935      	ldr	r1, [pc, #212]	; (800197c <HAL_GPIO_Init+0x328>)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b2:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <HAL_GPIO_Init+0x354>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018d6:	4a34      	ldr	r2, [pc, #208]	; (80019a8 <HAL_GPIO_Init+0x354>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018dc:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <HAL_GPIO_Init+0x354>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001900:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <HAL_GPIO_Init+0x354>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <HAL_GPIO_Init+0x354>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800192a:	4a1f      	ldr	r2, [pc, #124]	; (80019a8 <HAL_GPIO_Init+0x354>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_GPIO_Init+0x354>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <HAL_GPIO_Init+0x354>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3301      	adds	r3, #1
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	2b0f      	cmp	r3, #15
 8001964:	f67f ae84 	bls.w	8001670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40013800 	.word	0x40013800
 8001980:	40020000 	.word	0x40020000
 8001984:	40020400 	.word	0x40020400
 8001988:	40020800 	.word	0x40020800
 800198c:	40020c00 	.word	0x40020c00
 8001990:	40021000 	.word	0x40021000
 8001994:	40021400 	.word	0x40021400
 8001998:	40021800 	.word	0x40021800
 800199c:	40021c00 	.word	0x40021c00
 80019a0:	40022000 	.word	0x40022000
 80019a4:	40022400 	.word	0x40022400
 80019a8:	40013c00 	.word	0x40013c00

080019ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
 80019b8:	4613      	mov	r3, r2
 80019ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019bc:	787b      	ldrb	r3, [r7, #1]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019c8:	e003      	b.n	80019d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ca:	887b      	ldrh	r3, [r7, #2]
 80019cc:	041a      	lsls	r2, r3, #16
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	619a      	str	r2, [r3, #24]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e0:	b08f      	sub	sp, #60	; 0x3c
 80019e2:	af0a      	add	r7, sp, #40	; 0x28
 80019e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e10f      	b.n	8001c10 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d106      	bne.n	8001a10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff f888 	bl	8000b20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2203      	movs	r2, #3
 8001a14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f001 f8ad 	bl	8002b8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	687e      	ldr	r6, [r7, #4]
 8001a3c:	466d      	mov	r5, sp
 8001a3e:	f106 0410 	add.w	r4, r6, #16
 8001a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a52:	1d33      	adds	r3, r6, #4
 8001a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a56:	6838      	ldr	r0, [r7, #0]
 8001a58:	f001 f838 	bl	8002acc <USB_CoreInit>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2202      	movs	r2, #2
 8001a66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e0d0      	b.n	8001c10 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 f89b 	bl	8002bb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	e04a      	b.n	8001b16 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	333d      	adds	r3, #61	; 0x3d
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	333c      	adds	r3, #60	; 0x3c
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	b298      	uxth	r0, r3
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	3344      	adds	r3, #68	; 0x44
 8001abc:	4602      	mov	r2, r0
 8001abe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	3340      	adds	r3, #64	; 0x40
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3348      	adds	r3, #72	; 0x48
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ae8:	7bfa      	ldrb	r2, [r7, #15]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	334c      	adds	r3, #76	; 0x4c
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	3354      	adds	r3, #84	; 0x54
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	3301      	adds	r3, #1
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d3af      	bcc.n	8001a80 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e044      	b.n	8001bb0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b26:	7bfa      	ldrb	r2, [r7, #15]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b68:	7bfa      	ldrb	r2, [r7, #15]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b7e:	7bfa      	ldrb	r2, [r7, #15]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4413      	add	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	3301      	adds	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d3b5      	bcc.n	8001b26 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	687e      	ldr	r6, [r7, #4]
 8001bc2:	466d      	mov	r5, sp
 8001bc4:	f106 0410 	add.w	r4, r6, #16
 8001bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bd8:	1d33      	adds	r3, r6, #4
 8001bda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bdc:	6838      	ldr	r0, [r7, #0]
 8001bde:	f001 f833 	bl	8002c48 <USB_DevInit>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e00d      	b.n	8001c10 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f001 f9fe 	bl	800300a <USB_DevDisconnect>

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e267      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d075      	beq.n	8001d22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c36:	4b88      	ldr	r3, [pc, #544]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d00c      	beq.n	8001c5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c42:	4b85      	ldr	r3, [pc, #532]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d112      	bne.n	8001c74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c4e:	4b82      	ldr	r3, [pc, #520]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c5a:	d10b      	bne.n	8001c74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	4b7e      	ldr	r3, [pc, #504]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d05b      	beq.n	8001d20 <HAL_RCC_OscConfig+0x108>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d157      	bne.n	8001d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e242      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7c:	d106      	bne.n	8001c8c <HAL_RCC_OscConfig+0x74>
 8001c7e:	4b76      	ldr	r3, [pc, #472]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a75      	ldr	r2, [pc, #468]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e01d      	b.n	8001cc8 <HAL_RCC_OscConfig+0xb0>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x98>
 8001c96:	4b70      	ldr	r3, [pc, #448]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a6f      	ldr	r2, [pc, #444]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b6d      	ldr	r3, [pc, #436]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a6c      	ldr	r2, [pc, #432]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e00b      	b.n	8001cc8 <HAL_RCC_OscConfig+0xb0>
 8001cb0:	4b69      	ldr	r3, [pc, #420]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a68      	ldr	r2, [pc, #416]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	4b66      	ldr	r3, [pc, #408]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a65      	ldr	r2, [pc, #404]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d013      	beq.n	8001cf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff f882 	bl	8000dd8 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff f87e 	bl	8000dd8 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e207      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	4b5b      	ldr	r3, [pc, #364]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xc0>
 8001cf6:	e014      	b.n	8001d22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff f86e 	bl	8000dd8 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff f86a 	bl	8000dd8 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e1f3      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	4b51      	ldr	r3, [pc, #324]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0xe8>
 8001d1e:	e000      	b.n	8001d22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d063      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d2e:	4b4a      	ldr	r3, [pc, #296]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00b      	beq.n	8001d52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d3a:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d11c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d46:	4b44      	ldr	r3, [pc, #272]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d116      	bne.n	8001d80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d52:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d005      	beq.n	8001d6a <HAL_RCC_OscConfig+0x152>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d001      	beq.n	8001d6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e1c7      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4937      	ldr	r1, [pc, #220]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7e:	e03a      	b.n	8001df6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d020      	beq.n	8001dca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d88:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <HAL_RCC_OscConfig+0x244>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff f823 	bl	8000dd8 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d96:	f7ff f81f 	bl	8000dd8 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e1a8      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4925      	ldr	r1, [pc, #148]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	600b      	str	r3, [r1, #0]
 8001dc8:	e015      	b.n	8001df6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dca:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_RCC_OscConfig+0x244>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f802 	bl	8000dd8 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd8:	f7fe fffe 	bl	8000dd8 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e187      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d036      	beq.n	8001e70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d016      	beq.n	8001e38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_RCC_OscConfig+0x248>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e10:	f7fe ffe2 	bl	8000dd8 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e18:	f7fe ffde 	bl	8000dd8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e167      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x200>
 8001e36:	e01b      	b.n	8001e70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_OscConfig+0x248>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7fe ffcb 	bl	8000dd8 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e44:	e00e      	b.n	8001e64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e46:	f7fe ffc7 	bl	8000dd8 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d907      	bls.n	8001e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e150      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	42470000 	.word	0x42470000
 8001e60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e64:	4b88      	ldr	r3, [pc, #544]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1ea      	bne.n	8001e46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 8097 	beq.w	8001fac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e82:	4b81      	ldr	r3, [pc, #516]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10f      	bne.n	8001eae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	4b7d      	ldr	r3, [pc, #500]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	4a7c      	ldr	r2, [pc, #496]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9e:	4b7a      	ldr	r3, [pc, #488]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eae:	4b77      	ldr	r3, [pc, #476]	; (800208c <HAL_RCC_OscConfig+0x474>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d118      	bne.n	8001eec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eba:	4b74      	ldr	r3, [pc, #464]	; (800208c <HAL_RCC_OscConfig+0x474>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a73      	ldr	r2, [pc, #460]	; (800208c <HAL_RCC_OscConfig+0x474>)
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec6:	f7fe ff87 	bl	8000dd8 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ece:	f7fe ff83 	bl	8000dd8 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e10c      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	4b6a      	ldr	r3, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x474>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCC_OscConfig+0x2ea>
 8001ef4:	4b64      	ldr	r3, [pc, #400]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef8:	4a63      	ldr	r2, [pc, #396]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6713      	str	r3, [r2, #112]	; 0x70
 8001f00:	e01c      	b.n	8001f3c <HAL_RCC_OscConfig+0x324>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b05      	cmp	r3, #5
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x30c>
 8001f0a:	4b5f      	ldr	r3, [pc, #380]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0e:	4a5e      	ldr	r2, [pc, #376]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	6713      	str	r3, [r2, #112]	; 0x70
 8001f16:	4b5c      	ldr	r3, [pc, #368]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1a:	4a5b      	ldr	r2, [pc, #364]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6713      	str	r3, [r2, #112]	; 0x70
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_OscConfig+0x324>
 8001f24:	4b58      	ldr	r3, [pc, #352]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f28:	4a57      	ldr	r2, [pc, #348]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f2a:	f023 0301 	bic.w	r3, r3, #1
 8001f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f30:	4b55      	ldr	r3, [pc, #340]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f34:	4a54      	ldr	r2, [pc, #336]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f36:	f023 0304 	bic.w	r3, r3, #4
 8001f3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d015      	beq.n	8001f70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7fe ff48 	bl	8000dd8 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4a:	e00a      	b.n	8001f62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f4c:	f7fe ff44 	bl	8000dd8 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e0cb      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f62:	4b49      	ldr	r3, [pc, #292]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0ee      	beq.n	8001f4c <HAL_RCC_OscConfig+0x334>
 8001f6e:	e014      	b.n	8001f9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f70:	f7fe ff32 	bl	8000dd8 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f78:	f7fe ff2e 	bl	8000dd8 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e0b5      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8e:	4b3e      	ldr	r3, [pc, #248]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1ee      	bne.n	8001f78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f9a:	7dfb      	ldrb	r3, [r7, #23]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d105      	bne.n	8001fac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa0:	4b39      	ldr	r3, [pc, #228]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	4a38      	ldr	r2, [pc, #224]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001faa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 80a1 	beq.w	80020f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fb6:	4b34      	ldr	r3, [pc, #208]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d05c      	beq.n	800207c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d141      	bne.n	800204e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fca:	4b31      	ldr	r3, [pc, #196]	; (8002090 <HAL_RCC_OscConfig+0x478>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7fe ff02 	bl	8000dd8 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7fe fefe 	bl	8000dd8 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e087      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fea:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69da      	ldr	r2, [r3, #28]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	019b      	lsls	r3, r3, #6
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	085b      	lsrs	r3, r3, #1
 800200e:	3b01      	subs	r3, #1
 8002010:	041b      	lsls	r3, r3, #16
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	061b      	lsls	r3, r3, #24
 800201a:	491b      	ldr	r1, [pc, #108]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_RCC_OscConfig+0x478>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002026:	f7fe fed7 	bl	8000dd8 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202e:	f7fe fed3 	bl	8000dd8 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e05c      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x416>
 800204c:	e054      	b.n	80020f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_RCC_OscConfig+0x478>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7fe fec0 	bl	8000dd8 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205c:	f7fe febc 	bl	8000dd8 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e045      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_RCC_OscConfig+0x470>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x444>
 800207a:	e03d      	b.n	80020f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d107      	bne.n	8002094 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e038      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
 8002088:	40023800 	.word	0x40023800
 800208c:	40007000 	.word	0x40007000
 8002090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <HAL_RCC_OscConfig+0x4ec>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d028      	beq.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d121      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d11a      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020c4:	4013      	ands	r3, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d111      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	085b      	lsrs	r3, r3, #1
 80020dc:	3b01      	subs	r3, #1
 80020de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800

08002108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0cc      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b68      	ldr	r3, [pc, #416]	; (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d90c      	bls.n	8002144 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b65      	ldr	r3, [pc, #404]	; (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b63      	ldr	r3, [pc, #396]	; (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0b8      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d020      	beq.n	8002192 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800215c:	4b59      	ldr	r3, [pc, #356]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a58      	ldr	r2, [pc, #352]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002166:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002174:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4a52      	ldr	r2, [pc, #328]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800217e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002180:	4b50      	ldr	r3, [pc, #320]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	494d      	ldr	r1, [pc, #308]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d044      	beq.n	8002228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	4b47      	ldr	r3, [pc, #284]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d119      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e07f      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d003      	beq.n	80021c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c6:	4b3f      	ldr	r3, [pc, #252]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e06f      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e067      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b37      	ldr	r3, [pc, #220]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4934      	ldr	r1, [pc, #208]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f8:	f7fe fdee 	bl	8000dd8 <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7fe fdea 	bl	8000dd8 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e04f      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d20c      	bcs.n	8002250 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e032      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4916      	ldr	r1, [pc, #88]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	490e      	ldr	r1, [pc, #56]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800228e:	f000 f821 	bl	80022d4 <HAL_RCC_GetSysClockFreq>
 8002292:	4602      	mov	r2, r0
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	490a      	ldr	r1, [pc, #40]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	5ccb      	ldrb	r3, [r1, r3]
 80022a2:	fa22 f303 	lsr.w	r3, r2, r3
 80022a6:	4a09      	ldr	r2, [pc, #36]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_RCC_ClockConfig+0x1c8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe fd4e 	bl	8000d50 <HAL_InitTick>

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023c00 	.word	0x40023c00
 80022c4:	40023800 	.word	0x40023800
 80022c8:	08003f90 	.word	0x08003f90
 80022cc:	20000000 	.word	0x20000000
 80022d0:	20000004 	.word	0x20000004

080022d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022d8:	b094      	sub	sp, #80	; 0x50
 80022da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	647b      	str	r3, [r7, #68]	; 0x44
 80022e0:	2300      	movs	r3, #0
 80022e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022e4:	2300      	movs	r3, #0
 80022e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ec:	4b79      	ldr	r3, [pc, #484]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d00d      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x40>
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	f200 80e1 	bhi.w	80024c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x34>
 8002302:	2b04      	cmp	r3, #4
 8002304:	d003      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x3a>
 8002306:	e0db      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002308:	4b73      	ldr	r3, [pc, #460]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800230a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800230c:	e0db      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800230e:	4b73      	ldr	r3, [pc, #460]	; (80024dc <HAL_RCC_GetSysClockFreq+0x208>)
 8002310:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002312:	e0d8      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002314:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800231c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800231e:	4b6d      	ldr	r3, [pc, #436]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d063      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232a:	4b6a      	ldr	r3, [pc, #424]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	099b      	lsrs	r3, r3, #6
 8002330:	2200      	movs	r2, #0
 8002332:	63bb      	str	r3, [r7, #56]	; 0x38
 8002334:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800233c:	633b      	str	r3, [r7, #48]	; 0x30
 800233e:	2300      	movs	r3, #0
 8002340:	637b      	str	r3, [r7, #52]	; 0x34
 8002342:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002346:	4622      	mov	r2, r4
 8002348:	462b      	mov	r3, r5
 800234a:	f04f 0000 	mov.w	r0, #0
 800234e:	f04f 0100 	mov.w	r1, #0
 8002352:	0159      	lsls	r1, r3, #5
 8002354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002358:	0150      	lsls	r0, r2, #5
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4621      	mov	r1, r4
 8002360:	1a51      	subs	r1, r2, r1
 8002362:	6139      	str	r1, [r7, #16]
 8002364:	4629      	mov	r1, r5
 8002366:	eb63 0301 	sbc.w	r3, r3, r1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002378:	4659      	mov	r1, fp
 800237a:	018b      	lsls	r3, r1, #6
 800237c:	4651      	mov	r1, sl
 800237e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002382:	4651      	mov	r1, sl
 8002384:	018a      	lsls	r2, r1, #6
 8002386:	4651      	mov	r1, sl
 8002388:	ebb2 0801 	subs.w	r8, r2, r1
 800238c:	4659      	mov	r1, fp
 800238e:	eb63 0901 	sbc.w	r9, r3, r1
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800239e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023a6:	4690      	mov	r8, r2
 80023a8:	4699      	mov	r9, r3
 80023aa:	4623      	mov	r3, r4
 80023ac:	eb18 0303 	adds.w	r3, r8, r3
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	462b      	mov	r3, r5
 80023b4:	eb49 0303 	adc.w	r3, r9, r3
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023c6:	4629      	mov	r1, r5
 80023c8:	024b      	lsls	r3, r1, #9
 80023ca:	4621      	mov	r1, r4
 80023cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023d0:	4621      	mov	r1, r4
 80023d2:	024a      	lsls	r2, r1, #9
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023da:	2200      	movs	r2, #0
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023e4:	f7fd ff0a 	bl	80001fc <__aeabi_uldivmod>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4613      	mov	r3, r2
 80023ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023f0:	e058      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f2:	4b38      	ldr	r3, [pc, #224]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	099b      	lsrs	r3, r3, #6
 80023f8:	2200      	movs	r2, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	4611      	mov	r1, r2
 80023fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002402:	623b      	str	r3, [r7, #32]
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
 8002408:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800240c:	4642      	mov	r2, r8
 800240e:	464b      	mov	r3, r9
 8002410:	f04f 0000 	mov.w	r0, #0
 8002414:	f04f 0100 	mov.w	r1, #0
 8002418:	0159      	lsls	r1, r3, #5
 800241a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800241e:	0150      	lsls	r0, r2, #5
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4641      	mov	r1, r8
 8002426:	ebb2 0a01 	subs.w	sl, r2, r1
 800242a:	4649      	mov	r1, r9
 800242c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800243c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002440:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002444:	ebb2 040a 	subs.w	r4, r2, sl
 8002448:	eb63 050b 	sbc.w	r5, r3, fp
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	00eb      	lsls	r3, r5, #3
 8002456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800245a:	00e2      	lsls	r2, r4, #3
 800245c:	4614      	mov	r4, r2
 800245e:	461d      	mov	r5, r3
 8002460:	4643      	mov	r3, r8
 8002462:	18e3      	adds	r3, r4, r3
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	464b      	mov	r3, r9
 8002468:	eb45 0303 	adc.w	r3, r5, r3
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	e9d7 4500 	ldrd	r4, r5, [r7]
 800247a:	4629      	mov	r1, r5
 800247c:	028b      	lsls	r3, r1, #10
 800247e:	4621      	mov	r1, r4
 8002480:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002484:	4621      	mov	r1, r4
 8002486:	028a      	lsls	r2, r1, #10
 8002488:	4610      	mov	r0, r2
 800248a:	4619      	mov	r1, r3
 800248c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800248e:	2200      	movs	r2, #0
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	61fa      	str	r2, [r7, #28]
 8002494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002498:	f7fd feb0 	bl	80001fc <__aeabi_uldivmod>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4613      	mov	r3, r2
 80024a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	0c1b      	lsrs	r3, r3, #16
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	3301      	adds	r3, #1
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80024b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024be:	e002      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80024c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3750      	adds	r7, #80	; 0x50
 80024cc:	46bd      	mov	sp, r7
 80024ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800
 80024d8:	00f42400 	.word	0x00f42400
 80024dc:	007a1200 	.word	0x007a1200

080024e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000000 	.word	0x20000000

080024f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024fc:	f7ff fff0 	bl	80024e0 <HAL_RCC_GetHCLKFreq>
 8002500:	4602      	mov	r2, r0
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	0a9b      	lsrs	r3, r3, #10
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	4903      	ldr	r1, [pc, #12]	; (800251c <HAL_RCC_GetPCLK1Freq+0x24>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002514:	4618      	mov	r0, r3
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40023800 	.word	0x40023800
 800251c:	08003fa0 	.word	0x08003fa0

08002520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002524:	f7ff ffdc 	bl	80024e0 <HAL_RCC_GetHCLKFreq>
 8002528:	4602      	mov	r2, r0
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	0b5b      	lsrs	r3, r3, #13
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	4903      	ldr	r1, [pc, #12]	; (8002544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002536:	5ccb      	ldrb	r3, [r1, r3]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40023800 	.word	0x40023800
 8002544:	08003fa0 	.word	0x08003fa0

08002548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e03f      	b.n	80025da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe fa8e 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2224      	movs	r2, #36	; 0x24
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800258a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f829 	bl	80025e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e8:	b0c0      	sub	sp, #256	; 0x100
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002600:	68d9      	ldr	r1, [r3, #12]
 8002602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	ea40 0301 	orr.w	r3, r0, r1
 800260c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800260e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	431a      	orrs	r2, r3
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	431a      	orrs	r2, r3
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800263c:	f021 010c 	bic.w	r1, r1, #12
 8002640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800264a:	430b      	orrs	r3, r1
 800264c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800264e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800265a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265e:	6999      	ldr	r1, [r3, #24]
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	ea40 0301 	orr.w	r3, r0, r1
 800266a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800266c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b8f      	ldr	r3, [pc, #572]	; (80028b0 <UART_SetConfig+0x2cc>)
 8002674:	429a      	cmp	r2, r3
 8002676:	d005      	beq.n	8002684 <UART_SetConfig+0xa0>
 8002678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4b8d      	ldr	r3, [pc, #564]	; (80028b4 <UART_SetConfig+0x2d0>)
 8002680:	429a      	cmp	r2, r3
 8002682:	d104      	bne.n	800268e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002684:	f7ff ff4c 	bl	8002520 <HAL_RCC_GetPCLK2Freq>
 8002688:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800268c:	e003      	b.n	8002696 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800268e:	f7ff ff33 	bl	80024f8 <HAL_RCC_GetPCLK1Freq>
 8002692:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026a0:	f040 810c 	bne.w	80028bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026a8:	2200      	movs	r2, #0
 80026aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026b6:	4622      	mov	r2, r4
 80026b8:	462b      	mov	r3, r5
 80026ba:	1891      	adds	r1, r2, r2
 80026bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80026be:	415b      	adcs	r3, r3
 80026c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026c6:	4621      	mov	r1, r4
 80026c8:	eb12 0801 	adds.w	r8, r2, r1
 80026cc:	4629      	mov	r1, r5
 80026ce:	eb43 0901 	adc.w	r9, r3, r1
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e6:	4690      	mov	r8, r2
 80026e8:	4699      	mov	r9, r3
 80026ea:	4623      	mov	r3, r4
 80026ec:	eb18 0303 	adds.w	r3, r8, r3
 80026f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026f4:	462b      	mov	r3, r5
 80026f6:	eb49 0303 	adc.w	r3, r9, r3
 80026fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800270a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800270e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002712:	460b      	mov	r3, r1
 8002714:	18db      	adds	r3, r3, r3
 8002716:	653b      	str	r3, [r7, #80]	; 0x50
 8002718:	4613      	mov	r3, r2
 800271a:	eb42 0303 	adc.w	r3, r2, r3
 800271e:	657b      	str	r3, [r7, #84]	; 0x54
 8002720:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002724:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002728:	f7fd fd68 	bl	80001fc <__aeabi_uldivmod>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <UART_SetConfig+0x2d4>)
 8002732:	fba3 2302 	umull	r2, r3, r3, r2
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	011c      	lsls	r4, r3, #4
 800273a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800273e:	2200      	movs	r2, #0
 8002740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002744:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002748:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800274c:	4642      	mov	r2, r8
 800274e:	464b      	mov	r3, r9
 8002750:	1891      	adds	r1, r2, r2
 8002752:	64b9      	str	r1, [r7, #72]	; 0x48
 8002754:	415b      	adcs	r3, r3
 8002756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002758:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800275c:	4641      	mov	r1, r8
 800275e:	eb12 0a01 	adds.w	sl, r2, r1
 8002762:	4649      	mov	r1, r9
 8002764:	eb43 0b01 	adc.w	fp, r3, r1
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002774:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002778:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800277c:	4692      	mov	sl, r2
 800277e:	469b      	mov	fp, r3
 8002780:	4643      	mov	r3, r8
 8002782:	eb1a 0303 	adds.w	r3, sl, r3
 8002786:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800278a:	464b      	mov	r3, r9
 800278c:	eb4b 0303 	adc.w	r3, fp, r3
 8002790:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027a8:	460b      	mov	r3, r1
 80027aa:	18db      	adds	r3, r3, r3
 80027ac:	643b      	str	r3, [r7, #64]	; 0x40
 80027ae:	4613      	mov	r3, r2
 80027b0:	eb42 0303 	adc.w	r3, r2, r3
 80027b4:	647b      	str	r3, [r7, #68]	; 0x44
 80027b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027be:	f7fd fd1d 	bl	80001fc <__aeabi_uldivmod>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4611      	mov	r1, r2
 80027c8:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <UART_SetConfig+0x2d4>)
 80027ca:	fba3 2301 	umull	r2, r3, r3, r1
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	2264      	movs	r2, #100	; 0x64
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	1acb      	subs	r3, r1, r3
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027de:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <UART_SetConfig+0x2d4>)
 80027e0:	fba3 2302 	umull	r2, r3, r3, r2
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027ec:	441c      	add	r4, r3
 80027ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027f2:	2200      	movs	r2, #0
 80027f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002800:	4642      	mov	r2, r8
 8002802:	464b      	mov	r3, r9
 8002804:	1891      	adds	r1, r2, r2
 8002806:	63b9      	str	r1, [r7, #56]	; 0x38
 8002808:	415b      	adcs	r3, r3
 800280a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800280c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002810:	4641      	mov	r1, r8
 8002812:	1851      	adds	r1, r2, r1
 8002814:	6339      	str	r1, [r7, #48]	; 0x30
 8002816:	4649      	mov	r1, r9
 8002818:	414b      	adcs	r3, r1
 800281a:	637b      	str	r3, [r7, #52]	; 0x34
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002828:	4659      	mov	r1, fp
 800282a:	00cb      	lsls	r3, r1, #3
 800282c:	4651      	mov	r1, sl
 800282e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002832:	4651      	mov	r1, sl
 8002834:	00ca      	lsls	r2, r1, #3
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	4603      	mov	r3, r0
 800283c:	4642      	mov	r2, r8
 800283e:	189b      	adds	r3, r3, r2
 8002840:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002844:	464b      	mov	r3, r9
 8002846:	460a      	mov	r2, r1
 8002848:	eb42 0303 	adc.w	r3, r2, r3
 800284c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800285c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002860:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002864:	460b      	mov	r3, r1
 8002866:	18db      	adds	r3, r3, r3
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
 800286a:	4613      	mov	r3, r2
 800286c:	eb42 0303 	adc.w	r3, r2, r3
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002876:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800287a:	f7fd fcbf 	bl	80001fc <__aeabi_uldivmod>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <UART_SetConfig+0x2d4>)
 8002884:	fba3 1302 	umull	r1, r3, r3, r2
 8002888:	095b      	lsrs	r3, r3, #5
 800288a:	2164      	movs	r1, #100	; 0x64
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	3332      	adds	r3, #50	; 0x32
 8002896:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <UART_SetConfig+0x2d4>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	f003 0207 	and.w	r2, r3, #7
 80028a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4422      	add	r2, r4
 80028aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028ac:	e106      	b.n	8002abc <UART_SetConfig+0x4d8>
 80028ae:	bf00      	nop
 80028b0:	40011000 	.word	0x40011000
 80028b4:	40011400 	.word	0x40011400
 80028b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028c0:	2200      	movs	r2, #0
 80028c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028ce:	4642      	mov	r2, r8
 80028d0:	464b      	mov	r3, r9
 80028d2:	1891      	adds	r1, r2, r2
 80028d4:	6239      	str	r1, [r7, #32]
 80028d6:	415b      	adcs	r3, r3
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
 80028da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028de:	4641      	mov	r1, r8
 80028e0:	1854      	adds	r4, r2, r1
 80028e2:	4649      	mov	r1, r9
 80028e4:	eb43 0501 	adc.w	r5, r3, r1
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	00eb      	lsls	r3, r5, #3
 80028f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028f6:	00e2      	lsls	r2, r4, #3
 80028f8:	4614      	mov	r4, r2
 80028fa:	461d      	mov	r5, r3
 80028fc:	4643      	mov	r3, r8
 80028fe:	18e3      	adds	r3, r4, r3
 8002900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002904:	464b      	mov	r3, r9
 8002906:	eb45 0303 	adc.w	r3, r5, r3
 800290a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800290e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800291a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800292a:	4629      	mov	r1, r5
 800292c:	008b      	lsls	r3, r1, #2
 800292e:	4621      	mov	r1, r4
 8002930:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002934:	4621      	mov	r1, r4
 8002936:	008a      	lsls	r2, r1, #2
 8002938:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800293c:	f7fd fc5e 	bl	80001fc <__aeabi_uldivmod>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4b60      	ldr	r3, [pc, #384]	; (8002ac8 <UART_SetConfig+0x4e4>)
 8002946:	fba3 2302 	umull	r2, r3, r3, r2
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	011c      	lsls	r4, r3, #4
 800294e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002952:	2200      	movs	r2, #0
 8002954:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002958:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800295c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002960:	4642      	mov	r2, r8
 8002962:	464b      	mov	r3, r9
 8002964:	1891      	adds	r1, r2, r2
 8002966:	61b9      	str	r1, [r7, #24]
 8002968:	415b      	adcs	r3, r3
 800296a:	61fb      	str	r3, [r7, #28]
 800296c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002970:	4641      	mov	r1, r8
 8002972:	1851      	adds	r1, r2, r1
 8002974:	6139      	str	r1, [r7, #16]
 8002976:	4649      	mov	r1, r9
 8002978:	414b      	adcs	r3, r1
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002988:	4659      	mov	r1, fp
 800298a:	00cb      	lsls	r3, r1, #3
 800298c:	4651      	mov	r1, sl
 800298e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002992:	4651      	mov	r1, sl
 8002994:	00ca      	lsls	r2, r1, #3
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	4603      	mov	r3, r0
 800299c:	4642      	mov	r2, r8
 800299e:	189b      	adds	r3, r3, r2
 80029a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029a4:	464b      	mov	r3, r9
 80029a6:	460a      	mov	r2, r1
 80029a8:	eb42 0303 	adc.w	r3, r2, r3
 80029ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80029ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029c8:	4649      	mov	r1, r9
 80029ca:	008b      	lsls	r3, r1, #2
 80029cc:	4641      	mov	r1, r8
 80029ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029d2:	4641      	mov	r1, r8
 80029d4:	008a      	lsls	r2, r1, #2
 80029d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029da:	f7fd fc0f 	bl	80001fc <__aeabi_uldivmod>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4611      	mov	r1, r2
 80029e4:	4b38      	ldr	r3, [pc, #224]	; (8002ac8 <UART_SetConfig+0x4e4>)
 80029e6:	fba3 2301 	umull	r2, r3, r3, r1
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2264      	movs	r2, #100	; 0x64
 80029ee:	fb02 f303 	mul.w	r3, r2, r3
 80029f2:	1acb      	subs	r3, r1, r3
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	3332      	adds	r3, #50	; 0x32
 80029f8:	4a33      	ldr	r2, [pc, #204]	; (8002ac8 <UART_SetConfig+0x4e4>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a04:	441c      	add	r4, r3
 8002a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	673b      	str	r3, [r7, #112]	; 0x70
 8002a0e:	677a      	str	r2, [r7, #116]	; 0x74
 8002a10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a14:	4642      	mov	r2, r8
 8002a16:	464b      	mov	r3, r9
 8002a18:	1891      	adds	r1, r2, r2
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	415b      	adcs	r3, r3
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a24:	4641      	mov	r1, r8
 8002a26:	1851      	adds	r1, r2, r1
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	4649      	mov	r1, r9
 8002a2c:	414b      	adcs	r3, r1
 8002a2e:	607b      	str	r3, [r7, #4]
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a3c:	4659      	mov	r1, fp
 8002a3e:	00cb      	lsls	r3, r1, #3
 8002a40:	4651      	mov	r1, sl
 8002a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a46:	4651      	mov	r1, sl
 8002a48:	00ca      	lsls	r2, r1, #3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4642      	mov	r2, r8
 8002a52:	189b      	adds	r3, r3, r2
 8002a54:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a56:	464b      	mov	r3, r9
 8002a58:	460a      	mov	r2, r1
 8002a5a:	eb42 0303 	adc.w	r3, r2, r3
 8002a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	663b      	str	r3, [r7, #96]	; 0x60
 8002a6a:	667a      	str	r2, [r7, #100]	; 0x64
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a78:	4649      	mov	r1, r9
 8002a7a:	008b      	lsls	r3, r1, #2
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a82:	4641      	mov	r1, r8
 8002a84:	008a      	lsls	r2, r1, #2
 8002a86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a8a:	f7fd fbb7 	bl	80001fc <__aeabi_uldivmod>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <UART_SetConfig+0x4e4>)
 8002a94:	fba3 1302 	umull	r1, r3, r3, r2
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	2164      	movs	r1, #100	; 0x64
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	3332      	adds	r3, #50	; 0x32
 8002aa6:	4a08      	ldr	r2, [pc, #32]	; (8002ac8 <UART_SetConfig+0x4e4>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	f003 020f 	and.w	r2, r3, #15
 8002ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4422      	add	r2, r4
 8002aba:	609a      	str	r2, [r3, #8]
}
 8002abc:	bf00      	nop
 8002abe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ac8:	51eb851f 	.word	0x51eb851f

08002acc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002acc:	b084      	sub	sp, #16
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	f107 001c 	add.w	r0, r7, #28
 8002ada:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d122      	bne.n	8002b2a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d105      	bne.n	8002b1e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 faa2 	bl	8003068 <USB_CoreReset>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	e01a      	b.n	8002b60 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fa96 	bl	8003068 <USB_CoreReset>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	639a      	str	r2, [r3, #56]	; 0x38
 8002b52:	e005      	b.n	8002b60 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d10b      	bne.n	8002b7e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f043 0206 	orr.w	r2, r3, #6
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b8a:	b004      	add	sp, #16
 8002b8c:	4770      	bx	lr

08002b8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f023 0201 	bic.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d115      	bne.n	8002bfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002bde:	2001      	movs	r0, #1
 8002be0:	f7fe f906 	bl	8000df0 <HAL_Delay>
      ms++;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3301      	adds	r3, #1
 8002be8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa2e 	bl	800304c <USB_GetMode>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d01e      	beq.n	8002c34 <USB_SetCurrentMode+0x84>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b31      	cmp	r3, #49	; 0x31
 8002bfa:	d9f0      	bls.n	8002bde <USB_SetCurrentMode+0x2e>
 8002bfc:	e01a      	b.n	8002c34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d115      	bne.n	8002c30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c10:	2001      	movs	r0, #1
 8002c12:	f7fe f8ed 	bl	8000df0 <HAL_Delay>
      ms++;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fa15 	bl	800304c <USB_GetMode>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <USB_SetCurrentMode+0x84>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b31      	cmp	r3, #49	; 0x31
 8002c2c:	d9f0      	bls.n	8002c10 <USB_SetCurrentMode+0x60>
 8002c2e:	e001      	b.n	8002c34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e005      	b.n	8002c40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b32      	cmp	r3, #50	; 0x32
 8002c38:	d101      	bne.n	8002c3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c48:	b084      	sub	sp, #16
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	e009      	b.n	8002c7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	3340      	adds	r3, #64	; 0x40
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	2200      	movs	r2, #0
 8002c74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	2b0e      	cmp	r3, #14
 8002c80:	d9f2      	bls.n	8002c68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d11c      	bne.n	8002cc2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c96:	f043 0302 	orr.w	r3, r3, #2
 8002c9a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38
 8002cc0:	e00b      	b.n	8002cda <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cec:	4619      	mov	r1, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	680b      	ldr	r3, [r1, #0]
 8002cf8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d10c      	bne.n	8002d1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d104      	bne.n	8002d10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d06:	2100      	movs	r1, #0
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f965 	bl	8002fd8 <USB_SetDevSpeed>
 8002d0e:	e008      	b.n	8002d22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d10:	2101      	movs	r1, #1
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f960 	bl	8002fd8 <USB_SetDevSpeed>
 8002d18:	e003      	b.n	8002d22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d1a:	2103      	movs	r1, #3
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f95b 	bl	8002fd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d22:	2110      	movs	r1, #16
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f8f3 	bl	8002f10 <USB_FlushTxFifo>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f91f 	bl	8002f78 <USB_FlushRxFifo>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d56:	461a      	mov	r2, r3
 8002d58:	2300      	movs	r3, #0
 8002d5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d62:	461a      	mov	r2, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	e043      	b.n	8002df6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d84:	d118      	bne.n	8002db8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	e013      	b.n	8002dca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dae:	461a      	mov	r2, r3
 8002db0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e008      	b.n	8002dca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2300      	movs	r3, #0
 8002dda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de8:	461a      	mov	r2, r3
 8002dea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	3301      	adds	r3, #1
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d3b7      	bcc.n	8002d6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	e043      	b.n	8002e8c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e1a:	d118      	bne.n	8002e4e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10a      	bne.n	8002e38 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e013      	b.n	8002e60 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e44:	461a      	mov	r2, r3
 8002e46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	e008      	b.n	8002e60 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2300      	movs	r3, #0
 8002e70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d3b7      	bcc.n	8002e04 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002eb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d105      	bne.n	8002ec8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f043 0210 	orr.w	r2, r3, #16
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <USB_DevInit+0x2c4>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f043 0208 	orr.w	r2, r3, #8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d107      	bne.n	8002efc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ef4:	f043 0304 	orr.w	r3, r3, #4
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f08:	b004      	add	sp, #16
 8002f0a:	4770      	bx	lr
 8002f0c:	803c3800 	.word	0x803c3800

08002f10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3301      	adds	r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a13      	ldr	r2, [pc, #76]	; (8002f74 <USB_FlushTxFifo+0x64>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e01b      	b.n	8002f68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	daf2      	bge.n	8002f1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	019b      	lsls	r3, r3, #6
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4a08      	ldr	r2, [pc, #32]	; (8002f74 <USB_FlushTxFifo+0x64>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e006      	b.n	8002f68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d0f0      	beq.n	8002f48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	00030d40 	.word	0x00030d40

08002f78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3301      	adds	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <USB_FlushRxFifo+0x5c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e018      	b.n	8002fc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	daf2      	bge.n	8002f84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3301      	adds	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <USB_FlushRxFifo+0x5c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e006      	b.n	8002fc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b10      	cmp	r3, #16
 8002fc4:	d0f0      	beq.n	8002fa8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	00030d40 	.word	0x00030d40

08002fd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	68f9      	ldr	r1, [r7, #12]
 8002ff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800300a:	b480      	push	{r7}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003024:	f023 0303 	bic.w	r3, r3, #3
 8003028:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f003 0301 	and.w	r3, r3, #1
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3301      	adds	r3, #1
 8003078:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4a13      	ldr	r2, [pc, #76]	; (80030cc <USB_CoreReset+0x64>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e01b      	b.n	80030be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	daf2      	bge.n	8003074 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3301      	adds	r3, #1
 80030a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a09      	ldr	r2, [pc, #36]	; (80030cc <USB_CoreReset+0x64>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d901      	bls.n	80030b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e006      	b.n	80030be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d0f0      	beq.n	800309e <USB_CoreReset+0x36>

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	00030d40 	.word	0x00030d40

080030d0 <std>:
 80030d0:	2300      	movs	r3, #0
 80030d2:	b510      	push	{r4, lr}
 80030d4:	4604      	mov	r4, r0
 80030d6:	e9c0 3300 	strd	r3, r3, [r0]
 80030da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030de:	6083      	str	r3, [r0, #8]
 80030e0:	8181      	strh	r1, [r0, #12]
 80030e2:	6643      	str	r3, [r0, #100]	; 0x64
 80030e4:	81c2      	strh	r2, [r0, #14]
 80030e6:	6183      	str	r3, [r0, #24]
 80030e8:	4619      	mov	r1, r3
 80030ea:	2208      	movs	r2, #8
 80030ec:	305c      	adds	r0, #92	; 0x5c
 80030ee:	f000 f9e5 	bl	80034bc <memset>
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <std+0x58>)
 80030f4:	6263      	str	r3, [r4, #36]	; 0x24
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <std+0x5c>)
 80030f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80030fa:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <std+0x60>)
 80030fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030fe:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <std+0x64>)
 8003100:	6323      	str	r3, [r4, #48]	; 0x30
 8003102:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <std+0x68>)
 8003104:	6224      	str	r4, [r4, #32]
 8003106:	429c      	cmp	r4, r3
 8003108:	d006      	beq.n	8003118 <std+0x48>
 800310a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800310e:	4294      	cmp	r4, r2
 8003110:	d002      	beq.n	8003118 <std+0x48>
 8003112:	33d0      	adds	r3, #208	; 0xd0
 8003114:	429c      	cmp	r4, r3
 8003116:	d105      	bne.n	8003124 <std+0x54>
 8003118:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800311c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003120:	f000 ba44 	b.w	80035ac <__retarget_lock_init_recursive>
 8003124:	bd10      	pop	{r4, pc}
 8003126:	bf00      	nop
 8003128:	0800330d 	.word	0x0800330d
 800312c:	0800332f 	.word	0x0800332f
 8003130:	08003367 	.word	0x08003367
 8003134:	0800338b 	.word	0x0800338b
 8003138:	20000814 	.word	0x20000814

0800313c <stdio_exit_handler>:
 800313c:	4a02      	ldr	r2, [pc, #8]	; (8003148 <stdio_exit_handler+0xc>)
 800313e:	4903      	ldr	r1, [pc, #12]	; (800314c <stdio_exit_handler+0x10>)
 8003140:	4803      	ldr	r0, [pc, #12]	; (8003150 <stdio_exit_handler+0x14>)
 8003142:	f000 b869 	b.w	8003218 <_fwalk_sglue>
 8003146:	bf00      	nop
 8003148:	2000000c 	.word	0x2000000c
 800314c:	080038b1 	.word	0x080038b1
 8003150:	20000018 	.word	0x20000018

08003154 <cleanup_stdio>:
 8003154:	6841      	ldr	r1, [r0, #4]
 8003156:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <cleanup_stdio+0x34>)
 8003158:	4299      	cmp	r1, r3
 800315a:	b510      	push	{r4, lr}
 800315c:	4604      	mov	r4, r0
 800315e:	d001      	beq.n	8003164 <cleanup_stdio+0x10>
 8003160:	f000 fba6 	bl	80038b0 <_fflush_r>
 8003164:	68a1      	ldr	r1, [r4, #8]
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <cleanup_stdio+0x38>)
 8003168:	4299      	cmp	r1, r3
 800316a:	d002      	beq.n	8003172 <cleanup_stdio+0x1e>
 800316c:	4620      	mov	r0, r4
 800316e:	f000 fb9f 	bl	80038b0 <_fflush_r>
 8003172:	68e1      	ldr	r1, [r4, #12]
 8003174:	4b06      	ldr	r3, [pc, #24]	; (8003190 <cleanup_stdio+0x3c>)
 8003176:	4299      	cmp	r1, r3
 8003178:	d004      	beq.n	8003184 <cleanup_stdio+0x30>
 800317a:	4620      	mov	r0, r4
 800317c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003180:	f000 bb96 	b.w	80038b0 <_fflush_r>
 8003184:	bd10      	pop	{r4, pc}
 8003186:	bf00      	nop
 8003188:	20000814 	.word	0x20000814
 800318c:	2000087c 	.word	0x2000087c
 8003190:	200008e4 	.word	0x200008e4

08003194 <global_stdio_init.part.0>:
 8003194:	b510      	push	{r4, lr}
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <global_stdio_init.part.0+0x30>)
 8003198:	4c0b      	ldr	r4, [pc, #44]	; (80031c8 <global_stdio_init.part.0+0x34>)
 800319a:	4a0c      	ldr	r2, [pc, #48]	; (80031cc <global_stdio_init.part.0+0x38>)
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	4620      	mov	r0, r4
 80031a0:	2200      	movs	r2, #0
 80031a2:	2104      	movs	r1, #4
 80031a4:	f7ff ff94 	bl	80030d0 <std>
 80031a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80031ac:	2201      	movs	r2, #1
 80031ae:	2109      	movs	r1, #9
 80031b0:	f7ff ff8e 	bl	80030d0 <std>
 80031b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80031b8:	2202      	movs	r2, #2
 80031ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031be:	2112      	movs	r1, #18
 80031c0:	f7ff bf86 	b.w	80030d0 <std>
 80031c4:	2000094c 	.word	0x2000094c
 80031c8:	20000814 	.word	0x20000814
 80031cc:	0800313d 	.word	0x0800313d

080031d0 <__sfp_lock_acquire>:
 80031d0:	4801      	ldr	r0, [pc, #4]	; (80031d8 <__sfp_lock_acquire+0x8>)
 80031d2:	f000 b9ec 	b.w	80035ae <__retarget_lock_acquire_recursive>
 80031d6:	bf00      	nop
 80031d8:	20000955 	.word	0x20000955

080031dc <__sfp_lock_release>:
 80031dc:	4801      	ldr	r0, [pc, #4]	; (80031e4 <__sfp_lock_release+0x8>)
 80031de:	f000 b9e7 	b.w	80035b0 <__retarget_lock_release_recursive>
 80031e2:	bf00      	nop
 80031e4:	20000955 	.word	0x20000955

080031e8 <__sinit>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	4604      	mov	r4, r0
 80031ec:	f7ff fff0 	bl	80031d0 <__sfp_lock_acquire>
 80031f0:	6a23      	ldr	r3, [r4, #32]
 80031f2:	b11b      	cbz	r3, 80031fc <__sinit+0x14>
 80031f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031f8:	f7ff bff0 	b.w	80031dc <__sfp_lock_release>
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <__sinit+0x28>)
 80031fe:	6223      	str	r3, [r4, #32]
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <__sinit+0x2c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f5      	bne.n	80031f4 <__sinit+0xc>
 8003208:	f7ff ffc4 	bl	8003194 <global_stdio_init.part.0>
 800320c:	e7f2      	b.n	80031f4 <__sinit+0xc>
 800320e:	bf00      	nop
 8003210:	08003155 	.word	0x08003155
 8003214:	2000094c 	.word	0x2000094c

08003218 <_fwalk_sglue>:
 8003218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800321c:	4607      	mov	r7, r0
 800321e:	4688      	mov	r8, r1
 8003220:	4614      	mov	r4, r2
 8003222:	2600      	movs	r6, #0
 8003224:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003228:	f1b9 0901 	subs.w	r9, r9, #1
 800322c:	d505      	bpl.n	800323a <_fwalk_sglue+0x22>
 800322e:	6824      	ldr	r4, [r4, #0]
 8003230:	2c00      	cmp	r4, #0
 8003232:	d1f7      	bne.n	8003224 <_fwalk_sglue+0xc>
 8003234:	4630      	mov	r0, r6
 8003236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800323a:	89ab      	ldrh	r3, [r5, #12]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d907      	bls.n	8003250 <_fwalk_sglue+0x38>
 8003240:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003244:	3301      	adds	r3, #1
 8003246:	d003      	beq.n	8003250 <_fwalk_sglue+0x38>
 8003248:	4629      	mov	r1, r5
 800324a:	4638      	mov	r0, r7
 800324c:	47c0      	blx	r8
 800324e:	4306      	orrs	r6, r0
 8003250:	3568      	adds	r5, #104	; 0x68
 8003252:	e7e9      	b.n	8003228 <_fwalk_sglue+0x10>

08003254 <_puts_r>:
 8003254:	6a03      	ldr	r3, [r0, #32]
 8003256:	b570      	push	{r4, r5, r6, lr}
 8003258:	6884      	ldr	r4, [r0, #8]
 800325a:	4605      	mov	r5, r0
 800325c:	460e      	mov	r6, r1
 800325e:	b90b      	cbnz	r3, 8003264 <_puts_r+0x10>
 8003260:	f7ff ffc2 	bl	80031e8 <__sinit>
 8003264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003266:	07db      	lsls	r3, r3, #31
 8003268:	d405      	bmi.n	8003276 <_puts_r+0x22>
 800326a:	89a3      	ldrh	r3, [r4, #12]
 800326c:	0598      	lsls	r0, r3, #22
 800326e:	d402      	bmi.n	8003276 <_puts_r+0x22>
 8003270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003272:	f000 f99c 	bl	80035ae <__retarget_lock_acquire_recursive>
 8003276:	89a3      	ldrh	r3, [r4, #12]
 8003278:	0719      	lsls	r1, r3, #28
 800327a:	d513      	bpl.n	80032a4 <_puts_r+0x50>
 800327c:	6923      	ldr	r3, [r4, #16]
 800327e:	b18b      	cbz	r3, 80032a4 <_puts_r+0x50>
 8003280:	3e01      	subs	r6, #1
 8003282:	68a3      	ldr	r3, [r4, #8]
 8003284:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003288:	3b01      	subs	r3, #1
 800328a:	60a3      	str	r3, [r4, #8]
 800328c:	b9e9      	cbnz	r1, 80032ca <_puts_r+0x76>
 800328e:	2b00      	cmp	r3, #0
 8003290:	da2e      	bge.n	80032f0 <_puts_r+0x9c>
 8003292:	4622      	mov	r2, r4
 8003294:	210a      	movs	r1, #10
 8003296:	4628      	mov	r0, r5
 8003298:	f000 f87b 	bl	8003392 <__swbuf_r>
 800329c:	3001      	adds	r0, #1
 800329e:	d007      	beq.n	80032b0 <_puts_r+0x5c>
 80032a0:	250a      	movs	r5, #10
 80032a2:	e007      	b.n	80032b4 <_puts_r+0x60>
 80032a4:	4621      	mov	r1, r4
 80032a6:	4628      	mov	r0, r5
 80032a8:	f000 f8b0 	bl	800340c <__swsetup_r>
 80032ac:	2800      	cmp	r0, #0
 80032ae:	d0e7      	beq.n	8003280 <_puts_r+0x2c>
 80032b0:	f04f 35ff 	mov.w	r5, #4294967295
 80032b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032b6:	07da      	lsls	r2, r3, #31
 80032b8:	d405      	bmi.n	80032c6 <_puts_r+0x72>
 80032ba:	89a3      	ldrh	r3, [r4, #12]
 80032bc:	059b      	lsls	r3, r3, #22
 80032be:	d402      	bmi.n	80032c6 <_puts_r+0x72>
 80032c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032c2:	f000 f975 	bl	80035b0 <__retarget_lock_release_recursive>
 80032c6:	4628      	mov	r0, r5
 80032c8:	bd70      	pop	{r4, r5, r6, pc}
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	da04      	bge.n	80032d8 <_puts_r+0x84>
 80032ce:	69a2      	ldr	r2, [r4, #24]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	dc06      	bgt.n	80032e2 <_puts_r+0x8e>
 80032d4:	290a      	cmp	r1, #10
 80032d6:	d004      	beq.n	80032e2 <_puts_r+0x8e>
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	6022      	str	r2, [r4, #0]
 80032de:	7019      	strb	r1, [r3, #0]
 80032e0:	e7cf      	b.n	8003282 <_puts_r+0x2e>
 80032e2:	4622      	mov	r2, r4
 80032e4:	4628      	mov	r0, r5
 80032e6:	f000 f854 	bl	8003392 <__swbuf_r>
 80032ea:	3001      	adds	r0, #1
 80032ec:	d1c9      	bne.n	8003282 <_puts_r+0x2e>
 80032ee:	e7df      	b.n	80032b0 <_puts_r+0x5c>
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	250a      	movs	r5, #10
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	6022      	str	r2, [r4, #0]
 80032f8:	701d      	strb	r5, [r3, #0]
 80032fa:	e7db      	b.n	80032b4 <_puts_r+0x60>

080032fc <puts>:
 80032fc:	4b02      	ldr	r3, [pc, #8]	; (8003308 <puts+0xc>)
 80032fe:	4601      	mov	r1, r0
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	f7ff bfa7 	b.w	8003254 <_puts_r>
 8003306:	bf00      	nop
 8003308:	20000064 	.word	0x20000064

0800330c <__sread>:
 800330c:	b510      	push	{r4, lr}
 800330e:	460c      	mov	r4, r1
 8003310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003314:	f000 f8fc 	bl	8003510 <_read_r>
 8003318:	2800      	cmp	r0, #0
 800331a:	bfab      	itete	ge
 800331c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800331e:	89a3      	ldrhlt	r3, [r4, #12]
 8003320:	181b      	addge	r3, r3, r0
 8003322:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003326:	bfac      	ite	ge
 8003328:	6563      	strge	r3, [r4, #84]	; 0x54
 800332a:	81a3      	strhlt	r3, [r4, #12]
 800332c:	bd10      	pop	{r4, pc}

0800332e <__swrite>:
 800332e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003332:	461f      	mov	r7, r3
 8003334:	898b      	ldrh	r3, [r1, #12]
 8003336:	05db      	lsls	r3, r3, #23
 8003338:	4605      	mov	r5, r0
 800333a:	460c      	mov	r4, r1
 800333c:	4616      	mov	r6, r2
 800333e:	d505      	bpl.n	800334c <__swrite+0x1e>
 8003340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003344:	2302      	movs	r3, #2
 8003346:	2200      	movs	r2, #0
 8003348:	f000 f8d0 	bl	80034ec <_lseek_r>
 800334c:	89a3      	ldrh	r3, [r4, #12]
 800334e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003352:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003356:	81a3      	strh	r3, [r4, #12]
 8003358:	4632      	mov	r2, r6
 800335a:	463b      	mov	r3, r7
 800335c:	4628      	mov	r0, r5
 800335e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003362:	f000 b8e7 	b.w	8003534 <_write_r>

08003366 <__sseek>:
 8003366:	b510      	push	{r4, lr}
 8003368:	460c      	mov	r4, r1
 800336a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800336e:	f000 f8bd 	bl	80034ec <_lseek_r>
 8003372:	1c43      	adds	r3, r0, #1
 8003374:	89a3      	ldrh	r3, [r4, #12]
 8003376:	bf15      	itete	ne
 8003378:	6560      	strne	r0, [r4, #84]	; 0x54
 800337a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800337e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003382:	81a3      	strheq	r3, [r4, #12]
 8003384:	bf18      	it	ne
 8003386:	81a3      	strhne	r3, [r4, #12]
 8003388:	bd10      	pop	{r4, pc}

0800338a <__sclose>:
 800338a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800338e:	f000 b89d 	b.w	80034cc <_close_r>

08003392 <__swbuf_r>:
 8003392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003394:	460e      	mov	r6, r1
 8003396:	4614      	mov	r4, r2
 8003398:	4605      	mov	r5, r0
 800339a:	b118      	cbz	r0, 80033a4 <__swbuf_r+0x12>
 800339c:	6a03      	ldr	r3, [r0, #32]
 800339e:	b90b      	cbnz	r3, 80033a4 <__swbuf_r+0x12>
 80033a0:	f7ff ff22 	bl	80031e8 <__sinit>
 80033a4:	69a3      	ldr	r3, [r4, #24]
 80033a6:	60a3      	str	r3, [r4, #8]
 80033a8:	89a3      	ldrh	r3, [r4, #12]
 80033aa:	071a      	lsls	r2, r3, #28
 80033ac:	d525      	bpl.n	80033fa <__swbuf_r+0x68>
 80033ae:	6923      	ldr	r3, [r4, #16]
 80033b0:	b31b      	cbz	r3, 80033fa <__swbuf_r+0x68>
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	6922      	ldr	r2, [r4, #16]
 80033b6:	1a98      	subs	r0, r3, r2
 80033b8:	6963      	ldr	r3, [r4, #20]
 80033ba:	b2f6      	uxtb	r6, r6
 80033bc:	4283      	cmp	r3, r0
 80033be:	4637      	mov	r7, r6
 80033c0:	dc04      	bgt.n	80033cc <__swbuf_r+0x3a>
 80033c2:	4621      	mov	r1, r4
 80033c4:	4628      	mov	r0, r5
 80033c6:	f000 fa73 	bl	80038b0 <_fflush_r>
 80033ca:	b9e0      	cbnz	r0, 8003406 <__swbuf_r+0x74>
 80033cc:	68a3      	ldr	r3, [r4, #8]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	60a3      	str	r3, [r4, #8]
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	6022      	str	r2, [r4, #0]
 80033d8:	701e      	strb	r6, [r3, #0]
 80033da:	6962      	ldr	r2, [r4, #20]
 80033dc:	1c43      	adds	r3, r0, #1
 80033de:	429a      	cmp	r2, r3
 80033e0:	d004      	beq.n	80033ec <__swbuf_r+0x5a>
 80033e2:	89a3      	ldrh	r3, [r4, #12]
 80033e4:	07db      	lsls	r3, r3, #31
 80033e6:	d506      	bpl.n	80033f6 <__swbuf_r+0x64>
 80033e8:	2e0a      	cmp	r6, #10
 80033ea:	d104      	bne.n	80033f6 <__swbuf_r+0x64>
 80033ec:	4621      	mov	r1, r4
 80033ee:	4628      	mov	r0, r5
 80033f0:	f000 fa5e 	bl	80038b0 <_fflush_r>
 80033f4:	b938      	cbnz	r0, 8003406 <__swbuf_r+0x74>
 80033f6:	4638      	mov	r0, r7
 80033f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033fa:	4621      	mov	r1, r4
 80033fc:	4628      	mov	r0, r5
 80033fe:	f000 f805 	bl	800340c <__swsetup_r>
 8003402:	2800      	cmp	r0, #0
 8003404:	d0d5      	beq.n	80033b2 <__swbuf_r+0x20>
 8003406:	f04f 37ff 	mov.w	r7, #4294967295
 800340a:	e7f4      	b.n	80033f6 <__swbuf_r+0x64>

0800340c <__swsetup_r>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <__swsetup_r+0xac>)
 8003410:	4605      	mov	r5, r0
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	460c      	mov	r4, r1
 8003416:	b118      	cbz	r0, 8003420 <__swsetup_r+0x14>
 8003418:	6a03      	ldr	r3, [r0, #32]
 800341a:	b90b      	cbnz	r3, 8003420 <__swsetup_r+0x14>
 800341c:	f7ff fee4 	bl	80031e8 <__sinit>
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003426:	0718      	lsls	r0, r3, #28
 8003428:	d422      	bmi.n	8003470 <__swsetup_r+0x64>
 800342a:	06d9      	lsls	r1, r3, #27
 800342c:	d407      	bmi.n	800343e <__swsetup_r+0x32>
 800342e:	2309      	movs	r3, #9
 8003430:	602b      	str	r3, [r5, #0]
 8003432:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003436:	81a3      	strh	r3, [r4, #12]
 8003438:	f04f 30ff 	mov.w	r0, #4294967295
 800343c:	e034      	b.n	80034a8 <__swsetup_r+0x9c>
 800343e:	0758      	lsls	r0, r3, #29
 8003440:	d512      	bpl.n	8003468 <__swsetup_r+0x5c>
 8003442:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003444:	b141      	cbz	r1, 8003458 <__swsetup_r+0x4c>
 8003446:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800344a:	4299      	cmp	r1, r3
 800344c:	d002      	beq.n	8003454 <__swsetup_r+0x48>
 800344e:	4628      	mov	r0, r5
 8003450:	f000 f8b0 	bl	80035b4 <_free_r>
 8003454:	2300      	movs	r3, #0
 8003456:	6363      	str	r3, [r4, #52]	; 0x34
 8003458:	89a3      	ldrh	r3, [r4, #12]
 800345a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800345e:	81a3      	strh	r3, [r4, #12]
 8003460:	2300      	movs	r3, #0
 8003462:	6063      	str	r3, [r4, #4]
 8003464:	6923      	ldr	r3, [r4, #16]
 8003466:	6023      	str	r3, [r4, #0]
 8003468:	89a3      	ldrh	r3, [r4, #12]
 800346a:	f043 0308 	orr.w	r3, r3, #8
 800346e:	81a3      	strh	r3, [r4, #12]
 8003470:	6923      	ldr	r3, [r4, #16]
 8003472:	b94b      	cbnz	r3, 8003488 <__swsetup_r+0x7c>
 8003474:	89a3      	ldrh	r3, [r4, #12]
 8003476:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800347a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800347e:	d003      	beq.n	8003488 <__swsetup_r+0x7c>
 8003480:	4621      	mov	r1, r4
 8003482:	4628      	mov	r0, r5
 8003484:	f000 fa62 	bl	800394c <__smakebuf_r>
 8003488:	89a0      	ldrh	r0, [r4, #12]
 800348a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800348e:	f010 0301 	ands.w	r3, r0, #1
 8003492:	d00a      	beq.n	80034aa <__swsetup_r+0x9e>
 8003494:	2300      	movs	r3, #0
 8003496:	60a3      	str	r3, [r4, #8]
 8003498:	6963      	ldr	r3, [r4, #20]
 800349a:	425b      	negs	r3, r3
 800349c:	61a3      	str	r3, [r4, #24]
 800349e:	6923      	ldr	r3, [r4, #16]
 80034a0:	b943      	cbnz	r3, 80034b4 <__swsetup_r+0xa8>
 80034a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034a6:	d1c4      	bne.n	8003432 <__swsetup_r+0x26>
 80034a8:	bd38      	pop	{r3, r4, r5, pc}
 80034aa:	0781      	lsls	r1, r0, #30
 80034ac:	bf58      	it	pl
 80034ae:	6963      	ldrpl	r3, [r4, #20]
 80034b0:	60a3      	str	r3, [r4, #8]
 80034b2:	e7f4      	b.n	800349e <__swsetup_r+0x92>
 80034b4:	2000      	movs	r0, #0
 80034b6:	e7f7      	b.n	80034a8 <__swsetup_r+0x9c>
 80034b8:	20000064 	.word	0x20000064

080034bc <memset>:
 80034bc:	4402      	add	r2, r0
 80034be:	4603      	mov	r3, r0
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d100      	bne.n	80034c6 <memset+0xa>
 80034c4:	4770      	bx	lr
 80034c6:	f803 1b01 	strb.w	r1, [r3], #1
 80034ca:	e7f9      	b.n	80034c0 <memset+0x4>

080034cc <_close_r>:
 80034cc:	b538      	push	{r3, r4, r5, lr}
 80034ce:	4d06      	ldr	r5, [pc, #24]	; (80034e8 <_close_r+0x1c>)
 80034d0:	2300      	movs	r3, #0
 80034d2:	4604      	mov	r4, r0
 80034d4:	4608      	mov	r0, r1
 80034d6:	602b      	str	r3, [r5, #0]
 80034d8:	f000 fb7e 	bl	8003bd8 <_close>
 80034dc:	1c43      	adds	r3, r0, #1
 80034de:	d102      	bne.n	80034e6 <_close_r+0x1a>
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	b103      	cbz	r3, 80034e6 <_close_r+0x1a>
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	bd38      	pop	{r3, r4, r5, pc}
 80034e8:	20000950 	.word	0x20000950

080034ec <_lseek_r>:
 80034ec:	b538      	push	{r3, r4, r5, lr}
 80034ee:	4d07      	ldr	r5, [pc, #28]	; (800350c <_lseek_r+0x20>)
 80034f0:	4604      	mov	r4, r0
 80034f2:	4608      	mov	r0, r1
 80034f4:	4611      	mov	r1, r2
 80034f6:	2200      	movs	r2, #0
 80034f8:	602a      	str	r2, [r5, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f000 fb29 	bl	8003b52 <_lseek>
 8003500:	1c43      	adds	r3, r0, #1
 8003502:	d102      	bne.n	800350a <_lseek_r+0x1e>
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	b103      	cbz	r3, 800350a <_lseek_r+0x1e>
 8003508:	6023      	str	r3, [r4, #0]
 800350a:	bd38      	pop	{r3, r4, r5, pc}
 800350c:	20000950 	.word	0x20000950

08003510 <_read_r>:
 8003510:	b538      	push	{r3, r4, r5, lr}
 8003512:	4d07      	ldr	r5, [pc, #28]	; (8003530 <_read_r+0x20>)
 8003514:	4604      	mov	r4, r0
 8003516:	4608      	mov	r0, r1
 8003518:	4611      	mov	r1, r2
 800351a:	2200      	movs	r2, #0
 800351c:	602a      	str	r2, [r5, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	f000 fabf 	bl	8003aa2 <_read>
 8003524:	1c43      	adds	r3, r0, #1
 8003526:	d102      	bne.n	800352e <_read_r+0x1e>
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	b103      	cbz	r3, 800352e <_read_r+0x1e>
 800352c:	6023      	str	r3, [r4, #0]
 800352e:	bd38      	pop	{r3, r4, r5, pc}
 8003530:	20000950 	.word	0x20000950

08003534 <_write_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4d07      	ldr	r5, [pc, #28]	; (8003554 <_write_r+0x20>)
 8003538:	4604      	mov	r4, r0
 800353a:	4608      	mov	r0, r1
 800353c:	4611      	mov	r1, r2
 800353e:	2200      	movs	r2, #0
 8003540:	602a      	str	r2, [r5, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	f000 fb17 	bl	8003b76 <_write>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d102      	bne.n	8003552 <_write_r+0x1e>
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	b103      	cbz	r3, 8003552 <_write_r+0x1e>
 8003550:	6023      	str	r3, [r4, #0]
 8003552:	bd38      	pop	{r3, r4, r5, pc}
 8003554:	20000950 	.word	0x20000950

08003558 <__errno>:
 8003558:	4b01      	ldr	r3, [pc, #4]	; (8003560 <__errno+0x8>)
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000064 	.word	0x20000064

08003564 <__libc_init_array>:
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	4d0d      	ldr	r5, [pc, #52]	; (800359c <__libc_init_array+0x38>)
 8003568:	4c0d      	ldr	r4, [pc, #52]	; (80035a0 <__libc_init_array+0x3c>)
 800356a:	1b64      	subs	r4, r4, r5
 800356c:	10a4      	asrs	r4, r4, #2
 800356e:	2600      	movs	r6, #0
 8003570:	42a6      	cmp	r6, r4
 8003572:	d109      	bne.n	8003588 <__libc_init_array+0x24>
 8003574:	4d0b      	ldr	r5, [pc, #44]	; (80035a4 <__libc_init_array+0x40>)
 8003576:	4c0c      	ldr	r4, [pc, #48]	; (80035a8 <__libc_init_array+0x44>)
 8003578:	f000 fcf8 	bl	8003f6c <_init>
 800357c:	1b64      	subs	r4, r4, r5
 800357e:	10a4      	asrs	r4, r4, #2
 8003580:	2600      	movs	r6, #0
 8003582:	42a6      	cmp	r6, r4
 8003584:	d105      	bne.n	8003592 <__libc_init_array+0x2e>
 8003586:	bd70      	pop	{r4, r5, r6, pc}
 8003588:	f855 3b04 	ldr.w	r3, [r5], #4
 800358c:	4798      	blx	r3
 800358e:	3601      	adds	r6, #1
 8003590:	e7ee      	b.n	8003570 <__libc_init_array+0xc>
 8003592:	f855 3b04 	ldr.w	r3, [r5], #4
 8003596:	4798      	blx	r3
 8003598:	3601      	adds	r6, #1
 800359a:	e7f2      	b.n	8003582 <__libc_init_array+0x1e>
 800359c:	08003fcc 	.word	0x08003fcc
 80035a0:	08003fcc 	.word	0x08003fcc
 80035a4:	08003fcc 	.word	0x08003fcc
 80035a8:	08003fd0 	.word	0x08003fd0

080035ac <__retarget_lock_init_recursive>:
 80035ac:	4770      	bx	lr

080035ae <__retarget_lock_acquire_recursive>:
 80035ae:	4770      	bx	lr

080035b0 <__retarget_lock_release_recursive>:
 80035b0:	4770      	bx	lr
	...

080035b4 <_free_r>:
 80035b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035b6:	2900      	cmp	r1, #0
 80035b8:	d044      	beq.n	8003644 <_free_r+0x90>
 80035ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035be:	9001      	str	r0, [sp, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f1a1 0404 	sub.w	r4, r1, #4
 80035c6:	bfb8      	it	lt
 80035c8:	18e4      	addlt	r4, r4, r3
 80035ca:	f000 f8df 	bl	800378c <__malloc_lock>
 80035ce:	4a1e      	ldr	r2, [pc, #120]	; (8003648 <_free_r+0x94>)
 80035d0:	9801      	ldr	r0, [sp, #4]
 80035d2:	6813      	ldr	r3, [r2, #0]
 80035d4:	b933      	cbnz	r3, 80035e4 <_free_r+0x30>
 80035d6:	6063      	str	r3, [r4, #4]
 80035d8:	6014      	str	r4, [r2, #0]
 80035da:	b003      	add	sp, #12
 80035dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035e0:	f000 b8da 	b.w	8003798 <__malloc_unlock>
 80035e4:	42a3      	cmp	r3, r4
 80035e6:	d908      	bls.n	80035fa <_free_r+0x46>
 80035e8:	6825      	ldr	r5, [r4, #0]
 80035ea:	1961      	adds	r1, r4, r5
 80035ec:	428b      	cmp	r3, r1
 80035ee:	bf01      	itttt	eq
 80035f0:	6819      	ldreq	r1, [r3, #0]
 80035f2:	685b      	ldreq	r3, [r3, #4]
 80035f4:	1949      	addeq	r1, r1, r5
 80035f6:	6021      	streq	r1, [r4, #0]
 80035f8:	e7ed      	b.n	80035d6 <_free_r+0x22>
 80035fa:	461a      	mov	r2, r3
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	b10b      	cbz	r3, 8003604 <_free_r+0x50>
 8003600:	42a3      	cmp	r3, r4
 8003602:	d9fa      	bls.n	80035fa <_free_r+0x46>
 8003604:	6811      	ldr	r1, [r2, #0]
 8003606:	1855      	adds	r5, r2, r1
 8003608:	42a5      	cmp	r5, r4
 800360a:	d10b      	bne.n	8003624 <_free_r+0x70>
 800360c:	6824      	ldr	r4, [r4, #0]
 800360e:	4421      	add	r1, r4
 8003610:	1854      	adds	r4, r2, r1
 8003612:	42a3      	cmp	r3, r4
 8003614:	6011      	str	r1, [r2, #0]
 8003616:	d1e0      	bne.n	80035da <_free_r+0x26>
 8003618:	681c      	ldr	r4, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	6053      	str	r3, [r2, #4]
 800361e:	440c      	add	r4, r1
 8003620:	6014      	str	r4, [r2, #0]
 8003622:	e7da      	b.n	80035da <_free_r+0x26>
 8003624:	d902      	bls.n	800362c <_free_r+0x78>
 8003626:	230c      	movs	r3, #12
 8003628:	6003      	str	r3, [r0, #0]
 800362a:	e7d6      	b.n	80035da <_free_r+0x26>
 800362c:	6825      	ldr	r5, [r4, #0]
 800362e:	1961      	adds	r1, r4, r5
 8003630:	428b      	cmp	r3, r1
 8003632:	bf04      	itt	eq
 8003634:	6819      	ldreq	r1, [r3, #0]
 8003636:	685b      	ldreq	r3, [r3, #4]
 8003638:	6063      	str	r3, [r4, #4]
 800363a:	bf04      	itt	eq
 800363c:	1949      	addeq	r1, r1, r5
 800363e:	6021      	streq	r1, [r4, #0]
 8003640:	6054      	str	r4, [r2, #4]
 8003642:	e7ca      	b.n	80035da <_free_r+0x26>
 8003644:	b003      	add	sp, #12
 8003646:	bd30      	pop	{r4, r5, pc}
 8003648:	20000958 	.word	0x20000958

0800364c <sbrk_aligned>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	4e0e      	ldr	r6, [pc, #56]	; (8003688 <sbrk_aligned+0x3c>)
 8003650:	460c      	mov	r4, r1
 8003652:	6831      	ldr	r1, [r6, #0]
 8003654:	4605      	mov	r5, r0
 8003656:	b911      	cbnz	r1, 800365e <sbrk_aligned+0x12>
 8003658:	f000 f9d6 	bl	8003a08 <_sbrk_r>
 800365c:	6030      	str	r0, [r6, #0]
 800365e:	4621      	mov	r1, r4
 8003660:	4628      	mov	r0, r5
 8003662:	f000 f9d1 	bl	8003a08 <_sbrk_r>
 8003666:	1c43      	adds	r3, r0, #1
 8003668:	d00a      	beq.n	8003680 <sbrk_aligned+0x34>
 800366a:	1cc4      	adds	r4, r0, #3
 800366c:	f024 0403 	bic.w	r4, r4, #3
 8003670:	42a0      	cmp	r0, r4
 8003672:	d007      	beq.n	8003684 <sbrk_aligned+0x38>
 8003674:	1a21      	subs	r1, r4, r0
 8003676:	4628      	mov	r0, r5
 8003678:	f000 f9c6 	bl	8003a08 <_sbrk_r>
 800367c:	3001      	adds	r0, #1
 800367e:	d101      	bne.n	8003684 <sbrk_aligned+0x38>
 8003680:	f04f 34ff 	mov.w	r4, #4294967295
 8003684:	4620      	mov	r0, r4
 8003686:	bd70      	pop	{r4, r5, r6, pc}
 8003688:	2000095c 	.word	0x2000095c

0800368c <_malloc_r>:
 800368c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003690:	1ccd      	adds	r5, r1, #3
 8003692:	f025 0503 	bic.w	r5, r5, #3
 8003696:	3508      	adds	r5, #8
 8003698:	2d0c      	cmp	r5, #12
 800369a:	bf38      	it	cc
 800369c:	250c      	movcc	r5, #12
 800369e:	2d00      	cmp	r5, #0
 80036a0:	4607      	mov	r7, r0
 80036a2:	db01      	blt.n	80036a8 <_malloc_r+0x1c>
 80036a4:	42a9      	cmp	r1, r5
 80036a6:	d905      	bls.n	80036b4 <_malloc_r+0x28>
 80036a8:	230c      	movs	r3, #12
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	2600      	movs	r6, #0
 80036ae:	4630      	mov	r0, r6
 80036b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003788 <_malloc_r+0xfc>
 80036b8:	f000 f868 	bl	800378c <__malloc_lock>
 80036bc:	f8d8 3000 	ldr.w	r3, [r8]
 80036c0:	461c      	mov	r4, r3
 80036c2:	bb5c      	cbnz	r4, 800371c <_malloc_r+0x90>
 80036c4:	4629      	mov	r1, r5
 80036c6:	4638      	mov	r0, r7
 80036c8:	f7ff ffc0 	bl	800364c <sbrk_aligned>
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	4604      	mov	r4, r0
 80036d0:	d155      	bne.n	800377e <_malloc_r+0xf2>
 80036d2:	f8d8 4000 	ldr.w	r4, [r8]
 80036d6:	4626      	mov	r6, r4
 80036d8:	2e00      	cmp	r6, #0
 80036da:	d145      	bne.n	8003768 <_malloc_r+0xdc>
 80036dc:	2c00      	cmp	r4, #0
 80036de:	d048      	beq.n	8003772 <_malloc_r+0xe6>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	4631      	mov	r1, r6
 80036e4:	4638      	mov	r0, r7
 80036e6:	eb04 0903 	add.w	r9, r4, r3
 80036ea:	f000 f98d 	bl	8003a08 <_sbrk_r>
 80036ee:	4581      	cmp	r9, r0
 80036f0:	d13f      	bne.n	8003772 <_malloc_r+0xe6>
 80036f2:	6821      	ldr	r1, [r4, #0]
 80036f4:	1a6d      	subs	r5, r5, r1
 80036f6:	4629      	mov	r1, r5
 80036f8:	4638      	mov	r0, r7
 80036fa:	f7ff ffa7 	bl	800364c <sbrk_aligned>
 80036fe:	3001      	adds	r0, #1
 8003700:	d037      	beq.n	8003772 <_malloc_r+0xe6>
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	442b      	add	r3, r5
 8003706:	6023      	str	r3, [r4, #0]
 8003708:	f8d8 3000 	ldr.w	r3, [r8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d038      	beq.n	8003782 <_malloc_r+0xf6>
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	42a2      	cmp	r2, r4
 8003714:	d12b      	bne.n	800376e <_malloc_r+0xe2>
 8003716:	2200      	movs	r2, #0
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	e00f      	b.n	800373c <_malloc_r+0xb0>
 800371c:	6822      	ldr	r2, [r4, #0]
 800371e:	1b52      	subs	r2, r2, r5
 8003720:	d41f      	bmi.n	8003762 <_malloc_r+0xd6>
 8003722:	2a0b      	cmp	r2, #11
 8003724:	d917      	bls.n	8003756 <_malloc_r+0xca>
 8003726:	1961      	adds	r1, r4, r5
 8003728:	42a3      	cmp	r3, r4
 800372a:	6025      	str	r5, [r4, #0]
 800372c:	bf18      	it	ne
 800372e:	6059      	strne	r1, [r3, #4]
 8003730:	6863      	ldr	r3, [r4, #4]
 8003732:	bf08      	it	eq
 8003734:	f8c8 1000 	streq.w	r1, [r8]
 8003738:	5162      	str	r2, [r4, r5]
 800373a:	604b      	str	r3, [r1, #4]
 800373c:	4638      	mov	r0, r7
 800373e:	f104 060b 	add.w	r6, r4, #11
 8003742:	f000 f829 	bl	8003798 <__malloc_unlock>
 8003746:	f026 0607 	bic.w	r6, r6, #7
 800374a:	1d23      	adds	r3, r4, #4
 800374c:	1af2      	subs	r2, r6, r3
 800374e:	d0ae      	beq.n	80036ae <_malloc_r+0x22>
 8003750:	1b9b      	subs	r3, r3, r6
 8003752:	50a3      	str	r3, [r4, r2]
 8003754:	e7ab      	b.n	80036ae <_malloc_r+0x22>
 8003756:	42a3      	cmp	r3, r4
 8003758:	6862      	ldr	r2, [r4, #4]
 800375a:	d1dd      	bne.n	8003718 <_malloc_r+0x8c>
 800375c:	f8c8 2000 	str.w	r2, [r8]
 8003760:	e7ec      	b.n	800373c <_malloc_r+0xb0>
 8003762:	4623      	mov	r3, r4
 8003764:	6864      	ldr	r4, [r4, #4]
 8003766:	e7ac      	b.n	80036c2 <_malloc_r+0x36>
 8003768:	4634      	mov	r4, r6
 800376a:	6876      	ldr	r6, [r6, #4]
 800376c:	e7b4      	b.n	80036d8 <_malloc_r+0x4c>
 800376e:	4613      	mov	r3, r2
 8003770:	e7cc      	b.n	800370c <_malloc_r+0x80>
 8003772:	230c      	movs	r3, #12
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	4638      	mov	r0, r7
 8003778:	f000 f80e 	bl	8003798 <__malloc_unlock>
 800377c:	e797      	b.n	80036ae <_malloc_r+0x22>
 800377e:	6025      	str	r5, [r4, #0]
 8003780:	e7dc      	b.n	800373c <_malloc_r+0xb0>
 8003782:	605b      	str	r3, [r3, #4]
 8003784:	deff      	udf	#255	; 0xff
 8003786:	bf00      	nop
 8003788:	20000958 	.word	0x20000958

0800378c <__malloc_lock>:
 800378c:	4801      	ldr	r0, [pc, #4]	; (8003794 <__malloc_lock+0x8>)
 800378e:	f7ff bf0e 	b.w	80035ae <__retarget_lock_acquire_recursive>
 8003792:	bf00      	nop
 8003794:	20000954 	.word	0x20000954

08003798 <__malloc_unlock>:
 8003798:	4801      	ldr	r0, [pc, #4]	; (80037a0 <__malloc_unlock+0x8>)
 800379a:	f7ff bf09 	b.w	80035b0 <__retarget_lock_release_recursive>
 800379e:	bf00      	nop
 80037a0:	20000954 	.word	0x20000954

080037a4 <__sflush_r>:
 80037a4:	898a      	ldrh	r2, [r1, #12]
 80037a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037aa:	4605      	mov	r5, r0
 80037ac:	0710      	lsls	r0, r2, #28
 80037ae:	460c      	mov	r4, r1
 80037b0:	d458      	bmi.n	8003864 <__sflush_r+0xc0>
 80037b2:	684b      	ldr	r3, [r1, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	dc05      	bgt.n	80037c4 <__sflush_r+0x20>
 80037b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	dc02      	bgt.n	80037c4 <__sflush_r+0x20>
 80037be:	2000      	movs	r0, #0
 80037c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037c6:	2e00      	cmp	r6, #0
 80037c8:	d0f9      	beq.n	80037be <__sflush_r+0x1a>
 80037ca:	2300      	movs	r3, #0
 80037cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037d0:	682f      	ldr	r7, [r5, #0]
 80037d2:	6a21      	ldr	r1, [r4, #32]
 80037d4:	602b      	str	r3, [r5, #0]
 80037d6:	d032      	beq.n	800383e <__sflush_r+0x9a>
 80037d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037da:	89a3      	ldrh	r3, [r4, #12]
 80037dc:	075a      	lsls	r2, r3, #29
 80037de:	d505      	bpl.n	80037ec <__sflush_r+0x48>
 80037e0:	6863      	ldr	r3, [r4, #4]
 80037e2:	1ac0      	subs	r0, r0, r3
 80037e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037e6:	b10b      	cbz	r3, 80037ec <__sflush_r+0x48>
 80037e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037ea:	1ac0      	subs	r0, r0, r3
 80037ec:	2300      	movs	r3, #0
 80037ee:	4602      	mov	r2, r0
 80037f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037f2:	6a21      	ldr	r1, [r4, #32]
 80037f4:	4628      	mov	r0, r5
 80037f6:	47b0      	blx	r6
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	89a3      	ldrh	r3, [r4, #12]
 80037fc:	d106      	bne.n	800380c <__sflush_r+0x68>
 80037fe:	6829      	ldr	r1, [r5, #0]
 8003800:	291d      	cmp	r1, #29
 8003802:	d82b      	bhi.n	800385c <__sflush_r+0xb8>
 8003804:	4a29      	ldr	r2, [pc, #164]	; (80038ac <__sflush_r+0x108>)
 8003806:	410a      	asrs	r2, r1
 8003808:	07d6      	lsls	r6, r2, #31
 800380a:	d427      	bmi.n	800385c <__sflush_r+0xb8>
 800380c:	2200      	movs	r2, #0
 800380e:	6062      	str	r2, [r4, #4]
 8003810:	04d9      	lsls	r1, r3, #19
 8003812:	6922      	ldr	r2, [r4, #16]
 8003814:	6022      	str	r2, [r4, #0]
 8003816:	d504      	bpl.n	8003822 <__sflush_r+0x7e>
 8003818:	1c42      	adds	r2, r0, #1
 800381a:	d101      	bne.n	8003820 <__sflush_r+0x7c>
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	b903      	cbnz	r3, 8003822 <__sflush_r+0x7e>
 8003820:	6560      	str	r0, [r4, #84]	; 0x54
 8003822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003824:	602f      	str	r7, [r5, #0]
 8003826:	2900      	cmp	r1, #0
 8003828:	d0c9      	beq.n	80037be <__sflush_r+0x1a>
 800382a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800382e:	4299      	cmp	r1, r3
 8003830:	d002      	beq.n	8003838 <__sflush_r+0x94>
 8003832:	4628      	mov	r0, r5
 8003834:	f7ff febe 	bl	80035b4 <_free_r>
 8003838:	2000      	movs	r0, #0
 800383a:	6360      	str	r0, [r4, #52]	; 0x34
 800383c:	e7c0      	b.n	80037c0 <__sflush_r+0x1c>
 800383e:	2301      	movs	r3, #1
 8003840:	4628      	mov	r0, r5
 8003842:	47b0      	blx	r6
 8003844:	1c41      	adds	r1, r0, #1
 8003846:	d1c8      	bne.n	80037da <__sflush_r+0x36>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0c5      	beq.n	80037da <__sflush_r+0x36>
 800384e:	2b1d      	cmp	r3, #29
 8003850:	d001      	beq.n	8003856 <__sflush_r+0xb2>
 8003852:	2b16      	cmp	r3, #22
 8003854:	d101      	bne.n	800385a <__sflush_r+0xb6>
 8003856:	602f      	str	r7, [r5, #0]
 8003858:	e7b1      	b.n	80037be <__sflush_r+0x1a>
 800385a:	89a3      	ldrh	r3, [r4, #12]
 800385c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003860:	81a3      	strh	r3, [r4, #12]
 8003862:	e7ad      	b.n	80037c0 <__sflush_r+0x1c>
 8003864:	690f      	ldr	r7, [r1, #16]
 8003866:	2f00      	cmp	r7, #0
 8003868:	d0a9      	beq.n	80037be <__sflush_r+0x1a>
 800386a:	0793      	lsls	r3, r2, #30
 800386c:	680e      	ldr	r6, [r1, #0]
 800386e:	bf08      	it	eq
 8003870:	694b      	ldreq	r3, [r1, #20]
 8003872:	600f      	str	r7, [r1, #0]
 8003874:	bf18      	it	ne
 8003876:	2300      	movne	r3, #0
 8003878:	eba6 0807 	sub.w	r8, r6, r7
 800387c:	608b      	str	r3, [r1, #8]
 800387e:	f1b8 0f00 	cmp.w	r8, #0
 8003882:	dd9c      	ble.n	80037be <__sflush_r+0x1a>
 8003884:	6a21      	ldr	r1, [r4, #32]
 8003886:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003888:	4643      	mov	r3, r8
 800388a:	463a      	mov	r2, r7
 800388c:	4628      	mov	r0, r5
 800388e:	47b0      	blx	r6
 8003890:	2800      	cmp	r0, #0
 8003892:	dc06      	bgt.n	80038a2 <__sflush_r+0xfe>
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800389a:	81a3      	strh	r3, [r4, #12]
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	e78e      	b.n	80037c0 <__sflush_r+0x1c>
 80038a2:	4407      	add	r7, r0
 80038a4:	eba8 0800 	sub.w	r8, r8, r0
 80038a8:	e7e9      	b.n	800387e <__sflush_r+0xda>
 80038aa:	bf00      	nop
 80038ac:	dfbffffe 	.word	0xdfbffffe

080038b0 <_fflush_r>:
 80038b0:	b538      	push	{r3, r4, r5, lr}
 80038b2:	690b      	ldr	r3, [r1, #16]
 80038b4:	4605      	mov	r5, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	b913      	cbnz	r3, 80038c0 <_fflush_r+0x10>
 80038ba:	2500      	movs	r5, #0
 80038bc:	4628      	mov	r0, r5
 80038be:	bd38      	pop	{r3, r4, r5, pc}
 80038c0:	b118      	cbz	r0, 80038ca <_fflush_r+0x1a>
 80038c2:	6a03      	ldr	r3, [r0, #32]
 80038c4:	b90b      	cbnz	r3, 80038ca <_fflush_r+0x1a>
 80038c6:	f7ff fc8f 	bl	80031e8 <__sinit>
 80038ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f3      	beq.n	80038ba <_fflush_r+0xa>
 80038d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80038d4:	07d0      	lsls	r0, r2, #31
 80038d6:	d404      	bmi.n	80038e2 <_fflush_r+0x32>
 80038d8:	0599      	lsls	r1, r3, #22
 80038da:	d402      	bmi.n	80038e2 <_fflush_r+0x32>
 80038dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038de:	f7ff fe66 	bl	80035ae <__retarget_lock_acquire_recursive>
 80038e2:	4628      	mov	r0, r5
 80038e4:	4621      	mov	r1, r4
 80038e6:	f7ff ff5d 	bl	80037a4 <__sflush_r>
 80038ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038ec:	07da      	lsls	r2, r3, #31
 80038ee:	4605      	mov	r5, r0
 80038f0:	d4e4      	bmi.n	80038bc <_fflush_r+0xc>
 80038f2:	89a3      	ldrh	r3, [r4, #12]
 80038f4:	059b      	lsls	r3, r3, #22
 80038f6:	d4e1      	bmi.n	80038bc <_fflush_r+0xc>
 80038f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038fa:	f7ff fe59 	bl	80035b0 <__retarget_lock_release_recursive>
 80038fe:	e7dd      	b.n	80038bc <_fflush_r+0xc>

08003900 <__swhatbuf_r>:
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	460c      	mov	r4, r1
 8003904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003908:	2900      	cmp	r1, #0
 800390a:	b096      	sub	sp, #88	; 0x58
 800390c:	4615      	mov	r5, r2
 800390e:	461e      	mov	r6, r3
 8003910:	da0d      	bge.n	800392e <__swhatbuf_r+0x2e>
 8003912:	89a3      	ldrh	r3, [r4, #12]
 8003914:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003918:	f04f 0100 	mov.w	r1, #0
 800391c:	bf0c      	ite	eq
 800391e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003922:	2340      	movne	r3, #64	; 0x40
 8003924:	2000      	movs	r0, #0
 8003926:	6031      	str	r1, [r6, #0]
 8003928:	602b      	str	r3, [r5, #0]
 800392a:	b016      	add	sp, #88	; 0x58
 800392c:	bd70      	pop	{r4, r5, r6, pc}
 800392e:	466a      	mov	r2, sp
 8003930:	f000 f848 	bl	80039c4 <_fstat_r>
 8003934:	2800      	cmp	r0, #0
 8003936:	dbec      	blt.n	8003912 <__swhatbuf_r+0x12>
 8003938:	9901      	ldr	r1, [sp, #4]
 800393a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800393e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003942:	4259      	negs	r1, r3
 8003944:	4159      	adcs	r1, r3
 8003946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800394a:	e7eb      	b.n	8003924 <__swhatbuf_r+0x24>

0800394c <__smakebuf_r>:
 800394c:	898b      	ldrh	r3, [r1, #12]
 800394e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003950:	079d      	lsls	r5, r3, #30
 8003952:	4606      	mov	r6, r0
 8003954:	460c      	mov	r4, r1
 8003956:	d507      	bpl.n	8003968 <__smakebuf_r+0x1c>
 8003958:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800395c:	6023      	str	r3, [r4, #0]
 800395e:	6123      	str	r3, [r4, #16]
 8003960:	2301      	movs	r3, #1
 8003962:	6163      	str	r3, [r4, #20]
 8003964:	b002      	add	sp, #8
 8003966:	bd70      	pop	{r4, r5, r6, pc}
 8003968:	ab01      	add	r3, sp, #4
 800396a:	466a      	mov	r2, sp
 800396c:	f7ff ffc8 	bl	8003900 <__swhatbuf_r>
 8003970:	9900      	ldr	r1, [sp, #0]
 8003972:	4605      	mov	r5, r0
 8003974:	4630      	mov	r0, r6
 8003976:	f7ff fe89 	bl	800368c <_malloc_r>
 800397a:	b948      	cbnz	r0, 8003990 <__smakebuf_r+0x44>
 800397c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003980:	059a      	lsls	r2, r3, #22
 8003982:	d4ef      	bmi.n	8003964 <__smakebuf_r+0x18>
 8003984:	f023 0303 	bic.w	r3, r3, #3
 8003988:	f043 0302 	orr.w	r3, r3, #2
 800398c:	81a3      	strh	r3, [r4, #12]
 800398e:	e7e3      	b.n	8003958 <__smakebuf_r+0xc>
 8003990:	89a3      	ldrh	r3, [r4, #12]
 8003992:	6020      	str	r0, [r4, #0]
 8003994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003998:	81a3      	strh	r3, [r4, #12]
 800399a:	9b00      	ldr	r3, [sp, #0]
 800399c:	6163      	str	r3, [r4, #20]
 800399e:	9b01      	ldr	r3, [sp, #4]
 80039a0:	6120      	str	r0, [r4, #16]
 80039a2:	b15b      	cbz	r3, 80039bc <__smakebuf_r+0x70>
 80039a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039a8:	4630      	mov	r0, r6
 80039aa:	f000 f81d 	bl	80039e8 <_isatty_r>
 80039ae:	b128      	cbz	r0, 80039bc <__smakebuf_r+0x70>
 80039b0:	89a3      	ldrh	r3, [r4, #12]
 80039b2:	f023 0303 	bic.w	r3, r3, #3
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	81a3      	strh	r3, [r4, #12]
 80039bc:	89a3      	ldrh	r3, [r4, #12]
 80039be:	431d      	orrs	r5, r3
 80039c0:	81a5      	strh	r5, [r4, #12]
 80039c2:	e7cf      	b.n	8003964 <__smakebuf_r+0x18>

080039c4 <_fstat_r>:
 80039c4:	b538      	push	{r3, r4, r5, lr}
 80039c6:	4d07      	ldr	r5, [pc, #28]	; (80039e4 <_fstat_r+0x20>)
 80039c8:	2300      	movs	r3, #0
 80039ca:	4604      	mov	r4, r0
 80039cc:	4608      	mov	r0, r1
 80039ce:	4611      	mov	r1, r2
 80039d0:	602b      	str	r3, [r5, #0]
 80039d2:	f000 f948 	bl	8003c66 <_fstat>
 80039d6:	1c43      	adds	r3, r0, #1
 80039d8:	d102      	bne.n	80039e0 <_fstat_r+0x1c>
 80039da:	682b      	ldr	r3, [r5, #0]
 80039dc:	b103      	cbz	r3, 80039e0 <_fstat_r+0x1c>
 80039de:	6023      	str	r3, [r4, #0]
 80039e0:	bd38      	pop	{r3, r4, r5, pc}
 80039e2:	bf00      	nop
 80039e4:	20000950 	.word	0x20000950

080039e8 <_isatty_r>:
 80039e8:	b538      	push	{r3, r4, r5, lr}
 80039ea:	4d06      	ldr	r5, [pc, #24]	; (8003a04 <_isatty_r+0x1c>)
 80039ec:	2300      	movs	r3, #0
 80039ee:	4604      	mov	r4, r0
 80039f0:	4608      	mov	r0, r1
 80039f2:	602b      	str	r3, [r5, #0]
 80039f4:	f000 fa9e 	bl	8003f34 <_isatty>
 80039f8:	1c43      	adds	r3, r0, #1
 80039fa:	d102      	bne.n	8003a02 <_isatty_r+0x1a>
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	b103      	cbz	r3, 8003a02 <_isatty_r+0x1a>
 8003a00:	6023      	str	r3, [r4, #0]
 8003a02:	bd38      	pop	{r3, r4, r5, pc}
 8003a04:	20000950 	.word	0x20000950

08003a08 <_sbrk_r>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	4d06      	ldr	r5, [pc, #24]	; (8003a24 <_sbrk_r+0x1c>)
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	4604      	mov	r4, r0
 8003a10:	4608      	mov	r0, r1
 8003a12:	602b      	str	r3, [r5, #0]
 8003a14:	f7fd f908 	bl	8000c28 <_sbrk>
 8003a18:	1c43      	adds	r3, r0, #1
 8003a1a:	d102      	bne.n	8003a22 <_sbrk_r+0x1a>
 8003a1c:	682b      	ldr	r3, [r5, #0]
 8003a1e:	b103      	cbz	r3, 8003a22 <_sbrk_r+0x1a>
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	bd38      	pop	{r3, r4, r5, pc}
 8003a24:	20000950 	.word	0x20000950

08003a28 <findslot>:
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <findslot+0x2c>)
 8003a2a:	b510      	push	{r4, lr}
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	b118      	cbz	r0, 8003a3a <findslot+0x12>
 8003a32:	6a03      	ldr	r3, [r0, #32]
 8003a34:	b90b      	cbnz	r3, 8003a3a <findslot+0x12>
 8003a36:	f7ff fbd7 	bl	80031e8 <__sinit>
 8003a3a:	2c13      	cmp	r4, #19
 8003a3c:	d807      	bhi.n	8003a4e <findslot+0x26>
 8003a3e:	4806      	ldr	r0, [pc, #24]	; (8003a58 <findslot+0x30>)
 8003a40:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003a44:	3201      	adds	r2, #1
 8003a46:	d002      	beq.n	8003a4e <findslot+0x26>
 8003a48:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003a4c:	bd10      	pop	{r4, pc}
 8003a4e:	2000      	movs	r0, #0
 8003a50:	e7fc      	b.n	8003a4c <findslot+0x24>
 8003a52:	bf00      	nop
 8003a54:	20000064 	.word	0x20000064
 8003a58:	2000096c 	.word	0x2000096c

08003a5c <error>:
 8003a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5e:	4604      	mov	r4, r0
 8003a60:	f7ff fd7a 	bl	8003558 <__errno>
 8003a64:	2613      	movs	r6, #19
 8003a66:	4605      	mov	r5, r0
 8003a68:	2700      	movs	r7, #0
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	4639      	mov	r1, r7
 8003a6e:	beab      	bkpt	0x00ab
 8003a70:	4606      	mov	r6, r0
 8003a72:	602e      	str	r6, [r5, #0]
 8003a74:	4620      	mov	r0, r4
 8003a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a78 <checkerror>:
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	d101      	bne.n	8003a80 <checkerror+0x8>
 8003a7c:	f7ff bfee 	b.w	8003a5c <error>
 8003a80:	4770      	bx	lr

08003a82 <_swiread>:
 8003a82:	b530      	push	{r4, r5, lr}
 8003a84:	b085      	sub	sp, #20
 8003a86:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003a8a:	9203      	str	r2, [sp, #12]
 8003a8c:	2406      	movs	r4, #6
 8003a8e:	ad01      	add	r5, sp, #4
 8003a90:	4620      	mov	r0, r4
 8003a92:	4629      	mov	r1, r5
 8003a94:	beab      	bkpt	0x00ab
 8003a96:	4604      	mov	r4, r0
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f7ff ffed 	bl	8003a78 <checkerror>
 8003a9e:	b005      	add	sp, #20
 8003aa0:	bd30      	pop	{r4, r5, pc}

08003aa2 <_read>:
 8003aa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003aa4:	4615      	mov	r5, r2
 8003aa6:	9101      	str	r1, [sp, #4]
 8003aa8:	f7ff ffbe 	bl	8003a28 <findslot>
 8003aac:	9901      	ldr	r1, [sp, #4]
 8003aae:	4604      	mov	r4, r0
 8003ab0:	b938      	cbnz	r0, 8003ac2 <_read+0x20>
 8003ab2:	f7ff fd51 	bl	8003558 <__errno>
 8003ab6:	2309      	movs	r3, #9
 8003ab8:	6003      	str	r3, [r0, #0]
 8003aba:	f04f 30ff 	mov.w	r0, #4294967295
 8003abe:	b003      	add	sp, #12
 8003ac0:	bd30      	pop	{r4, r5, pc}
 8003ac2:	6800      	ldr	r0, [r0, #0]
 8003ac4:	462a      	mov	r2, r5
 8003ac6:	f7ff ffdc 	bl	8003a82 <_swiread>
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	d0f7      	beq.n	8003abe <_read+0x1c>
 8003ace:	6863      	ldr	r3, [r4, #4]
 8003ad0:	1a2a      	subs	r2, r5, r0
 8003ad2:	4413      	add	r3, r2
 8003ad4:	6063      	str	r3, [r4, #4]
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	e7f1      	b.n	8003abe <_read+0x1c>

08003ada <_swilseek>:
 8003ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003adc:	460c      	mov	r4, r1
 8003ade:	4616      	mov	r6, r2
 8003ae0:	f7ff ffa2 	bl	8003a28 <findslot>
 8003ae4:	4605      	mov	r5, r0
 8003ae6:	b940      	cbnz	r0, 8003afa <_swilseek+0x20>
 8003ae8:	f7ff fd36 	bl	8003558 <__errno>
 8003aec:	2309      	movs	r3, #9
 8003aee:	6003      	str	r3, [r0, #0]
 8003af0:	f04f 34ff 	mov.w	r4, #4294967295
 8003af4:	4620      	mov	r0, r4
 8003af6:	b003      	add	sp, #12
 8003af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003afa:	2e02      	cmp	r6, #2
 8003afc:	d903      	bls.n	8003b06 <_swilseek+0x2c>
 8003afe:	f7ff fd2b 	bl	8003558 <__errno>
 8003b02:	2316      	movs	r3, #22
 8003b04:	e7f3      	b.n	8003aee <_swilseek+0x14>
 8003b06:	2e01      	cmp	r6, #1
 8003b08:	d112      	bne.n	8003b30 <_swilseek+0x56>
 8003b0a:	6843      	ldr	r3, [r0, #4]
 8003b0c:	18e4      	adds	r4, r4, r3
 8003b0e:	d4f6      	bmi.n	8003afe <_swilseek+0x24>
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	260a      	movs	r6, #10
 8003b14:	e9cd 3400 	strd	r3, r4, [sp]
 8003b18:	466f      	mov	r7, sp
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	4639      	mov	r1, r7
 8003b1e:	beab      	bkpt	0x00ab
 8003b20:	4606      	mov	r6, r0
 8003b22:	4630      	mov	r0, r6
 8003b24:	f7ff ffa8 	bl	8003a78 <checkerror>
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	dbe1      	blt.n	8003af0 <_swilseek+0x16>
 8003b2c:	606c      	str	r4, [r5, #4]
 8003b2e:	e7e1      	b.n	8003af4 <_swilseek+0x1a>
 8003b30:	2e02      	cmp	r6, #2
 8003b32:	6803      	ldr	r3, [r0, #0]
 8003b34:	d1ec      	bne.n	8003b10 <_swilseek+0x36>
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	260c      	movs	r6, #12
 8003b3a:	466f      	mov	r7, sp
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	4639      	mov	r1, r7
 8003b40:	beab      	bkpt	0x00ab
 8003b42:	4606      	mov	r6, r0
 8003b44:	4630      	mov	r0, r6
 8003b46:	f7ff ff97 	bl	8003a78 <checkerror>
 8003b4a:	1c43      	adds	r3, r0, #1
 8003b4c:	d0d0      	beq.n	8003af0 <_swilseek+0x16>
 8003b4e:	4404      	add	r4, r0
 8003b50:	e7de      	b.n	8003b10 <_swilseek+0x36>

08003b52 <_lseek>:
 8003b52:	f7ff bfc2 	b.w	8003ada <_swilseek>

08003b56 <_swiwrite>:
 8003b56:	b530      	push	{r4, r5, lr}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003b5e:	9203      	str	r2, [sp, #12]
 8003b60:	2405      	movs	r4, #5
 8003b62:	ad01      	add	r5, sp, #4
 8003b64:	4620      	mov	r0, r4
 8003b66:	4629      	mov	r1, r5
 8003b68:	beab      	bkpt	0x00ab
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	f7ff ff83 	bl	8003a78 <checkerror>
 8003b72:	b005      	add	sp, #20
 8003b74:	bd30      	pop	{r4, r5, pc}

08003b76 <_write>:
 8003b76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b78:	4615      	mov	r5, r2
 8003b7a:	9101      	str	r1, [sp, #4]
 8003b7c:	f7ff ff54 	bl	8003a28 <findslot>
 8003b80:	9901      	ldr	r1, [sp, #4]
 8003b82:	4604      	mov	r4, r0
 8003b84:	b930      	cbnz	r0, 8003b94 <_write+0x1e>
 8003b86:	f7ff fce7 	bl	8003558 <__errno>
 8003b8a:	2309      	movs	r3, #9
 8003b8c:	6003      	str	r3, [r0, #0]
 8003b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b92:	e012      	b.n	8003bba <_write+0x44>
 8003b94:	6800      	ldr	r0, [r0, #0]
 8003b96:	462a      	mov	r2, r5
 8003b98:	f7ff ffdd 	bl	8003b56 <_swiwrite>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	dbf6      	blt.n	8003b8e <_write+0x18>
 8003ba0:	6862      	ldr	r2, [r4, #4]
 8003ba2:	1a2b      	subs	r3, r5, r0
 8003ba4:	441a      	add	r2, r3
 8003ba6:	42a8      	cmp	r0, r5
 8003ba8:	6062      	str	r2, [r4, #4]
 8003baa:	d105      	bne.n	8003bb8 <_write+0x42>
 8003bac:	2000      	movs	r0, #0
 8003bae:	b003      	add	sp, #12
 8003bb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bb4:	f7ff bf52 	b.w	8003a5c <error>
 8003bb8:	4618      	mov	r0, r3
 8003bba:	b003      	add	sp, #12
 8003bbc:	bd30      	pop	{r4, r5, pc}

08003bbe <_swiclose>:
 8003bbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bc0:	2402      	movs	r4, #2
 8003bc2:	9001      	str	r0, [sp, #4]
 8003bc4:	ad01      	add	r5, sp, #4
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	4629      	mov	r1, r5
 8003bca:	beab      	bkpt	0x00ab
 8003bcc:	4604      	mov	r4, r0
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f7ff ff52 	bl	8003a78 <checkerror>
 8003bd4:	b003      	add	sp, #12
 8003bd6:	bd30      	pop	{r4, r5, pc}

08003bd8 <_close>:
 8003bd8:	b538      	push	{r3, r4, r5, lr}
 8003bda:	4605      	mov	r5, r0
 8003bdc:	f7ff ff24 	bl	8003a28 <findslot>
 8003be0:	4604      	mov	r4, r0
 8003be2:	b930      	cbnz	r0, 8003bf2 <_close+0x1a>
 8003be4:	f7ff fcb8 	bl	8003558 <__errno>
 8003be8:	2309      	movs	r3, #9
 8003bea:	6003      	str	r3, [r0, #0]
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	bd38      	pop	{r3, r4, r5, pc}
 8003bf2:	3d01      	subs	r5, #1
 8003bf4:	2d01      	cmp	r5, #1
 8003bf6:	d809      	bhi.n	8003c0c <_close+0x34>
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <_close+0x48>)
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d104      	bne.n	8003c0c <_close+0x34>
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295
 8003c06:	6003      	str	r3, [r0, #0]
 8003c08:	2000      	movs	r0, #0
 8003c0a:	e7f1      	b.n	8003bf0 <_close+0x18>
 8003c0c:	6820      	ldr	r0, [r4, #0]
 8003c0e:	f7ff ffd6 	bl	8003bbe <_swiclose>
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d1ec      	bne.n	8003bf0 <_close+0x18>
 8003c16:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1a:	6023      	str	r3, [r4, #0]
 8003c1c:	e7e8      	b.n	8003bf0 <_close+0x18>
 8003c1e:	bf00      	nop
 8003c20:	2000096c 	.word	0x2000096c

08003c24 <_swistat>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	460c      	mov	r4, r1
 8003c28:	f7ff fefe 	bl	8003a28 <findslot>
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	b930      	cbnz	r0, 8003c3e <_swistat+0x1a>
 8003c30:	f7ff fc92 	bl	8003558 <__errno>
 8003c34:	2309      	movs	r3, #9
 8003c36:	6003      	str	r3, [r0, #0]
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	bd70      	pop	{r4, r5, r6, pc}
 8003c3e:	6863      	ldr	r3, [r4, #4]
 8003c40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c44:	6063      	str	r3, [r4, #4]
 8003c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c4a:	64a3      	str	r3, [r4, #72]	; 0x48
 8003c4c:	260c      	movs	r6, #12
 8003c4e:	4630      	mov	r0, r6
 8003c50:	4629      	mov	r1, r5
 8003c52:	beab      	bkpt	0x00ab
 8003c54:	4605      	mov	r5, r0
 8003c56:	4628      	mov	r0, r5
 8003c58:	f7ff ff0e 	bl	8003a78 <checkerror>
 8003c5c:	1c43      	adds	r3, r0, #1
 8003c5e:	bf1c      	itt	ne
 8003c60:	6120      	strne	r0, [r4, #16]
 8003c62:	2000      	movne	r0, #0
 8003c64:	e7ea      	b.n	8003c3c <_swistat+0x18>

08003c66 <_fstat>:
 8003c66:	460b      	mov	r3, r1
 8003c68:	b510      	push	{r4, lr}
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	2258      	movs	r2, #88	; 0x58
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff fc23 	bl	80034bc <memset>
 8003c76:	4601      	mov	r1, r0
 8003c78:	4620      	mov	r0, r4
 8003c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c7e:	f7ff bfd1 	b.w	8003c24 <_swistat>

08003c82 <_stat>:
 8003c82:	b538      	push	{r3, r4, r5, lr}
 8003c84:	460d      	mov	r5, r1
 8003c86:	4604      	mov	r4, r0
 8003c88:	2258      	movs	r2, #88	; 0x58
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	f7ff fc15 	bl	80034bc <memset>
 8003c92:	4620      	mov	r0, r4
 8003c94:	2100      	movs	r1, #0
 8003c96:	f000 f811 	bl	8003cbc <_swiopen>
 8003c9a:	1c43      	adds	r3, r0, #1
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	d00b      	beq.n	8003cb8 <_stat+0x36>
 8003ca0:	686b      	ldr	r3, [r5, #4]
 8003ca2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003ca6:	606b      	str	r3, [r5, #4]
 8003ca8:	4629      	mov	r1, r5
 8003caa:	f7ff ffbb 	bl	8003c24 <_swistat>
 8003cae:	4605      	mov	r5, r0
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f7ff ff91 	bl	8003bd8 <_close>
 8003cb6:	462c      	mov	r4, r5
 8003cb8:	4620      	mov	r0, r4
 8003cba:	bd38      	pop	{r3, r4, r5, pc}

08003cbc <_swiopen>:
 8003cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cc0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003d6c <_swiopen+0xb0>
 8003cc4:	b097      	sub	sp, #92	; 0x5c
 8003cc6:	4607      	mov	r7, r0
 8003cc8:	460e      	mov	r6, r1
 8003cca:	2500      	movs	r5, #0
 8003ccc:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8003cd0:	1c61      	adds	r1, r4, #1
 8003cd2:	d037      	beq.n	8003d44 <_swiopen+0x88>
 8003cd4:	3501      	adds	r5, #1
 8003cd6:	2d14      	cmp	r5, #20
 8003cd8:	d1f8      	bne.n	8003ccc <_swiopen+0x10>
 8003cda:	f7ff fc3d 	bl	8003558 <__errno>
 8003cde:	2318      	movs	r3, #24
 8003ce0:	6003      	str	r3, [r0, #0]
 8003ce2:	f04f 34ff 	mov.w	r4, #4294967295
 8003ce6:	e03d      	b.n	8003d64 <_swiopen+0xa8>
 8003ce8:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003cec:	f240 6301 	movw	r3, #1537	; 0x601
 8003cf0:	07b2      	lsls	r2, r6, #30
 8003cf2:	bf48      	it	mi
 8003cf4:	f044 0402 	orrmi.w	r4, r4, #2
 8003cf8:	421e      	tst	r6, r3
 8003cfa:	bf18      	it	ne
 8003cfc:	f044 0404 	orrne.w	r4, r4, #4
 8003d00:	0733      	lsls	r3, r6, #28
 8003d02:	bf48      	it	mi
 8003d04:	f024 0404 	bicmi.w	r4, r4, #4
 8003d08:	4638      	mov	r0, r7
 8003d0a:	bf48      	it	mi
 8003d0c:	f044 0408 	orrmi.w	r4, r4, #8
 8003d10:	9700      	str	r7, [sp, #0]
 8003d12:	f7fc fa6b 	bl	80001ec <strlen>
 8003d16:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003d1a:	2401      	movs	r4, #1
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	4649      	mov	r1, r9
 8003d20:	beab      	bkpt	0x00ab
 8003d22:	4604      	mov	r4, r0
 8003d24:	2c00      	cmp	r4, #0
 8003d26:	db08      	blt.n	8003d3a <_swiopen+0x7e>
 8003d28:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003d2c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8003d30:	2300      	movs	r3, #0
 8003d32:	f8c8 3004 	str.w	r3, [r8, #4]
 8003d36:	462c      	mov	r4, r5
 8003d38:	e014      	b.n	8003d64 <_swiopen+0xa8>
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f7ff fe8e 	bl	8003a5c <error>
 8003d40:	4604      	mov	r4, r0
 8003d42:	e00f      	b.n	8003d64 <_swiopen+0xa8>
 8003d44:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003d48:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003d4c:	46e9      	mov	r9, sp
 8003d4e:	d1cb      	bne.n	8003ce8 <_swiopen+0x2c>
 8003d50:	4649      	mov	r1, r9
 8003d52:	4638      	mov	r0, r7
 8003d54:	f7ff ff95 	bl	8003c82 <_stat>
 8003d58:	3001      	adds	r0, #1
 8003d5a:	d0c5      	beq.n	8003ce8 <_swiopen+0x2c>
 8003d5c:	f7ff fbfc 	bl	8003558 <__errno>
 8003d60:	2311      	movs	r3, #17
 8003d62:	6003      	str	r3, [r0, #0]
 8003d64:	4620      	mov	r0, r4
 8003d66:	b017      	add	sp, #92	; 0x5c
 8003d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d6c:	2000096c 	.word	0x2000096c

08003d70 <_get_semihosting_exts>:
 8003d70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d74:	4606      	mov	r6, r0
 8003d76:	460f      	mov	r7, r1
 8003d78:	482a      	ldr	r0, [pc, #168]	; (8003e24 <_get_semihosting_exts+0xb4>)
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4615      	mov	r5, r2
 8003d7e:	f7ff ff9d 	bl	8003cbc <_swiopen>
 8003d82:	462a      	mov	r2, r5
 8003d84:	4604      	mov	r4, r0
 8003d86:	2100      	movs	r1, #0
 8003d88:	4630      	mov	r0, r6
 8003d8a:	f7ff fb97 	bl	80034bc <memset>
 8003d8e:	1c63      	adds	r3, r4, #1
 8003d90:	d016      	beq.n	8003dc0 <_get_semihosting_exts+0x50>
 8003d92:	4620      	mov	r0, r4
 8003d94:	f7ff fe48 	bl	8003a28 <findslot>
 8003d98:	f04f 080c 	mov.w	r8, #12
 8003d9c:	4681      	mov	r9, r0
 8003d9e:	4640      	mov	r0, r8
 8003da0:	4649      	mov	r1, r9
 8003da2:	beab      	bkpt	0x00ab
 8003da4:	4680      	mov	r8, r0
 8003da6:	4640      	mov	r0, r8
 8003da8:	f7ff fe66 	bl	8003a78 <checkerror>
 8003dac:	2803      	cmp	r0, #3
 8003dae:	dd02      	ble.n	8003db6 <_get_semihosting_exts+0x46>
 8003db0:	1ec3      	subs	r3, r0, #3
 8003db2:	42ab      	cmp	r3, r5
 8003db4:	dc08      	bgt.n	8003dc8 <_get_semihosting_exts+0x58>
 8003db6:	4620      	mov	r0, r4
 8003db8:	f7ff ff0e 	bl	8003bd8 <_close>
 8003dbc:	f04f 34ff 	mov.w	r4, #4294967295
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	b003      	add	sp, #12
 8003dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003dc8:	2204      	movs	r2, #4
 8003dca:	eb0d 0102 	add.w	r1, sp, r2
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f7ff fe67 	bl	8003aa2 <_read>
 8003dd4:	2803      	cmp	r0, #3
 8003dd6:	ddee      	ble.n	8003db6 <_get_semihosting_exts+0x46>
 8003dd8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ddc:	2b53      	cmp	r3, #83	; 0x53
 8003dde:	d1ea      	bne.n	8003db6 <_get_semihosting_exts+0x46>
 8003de0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003de4:	2b48      	cmp	r3, #72	; 0x48
 8003de6:	d1e6      	bne.n	8003db6 <_get_semihosting_exts+0x46>
 8003de8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003dec:	2b46      	cmp	r3, #70	; 0x46
 8003dee:	d1e2      	bne.n	8003db6 <_get_semihosting_exts+0x46>
 8003df0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003df4:	2b42      	cmp	r3, #66	; 0x42
 8003df6:	d1de      	bne.n	8003db6 <_get_semihosting_exts+0x46>
 8003df8:	2201      	movs	r2, #1
 8003dfa:	4639      	mov	r1, r7
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f7ff fe6c 	bl	8003ada <_swilseek>
 8003e02:	2800      	cmp	r0, #0
 8003e04:	dbd7      	blt.n	8003db6 <_get_semihosting_exts+0x46>
 8003e06:	462a      	mov	r2, r5
 8003e08:	4631      	mov	r1, r6
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f7ff fe49 	bl	8003aa2 <_read>
 8003e10:	4605      	mov	r5, r0
 8003e12:	4620      	mov	r0, r4
 8003e14:	f7ff fee0 	bl	8003bd8 <_close>
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f7ff fe2d 	bl	8003a78 <checkerror>
 8003e1e:	4604      	mov	r4, r0
 8003e20:	e7ce      	b.n	8003dc0 <_get_semihosting_exts+0x50>
 8003e22:	bf00      	nop
 8003e24:	08003fa8 	.word	0x08003fa8

08003e28 <initialise_semihosting_exts>:
 8003e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e2a:	4d0a      	ldr	r5, [pc, #40]	; (8003e54 <initialise_semihosting_exts+0x2c>)
 8003e2c:	4c0a      	ldr	r4, [pc, #40]	; (8003e58 <initialise_semihosting_exts+0x30>)
 8003e2e:	2100      	movs	r1, #0
 8003e30:	2201      	movs	r2, #1
 8003e32:	a801      	add	r0, sp, #4
 8003e34:	6029      	str	r1, [r5, #0]
 8003e36:	6022      	str	r2, [r4, #0]
 8003e38:	f7ff ff9a 	bl	8003d70 <_get_semihosting_exts>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	dd07      	ble.n	8003e50 <initialise_semihosting_exts+0x28>
 8003e40:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e44:	f003 0201 	and.w	r2, r3, #1
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	602a      	str	r2, [r5, #0]
 8003e4e:	6023      	str	r3, [r4, #0]
 8003e50:	b003      	add	sp, #12
 8003e52:	bd30      	pop	{r4, r5, pc}
 8003e54:	20000068 	.word	0x20000068
 8003e58:	2000006c 	.word	0x2000006c

08003e5c <_has_ext_stdout_stderr>:
 8003e5c:	b510      	push	{r4, lr}
 8003e5e:	4c04      	ldr	r4, [pc, #16]	; (8003e70 <_has_ext_stdout_stderr+0x14>)
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	da01      	bge.n	8003e6a <_has_ext_stdout_stderr+0xe>
 8003e66:	f7ff ffdf 	bl	8003e28 <initialise_semihosting_exts>
 8003e6a:	6820      	ldr	r0, [r4, #0]
 8003e6c:	bd10      	pop	{r4, pc}
 8003e6e:	bf00      	nop
 8003e70:	2000006c 	.word	0x2000006c

08003e74 <initialise_monitor_handles>:
 8003e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003f2c <initialise_monitor_handles+0xb8>
 8003e7e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003e82:	2303      	movs	r3, #3
 8003e84:	2400      	movs	r4, #0
 8003e86:	9303      	str	r3, [sp, #12]
 8003e88:	af01      	add	r7, sp, #4
 8003e8a:	9402      	str	r4, [sp, #8]
 8003e8c:	2501      	movs	r5, #1
 8003e8e:	4628      	mov	r0, r5
 8003e90:	4639      	mov	r1, r7
 8003e92:	beab      	bkpt	0x00ab
 8003e94:	4605      	mov	r5, r0
 8003e96:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003f30 <initialise_monitor_handles+0xbc>
 8003e9a:	4623      	mov	r3, r4
 8003e9c:	4c20      	ldr	r4, [pc, #128]	; (8003f20 <initialise_monitor_handles+0xac>)
 8003e9e:	f8c8 5000 	str.w	r5, [r8]
 8003ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	2b14      	cmp	r3, #20
 8003eae:	d1fa      	bne.n	8003ea6 <initialise_monitor_handles+0x32>
 8003eb0:	f7ff ffd4 	bl	8003e5c <_has_ext_stdout_stderr>
 8003eb4:	4d1b      	ldr	r5, [pc, #108]	; (8003f24 <initialise_monitor_handles+0xb0>)
 8003eb6:	b1d0      	cbz	r0, 8003eee <initialise_monitor_handles+0x7a>
 8003eb8:	f04f 0a03 	mov.w	sl, #3
 8003ebc:	2304      	movs	r3, #4
 8003ebe:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ec2:	2601      	movs	r6, #1
 8003ec4:	f8cd a00c 	str.w	sl, [sp, #12]
 8003ec8:	9302      	str	r3, [sp, #8]
 8003eca:	4630      	mov	r0, r6
 8003ecc:	4639      	mov	r1, r7
 8003ece:	beab      	bkpt	0x00ab
 8003ed0:	4683      	mov	fp, r0
 8003ed2:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <initialise_monitor_handles+0xb4>)
 8003ed4:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ed8:	f8c3 b000 	str.w	fp, [r3]
 8003edc:	2308      	movs	r3, #8
 8003ede:	f8cd a00c 	str.w	sl, [sp, #12]
 8003ee2:	9302      	str	r3, [sp, #8]
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	4639      	mov	r1, r7
 8003ee8:	beab      	bkpt	0x00ab
 8003eea:	4606      	mov	r6, r0
 8003eec:	602e      	str	r6, [r5, #0]
 8003eee:	682b      	ldr	r3, [r5, #0]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	bf02      	ittt	eq
 8003ef4:	4b0c      	ldreq	r3, [pc, #48]	; (8003f28 <initialise_monitor_handles+0xb4>)
 8003ef6:	681b      	ldreq	r3, [r3, #0]
 8003ef8:	602b      	streq	r3, [r5, #0]
 8003efa:	2600      	movs	r6, #0
 8003efc:	f8d8 3000 	ldr.w	r3, [r8]
 8003f00:	6023      	str	r3, [r4, #0]
 8003f02:	6066      	str	r6, [r4, #4]
 8003f04:	f7ff ffaa 	bl	8003e5c <_has_ext_stdout_stderr>
 8003f08:	b130      	cbz	r0, 8003f18 <initialise_monitor_handles+0xa4>
 8003f0a:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <initialise_monitor_handles+0xb4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003f12:	682b      	ldr	r3, [r5, #0]
 8003f14:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003f18:	b005      	add	sp, #20
 8003f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f1e:	bf00      	nop
 8003f20:	2000096c 	.word	0x2000096c
 8003f24:	20000960 	.word	0x20000960
 8003f28:	20000968 	.word	0x20000968
 8003f2c:	08003fbe 	.word	0x08003fbe
 8003f30:	20000964 	.word	0x20000964

08003f34 <_isatty>:
 8003f34:	b570      	push	{r4, r5, r6, lr}
 8003f36:	f7ff fd77 	bl	8003a28 <findslot>
 8003f3a:	2509      	movs	r5, #9
 8003f3c:	4604      	mov	r4, r0
 8003f3e:	b920      	cbnz	r0, 8003f4a <_isatty+0x16>
 8003f40:	f7ff fb0a 	bl	8003558 <__errno>
 8003f44:	6005      	str	r5, [r0, #0]
 8003f46:	4620      	mov	r0, r4
 8003f48:	bd70      	pop	{r4, r5, r6, pc}
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	beab      	bkpt	0x00ab
 8003f50:	4604      	mov	r4, r0
 8003f52:	2c01      	cmp	r4, #1
 8003f54:	d0f7      	beq.n	8003f46 <_isatty+0x12>
 8003f56:	f7ff faff 	bl	8003558 <__errno>
 8003f5a:	2400      	movs	r4, #0
 8003f5c:	4605      	mov	r5, r0
 8003f5e:	2613      	movs	r6, #19
 8003f60:	4630      	mov	r0, r6
 8003f62:	4621      	mov	r1, r4
 8003f64:	beab      	bkpt	0x00ab
 8003f66:	4606      	mov	r6, r0
 8003f68:	602e      	str	r6, [r5, #0]
 8003f6a:	e7ec      	b.n	8003f46 <_isatty+0x12>

08003f6c <_init>:
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	bf00      	nop
 8003f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f72:	bc08      	pop	{r3}
 8003f74:	469e      	mov	lr, r3
 8003f76:	4770      	bx	lr

08003f78 <_fini>:
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	bf00      	nop
 8003f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7e:	bc08      	pop	{r3}
 8003f80:	469e      	mov	lr, r3
 8003f82:	4770      	bx	lr
